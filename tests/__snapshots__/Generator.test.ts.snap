// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generator comment.extraTags 使用正常: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求类型**
 *
 * @状态 已完成
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 * @项目ID 11
 */
export interface Get2TestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **返回类型**
 *
 * @状态 已完成
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 * @项目ID 11
 */
export interface Get2TestResponse {
  msg: string;
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置的类型**
 *
 * @状态 已完成
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 * @项目ID 11
 */
type Get2TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get2_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置**
 *
 * @状态 已完成
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 * @项目ID 11
 */
const get2TestRequestConfig: Get2TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/get2_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"get2Test\\",
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求函数**
 *
 * @状态 已完成
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 * @项目ID 11
 */
export const get2Test = (
  requestData?: Get2TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Get2TestResponse>(
    prepare(get2TestRequestConfig, requestData),
    ...args,
  )
}

get2Test.requestConfig = get2TestRequestConfig",
]
`;

exports[`Generator comment.extraTags 使用正常: 输出路径 1`] = `"index.ts"`;

exports[`Generator customTypeMapping 使用正常: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export interface Get2TestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export interface Get2TestResponse {
  msg: boolean;
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
type Get2TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get2_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
const get2TestRequestConfig: Get2TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/get2_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"get2Test\\",
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export const get2Test = (
  requestData?: Get2TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Get2TestResponse>(
    prepare(get2TestRequestConfig, requestData),
    ...args,
  )
}

get2Test.requestConfig = get2TestRequestConfig",
]
`;

exports[`Generator customTypeMapping 使用正常: 输出路径 1`] = `"index.ts"`;

exports[`Generator dataKey 使用正常: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = \\"data\\" as any

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 成功啦
   */
  success: boolean;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  \\"data\\",
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"dataKeyExampleTest\\",
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (
  requestData: DataKeyExampleTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DataKeyExampleTestResponse>(
    prepare(dataKeyExampleTestRequestConfig, requestData),
    ...args,
  )
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig",
]
`;

exports[`Generator dataKey 使用正常: 输出路径 1`] = `"index.ts"`;

exports[`Generator dataKey 深度使用正常: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = [\\"container\\",\\"data\\",\\"realData\\"] as any

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export type DeepTestResponse = string;

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKey/deep_test\\",
  [\\"container\\",\\"data\\",\\"realData\\"],
  string,
  string,
  true
>>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKey/deep_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deepTest\\",
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (
  requestData?: DeepTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeepTestResponse>(
    prepare(deepTestRequestConfig, requestData),
    ...args,
  )
}

deepTest.requestConfig = deepTestRequestConfig",
]
`;

exports[`Generator dataKey 深度使用正常: 输出路径 1`] = `"index.ts"`;

exports[`Generator outputFilePath 可以是函数: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export interface Get2TestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export interface Get2TestResponse {
  msg: string;
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
type Get2TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get2_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
const get2TestRequestConfig: Get2TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/get2_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"get2Test\\",
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export const get2Test = (
  requestData?: Get2TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Get2TestResponse>(
    prepare(get2TestRequestConfig, requestData),
    ...args,
  )
}

get2Test.requestConfig = get2TestRequestConfig",
]
`;

exports[`Generator outputFilePath 可以是函数: 输出内容 2`] = `
Array [
  "const mockUrl_0_0_0_1 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_1 = \\"\\" as any
const prodUrl_0_0_0_1 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_1 = undefined as any

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
export interface Picture_3dDetailTestRequest {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
export interface Picture_3dDetailTestResponse {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
type Picture_3dDetailTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/issue-17/picture_3d_detail_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
const picture_3dDetailTestRequestConfig: Picture_3dDetailTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/issue-17/picture_3d_detail_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"picture_3dDetailTest\\",
}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
export const picture_3dDetailTest = (
  requestData?: Picture_3dDetailTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Picture_3dDetailTestResponse>(
    prepare(picture_3dDetailTestRequestConfig, requestData),
    ...args,
  )
}

picture_3dDetailTest.requestConfig = picture_3dDetailTestRequestConfig

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
export interface GetTestRequest {
  a: string;
  b: string;
  c: string;
  'd    e': string;
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
export interface GetTestResponse {}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
type GetTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/28/get_test\\",
  undefined,
  string,
  '   a' | ' b' | 'c ' | '    d    e   ',
  false
>>

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
const getTestRequestConfig: GetTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/28/get_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [\\"   a\\",\\" b\\",\\"c \\",\\"    d    e   \\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"getTest\\",
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
export const getTest = (
  requestData: GetTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<GetTestResponse>(
    prepare(getTestRequestConfig, requestData),
    ...args,
  )
}

getTest.requestConfig = getTestRequestConfig

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
export interface FormTestRequest {
  a: string;
  b: string;
  c: string;
  'd   e': string;
  'd    e': string;
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
export interface FormTestResponse {}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
type FormTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/28/post/form_test\\",
  undefined,
  string,
  '   a' | ' b' | 'c ' | '    d    e   ',
  false
>>

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
const formTestRequestConfig: FormTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/28/post/form_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [\\"   a\\",\\" b\\",\\"c \\",\\"    d    e   \\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"formTest\\",
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
export const formTest = (
  requestData: FormTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<FormTestResponse>(
    prepare(formTestRequestConfig, requestData),
    ...args,
  )
}

formTest.requestConfig = formTestRequestConfig

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
export interface JsonTestRequest {
  a: string;
  b: string;
  'c   d': string;
  e: {
    f: string;
  };
  c: string;
  'd    e': string;
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
export interface JsonTestResponse {
  a?: number;
  b?: string;
  c?: {
    d?: string;
  };
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
type JsonTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/28/post/json_test\\",
  undefined,
  string,
  '   a' | ' b' | 'c ' | '    d    e   ',
  false
>>

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
const jsonTestRequestConfig: JsonTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/28/post/json_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [\\"   a\\",\\" b\\",\\"c \\",\\"    d    e   \\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"jsonTest\\",
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
export const jsonTest = (
  requestData: JsonTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<JsonTestResponse>(
    prepare(jsonTestRequestConfig, requestData),
    ...args,
  )
}

jsonTest.requestConfig = jsonTestRequestConfig",
]
`;

exports[`Generator outputFilePath 可以是函数: 输出路径 1`] = `"test2.ts"`;

exports[`Generator outputFilePath 可以是函数: 输出路径 2`] = `"issues.ts"`;

exports[`Generator 只生成类型代码并写入文件: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
type FileData = File

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number
  /**
   * 格式
   */
  format: string
  /**
   * ID
   */
  id: number
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string
    }
  }
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/* prettier-ignore-end */
"
`;

exports[`Generator 只生成类型代码并写入文件: 输出内容 1`] = `
Array [
  "/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number;
  /**
   * 格式
   */
  format: string;
  /**
   * ID
   */
  id: number;
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number;
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string;
    };
  };
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string;
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}",
]
`;

exports[`Generator 只生成请求数据的 JSON Schema: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

type UserRequestRestArgs = RequestFunctionRestArgs<typeof request>

// Request: 目前 React Hooks 功能有用到
export type Request<
  TRequestData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/deleteMethod_test',
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {id: {type: 'string', description: 'ID'}},
    required: ['id'],
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
  requestFunctionName: 'deleteMethodTest',
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (requestData: DeleteMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeleteMethodTestResponse>(prepare(deleteMethodTestRequestConfig, requestData), ...args)
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/getMethod_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['x'],
    properties: {x: {type: 'string', description: 'X 值'}, y: {type: 'string', description: 'Y 值'}},
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
  requestFunctionName: 'getMethodTest',
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (requestData: GetMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<GetMethodTestResponse>(prepare(getMethodTestRequestConfig, requestData), ...args)
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Response_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
  requestFunctionName: 'json5ResponseTest',
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (requestData?: Json5ResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5ResponseTestResponse>(prepare(json5ResponseTestRequestConfig, requestData), ...args)
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Request_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {
      id: {type: 'integer', description: '1'},
      name: {type: 'string', description: '\\"方剑成\\"'},
      likes: {type: 'array', items: {type: 'string', description: '\\"photo\\"'}, description: '[\\"photo\\",2]', minItems: 0},
      nest: {
        type: 'object',
        properties: {
          x: {type: 'integer', description: '1'},
          y: {type: 'object', properties: {z: {type: 'string', description: '\\"2\\"'}}, additionalProperties: false},
        },
        additionalProperties: false,
      },
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
  requestFunctionName: 'json5RequestTest',
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (requestData: Json5RequestTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5RequestTestResponse>(prepare(json5RequestTestRequestConfig, requestData), ...args)
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/postMethod_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {
      page: {type: 'number', description: '页码'},
      limit: {type: 'number', description: '每页数量'},
      keyword: {type: 'string', description: '关键词'},
    },
    required: ['page', 'limit'],
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
  requestFunctionName: 'postMethodTest',
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (requestData: PostMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PostMethodTestResponse>(prepare(postMethodTestRequestConfig, requestData), ...args)
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/putMethod_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['x', 'id'],
    properties: {
      x: {type: 'string', description: 'X 值'},
      id: {type: 'string', description: ''},
      namre: {type: 'string', description: ''},
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
  requestFunctionName: 'putMethodTest',
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (requestData: PutMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PutMethodTestResponse>(prepare(putMethodTestRequestConfig, requestData), ...args)
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKeyExample_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['x', 'id'],
    properties: {
      x: {type: 'string', description: 'X 值'},
      id: {type: 'string', description: ''},
      namre: {type: 'string', description: ''},
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
  requestFunctionName: 'dataKeyExampleTest',
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (requestData: DataKeyExampleTestRequest, ...args: UserRequestRestArgs) => {
  return request<DataKeyExampleTestResponse>(prepare(dataKeyExampleTestRequestConfig, requestData), ...args)
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/upload_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['file', 'name'],
    properties: {
      file: {type: 'file', description: '文件', tsType: 'FileData'},
      name: {type: 'string', description: '名称'},
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
  requestFunctionName: 'uploadTest',
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (requestData: UploadTestRequest, ...args: UserRequestRestArgs) => {
  return request<UploadTestResponse>(prepare(uploadTestRequestConfig, requestData), ...args)
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {
      K1: {type: 'string', description: '键1'},
      K2: {type: 'number', description: '键2'},
      cid: {type: 'string', description: 'cid'},
    },
    required: ['K1', 'cid'],
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/noResponseData_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
  requestFunctionName: 'noResponseDataTest',
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (requestData?: NoResponseDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<NoResponseDataTestResponse>(prepare(noResponseDataTestRequestConfig, requestData), ...args)
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/emptyResponse_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {type: 'object', required: [], properties: {}, additionalProperties: false},
  responseDataJsonSchema: {},
  requestFunctionName: 'emptyResponseTest',
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (requestData?: EmptyResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<EmptyResponseTestResponse>(prepare(emptyResponseTestRequestConfig, requestData), ...args)
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['id', 'name', 'pass', 'test', 'avatar'],
    properties: {
      id: {type: 'string', description: '23'},
      name: {type: 'string', description: ''},
      pass: {type: 'string', description: ''},
      test: {type: 'string', description: ''},
      avatar: {type: 'string', description: ''},
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {
      K1: {type: 'string', description: '键1'},
      K2: {type: 'number', description: '键2'},
      hihihi: {type: 'string', description: '嗨咯'},
      id: {type: 'string', description: 'ID'},
    },
    required: ['K1', 'hihihi', 'id'],
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihiTest',
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (requestData: HihihiTestRequest, ...args: UserRequestRestArgs) => {
  return request<HihihiTestResponse>(prepare(hihihiTestRequestConfig, requestData), ...args)
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {
      K1: {type: 'string', description: '键1'},
      K2: {type: 'number', description: '键2'},
      query: {type: 'string', description: '22222'},
      hihihi: {type: 'string', description: '嗨咯'},
      id: {type: 'string', description: 'ID'},
      hihihi_1608478638207: {type: 'string', description: ''},
    },
    required: ['K1', 'hihihi', 'id', 'hihihi_1608478638207'],
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihi_1608478638207Test',
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(prepare(hihihi_1608478638207TestRequestConfig, requestData), ...args)
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/rawResponse_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
  requestFunctionName: 'rawResponseTest',
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (requestData?: RawResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<RawResponseTestResponse>(prepare(rawResponseTestRequestConfig, requestData), ...args)
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/headers_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/headers_test',
  method: Method.GET,
  requestHeaders: {Authorization: 'dddddd', Cookie: 'x=1'},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
  requestFunctionName: 'headersTest',
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (requestData?: HeadersTestRequest, ...args: UserRequestRestArgs) => {
  return request<HeadersTestResponse>(prepare(headersTestRequestConfig, requestData), ...args)
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number
  /**
   * 格式
   */
  format: string
  /**
   * ID
   */
  id: number
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/user/:id/avatar_test',
    undefined,
    'id',
    'size' | 'format',
    false
  >
>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/user/:id/avatar_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id'],
  queryNames: ['size', 'format'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['size', 'format', 'id'],
    properties: {
      size: {type: 'number', description: '大小'},
      format: {type: 'string', description: '格式'},
      id: {type: 'number', description: 'ID'},
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
  requestFunctionName: 'avatarTest',
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (requestData: AvatarTestRequest, ...args: UserRequestRestArgs) => {
  return request<AvatarTestResponse>(prepare(avatarTestRequestConfig, requestData), ...args)
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string
    }
  }
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKey/deep_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKey/deep_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
  requestFunctionName: 'deepTest',
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (requestData?: DeepTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeepTestResponse>(prepare(deepTestRequestConfig, requestData), ...args)
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/get/only_post_form_data_test',
    undefined,
    string,
    'query_id',
    false
  >
>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/get/only_post_form_data_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['query_id'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['query_id'],
    properties: {query_id: {type: 'string', description: 'id'}},
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
  requestFunctionName: 'onlyPostFormDataTest',
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (requestData: OnlyPostFormDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<OnlyPostFormDataTestResponse>(prepare(onlyPostFormDataTestRequestConfig, requestData), ...args)
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig

/* prettier-ignore-end */
"
`;

exports[`Generator 只生成请求数据的 JSON Schema: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"ID\\"}},\\"required\\":[\\"id\\"],\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deleteMethodTest\\",
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (
  requestData: DeleteMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeleteMethodTestResponse>(
    prepare(deleteMethodTestRequestConfig, requestData),
    ...args,
  )
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/getMethod_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"x\\"],\\"properties\\":{\\"x\\":{\\"type\\":\\"string\\",\\"description\\":\\"X 值\\"},\\"y\\":{\\"type\\":\\"string\\",\\"description\\":\\"Y 值\\"}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
  requestFunctionName: \\"getMethodTest\\",
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (
  requestData: GetMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<GetMethodTestResponse>(
    prepare(getMethodTestRequestConfig, requestData),
    ...args,
  )
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Response_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5ResponseTest\\",
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (
  requestData?: Json5ResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5ResponseTestResponse>(
    prepare(json5ResponseTestRequestConfig, requestData),
    ...args,
  )
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Request_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"integer\\",\\"description\\":\\"1\\"},\\"name\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\\\\\"方剑成\\\\\\"\\"},\\"likes\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\\\\\"photo\\\\\\"\\"},\\"description\\":\\"[\\\\\\"photo\\\\\\",2]\\",\\"minItems\\":0},\\"nest\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"x\\":{\\"type\\":\\"integer\\",\\"description\\":\\"1\\"},\\"y\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"z\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\\\\\"2\\\\\\"\\"}},\\"additionalProperties\\":false}},\\"additionalProperties\\":false}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5RequestTest\\",
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (
  requestData: Json5RequestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5RequestTestResponse>(
    prepare(json5RequestTestRequestConfig, requestData),
    ...args,
  )
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/postMethod_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"page\\":{\\"type\\":\\"number\\",\\"description\\":\\"页码\\"},\\"limit\\":{\\"type\\":\\"number\\",\\"description\\":\\"每页数量\\"},\\"keyword\\":{\\"type\\":\\"string\\",\\"description\\":\\"关键词\\"}},\\"required\\":[\\"page\\",\\"limit\\"],\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
  requestFunctionName: \\"postMethodTest\\",
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (
  requestData: PostMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PostMethodTestResponse>(
    prepare(postMethodTestRequestConfig, requestData),
    ...args,
  )
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/putMethod_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"x\\",\\"id\\"],\\"properties\\":{\\"x\\":{\\"type\\":\\"string\\",\\"description\\":\\"X 值\\"},\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\"},\\"namre\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\"}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
  requestFunctionName: \\"putMethodTest\\",
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (
  requestData: PutMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PutMethodTestResponse>(
    prepare(putMethodTestRequestConfig, requestData),
    ...args,
  )
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"x\\",\\"id\\"],\\"properties\\":{\\"x\\":{\\"type\\":\\"string\\",\\"description\\":\\"X 值\\"},\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\"},\\"namre\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\"}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
  requestFunctionName: \\"dataKeyExampleTest\\",
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (
  requestData: DataKeyExampleTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DataKeyExampleTestResponse>(
    prepare(dataKeyExampleTestRequestConfig, requestData),
    ...args,
  )
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/upload_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"file\\",\\"name\\"],\\"properties\\":{\\"file\\":{\\"type\\":\\"file\\",\\"description\\":\\"文件\\",\\"tsType\\":\\"FileData\\"},\\"name\\":{\\"type\\":\\"string\\",\\"description\\":\\"名称\\"}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
  requestFunctionName: \\"uploadTest\\",
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (
  requestData: UploadTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<UploadTestResponse>(
    prepare(uploadTestRequestConfig, requestData),
    ...args,
  )
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"K1\\":{\\"type\\":\\"string\\",\\"description\\":\\"键1\\"},\\"K2\\":{\\"type\\":\\"number\\",\\"description\\":\\"键2\\"},\\"cid\\":{\\"type\\":\\"string\\",\\"description\\":\\"cid\\"}},\\"required\\":[\\"K1\\",\\"cid\\"],\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/noResponseData_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
  requestFunctionName: \\"noResponseDataTest\\",
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (
  requestData?: NoResponseDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<NoResponseDataTestResponse>(
    prepare(noResponseDataTestRequestConfig, requestData),
    ...args,
  )
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/emptyResponse_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[],\\"properties\\":{},\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
  requestFunctionName: \\"emptyResponseTest\\",
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (
  requestData?: EmptyResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<EmptyResponseTestResponse>(
    prepare(emptyResponseTestRequestConfig, requestData),
    ...args,
  )
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"23\\"},\\"name\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\"},\\"pass\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\"},\\"test\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\"},\\"avatar\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\"}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"K1\\":{\\"type\\":\\"string\\",\\"description\\":\\"键1\\"},\\"K2\\":{\\"type\\":\\"number\\",\\"description\\":\\"键2\\"},\\"hihihi\\":{\\"type\\":\\"string\\",\\"description\\":\\"嗨咯\\"},\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"ID\\"}},\\"required\\":[\\"K1\\",\\"hihihi\\",\\"id\\"],\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihiTest\\",
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (
  requestData: HihihiTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HihihiTestResponse>(
    prepare(hihihiTestRequestConfig, requestData),
    ...args,
  )
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"K1\\":{\\"type\\":\\"string\\",\\"description\\":\\"键1\\"},\\"K2\\":{\\"type\\":\\"number\\",\\"description\\":\\"键2\\"},\\"query\\":{\\"type\\":\\"string\\",\\"description\\":\\"22222\\"},\\"hihihi\\":{\\"type\\":\\"string\\",\\"description\\":\\"嗨咯\\"},\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"ID\\"},\\"hihihi_1608478638207\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\"}},\\"required\\":[\\"K1\\",\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihi_1608478638207Test\\",
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(
    prepare(hihihi_1608478638207TestRequestConfig, requestData),
    ...args,
  )
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/rawResponse_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
  requestFunctionName: \\"rawResponseTest\\",
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (
  requestData?: RawResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<RawResponseTestResponse>(
    prepare(rawResponseTestRequestConfig, requestData),
    ...args,
  )
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/headers_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/headers_test\\",
  method: Method.GET,
  requestHeaders: {\\"Authorization\\":\\"dddddd\\",\\"Cookie\\":\\"x=1\\"},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
  requestFunctionName: \\"headersTest\\",
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (
  requestData?: HeadersTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HeadersTestResponse>(
    prepare(headersTestRequestConfig, requestData),
    ...args,
  )
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number;
  /**
   * 格式
   */
  format: string;
  /**
   * ID
   */
  id: number;
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/user/:id/avatar_test\\",
  undefined,
  'id',
  'size' | 'format',
  false
>>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/user/:id/avatar_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\"],
  queryNames: [\\"size\\",\\"format\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"size\\",\\"format\\",\\"id\\"],\\"properties\\":{\\"size\\":{\\"type\\":\\"number\\",\\"description\\":\\"大小\\"},\\"format\\":{\\"type\\":\\"string\\",\\"description\\":\\"格式\\"},\\"id\\":{\\"type\\":\\"number\\",\\"description\\":\\"ID\\"}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
  requestFunctionName: \\"avatarTest\\",
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (
  requestData: AvatarTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<AvatarTestResponse>(
    prepare(avatarTestRequestConfig, requestData),
    ...args,
  )
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number;
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string;
    };
  };
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKey/deep_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKey/deep_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
  requestFunctionName: \\"deepTest\\",
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (
  requestData?: DeepTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeepTestResponse>(
    prepare(deepTestRequestConfig, requestData),
    ...args,
  )
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string;
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get/only_post_form_data_test\\",
  undefined,
  string,
  'query_id',
  false
>>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/get/only_post_form_data_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"query_id\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"query_id\\"],\\"properties\\":{\\"query_id\\":{\\"type\\":\\"string\\",\\"description\\":\\"id\\"}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
  requestFunctionName: \\"onlyPostFormDataTest\\",
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (
  requestData: OnlyPostFormDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<OnlyPostFormDataTestResponse>(
    prepare(onlyPostFormDataTestRequestConfig, requestData),
    ...args,
  )
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig",
]
`;

exports[`Generator 只生成返回数据的 JSON Schema: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

type UserRequestRestArgs = RequestFunctionRestArgs<typeof request>

// Request: 目前 React Hooks 功能有用到
export type Request<
  TRequestData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/deleteMethod_test',
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {type: 'object', properties: {}, additionalProperties: false},
  requestFunctionName: 'deleteMethodTest',
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (requestData: DeleteMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeleteMethodTestResponse>(prepare(deleteMethodTestRequestConfig, requestData), ...args)
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/getMethod_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {
    type: 'object',
    properties: {result: {type: 'number', description: '结果'}},
    required: ['result'],
    additionalProperties: false,
  },
  requestFunctionName: 'getMethodTest',
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (requestData: GetMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<GetMethodTestResponse>(prepare(getMethodTestRequestConfig, requestData), ...args)
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Response_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {
    template: {id: 1, age: '@float', name: '@name'},
    type: 'object',
    rule: {},
    path: ['ROOT'],
    properties: {
      id: {name: 'id', template: 1, type: 'number', rule: {}, path: ['ROOT', 'id']},
      age: {name: 'age', template: '@float', type: 'string', rule: {}, path: ['ROOT', 'age']},
      name: {name: 'name', template: '@name', type: 'string', rule: {}, path: ['ROOT', 'name']},
    },
    additionalProperties: false,
  },
  requestFunctionName: 'json5ResponseTest',
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (requestData?: Json5ResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5ResponseTestResponse>(prepare(json5ResponseTestRequestConfig, requestData), ...args)
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Request_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5RequestTest',
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (requestData: Json5RequestTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5RequestTestResponse>(prepare(json5RequestTestRequestConfig, requestData), ...args)
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/postMethod_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {
    type: 'object',
    properties: {
      list: {
        type: 'array',
        items: {
          type: 'object',
          properties: {name: {type: 'string', description: '姓名'}},
          required: ['name'],
          additionalProperties: false,
        },
        description: '列表',
        minItems: 0,
      },
    },
    required: ['list'],
    additionalProperties: false,
  },
  requestFunctionName: 'postMethodTest',
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (requestData: PostMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PostMethodTestResponse>(prepare(postMethodTestRequestConfig, requestData), ...args)
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/putMethod_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {
    type: 'object',
    properties: {
      err: {type: 'number', description: '错误'},
      msg: {type: 'string', description: '错误详情'},
      data: {type: 'object', properties: {}, description: '数据', additionalProperties: false},
    },
    required: ['err', 'msg'],
    additionalProperties: false,
  },
  requestFunctionName: 'putMethodTest',
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (requestData: PutMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PutMethodTestResponse>(prepare(putMethodTestRequestConfig, requestData), ...args)
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKeyExample_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {
    type: 'object',
    properties: {
      err: {type: 'number', description: '错误'},
      msg: {type: 'string', description: '错误详情'},
      data: {
        type: 'object',
        properties: {success: {type: 'boolean', description: '成功啦'}},
        description: '数据',
        required: ['success'],
        additionalProperties: false,
      },
    },
    required: ['err', 'msg'],
    additionalProperties: false,
  },
  requestFunctionName: 'dataKeyExampleTest',
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (requestData: DataKeyExampleTestRequest, ...args: UserRequestRestArgs) => {
  return request<DataKeyExampleTestResponse>(prepare(dataKeyExampleTestRequestConfig, requestData), ...args)
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/upload_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {type: 'object', properties: {}, additionalProperties: false},
  requestFunctionName: 'uploadTest',
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (requestData: UploadTestRequest, ...args: UserRequestRestArgs) => {
  return request<UploadTestResponse>(prepare(uploadTestRequestConfig, requestData), ...args)
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/noResponseData_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'noResponseDataTest',
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (requestData?: NoResponseDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<NoResponseDataTestResponse>(prepare(noResponseDataTestRequestConfig, requestData), ...args)
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/emptyResponse_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {type: 'object', properties: {}, additionalProperties: false},
  requestFunctionName: 'emptyResponseTest',
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (requestData?: EmptyResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<EmptyResponseTestResponse>(prepare(emptyResponseTestRequestConfig, requestData), ...args)
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihiTest',
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (requestData: HihihiTestRequest, ...args: UserRequestRestArgs) => {
  return request<HihihiTestResponse>(prepare(hihihiTestRequestConfig, requestData), ...args)
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihi_1608478638207Test',
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(prepare(hihihi_1608478638207TestRequestConfig, requestData), ...args)
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/rawResponse_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'rawResponseTest',
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (requestData?: RawResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<RawResponseTestResponse>(prepare(rawResponseTestRequestConfig, requestData), ...args)
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/headers_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/headers_test',
  method: Method.GET,
  requestHeaders: {Authorization: 'dddddd', Cookie: 'x=1'},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {type: 'object', properties: {}, additionalProperties: false},
  requestFunctionName: 'headersTest',
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (requestData?: HeadersTestRequest, ...args: UserRequestRestArgs) => {
  return request<HeadersTestResponse>(prepare(headersTestRequestConfig, requestData), ...args)
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number
  /**
   * 格式
   */
  format: string
  /**
   * ID
   */
  id: number
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/user/:id/avatar_test',
    undefined,
    'id',
    'size' | 'format',
    false
  >
>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/user/:id/avatar_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id'],
  queryNames: ['size', 'format'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'avatarTest',
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (requestData: AvatarTestRequest, ...args: UserRequestRestArgs) => {
  return request<AvatarTestResponse>(prepare(avatarTestRequestConfig, requestData), ...args)
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string
    }
  }
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKey/deep_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKey/deep_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {
    $schema: 'http://json-schema.org/draft-04/schema#',
    type: 'object',
    properties: {
      err: {type: 'number'},
      container: {
        type: 'object',
        properties: {
          data: {
            type: 'object',
            properties: {realData: {type: 'string', description: '真数据'}},
            required: ['realData'],
            additionalProperties: false,
          },
        },
        required: ['data'],
        additionalProperties: false,
      },
    },
    required: ['err', 'container'],
    additionalProperties: false,
  },
  requestFunctionName: 'deepTest',
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (requestData?: DeepTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeepTestResponse>(prepare(deepTestRequestConfig, requestData), ...args)
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/get/only_post_form_data_test',
    undefined,
    string,
    'query_id',
    false
  >
>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/get/only_post_form_data_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['query_id'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'onlyPostFormDataTest',
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (requestData: OnlyPostFormDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<OnlyPostFormDataTestResponse>(prepare(onlyPostFormDataTestRequestConfig, requestData), ...args)
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig

/* prettier-ignore-end */
"
`;

exports[`Generator 只生成返回数据的 JSON Schema: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{},\\"additionalProperties\\":false},
  requestFunctionName: \\"deleteMethodTest\\",
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (
  requestData: DeleteMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeleteMethodTestResponse>(
    prepare(deleteMethodTestRequestConfig, requestData),
    ...args,
  )
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/getMethod_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"result\\":{\\"type\\":\\"number\\",\\"description\\":\\"结果\\"}},\\"required\\":[\\"result\\"],\\"additionalProperties\\":false},
  requestFunctionName: \\"getMethodTest\\",
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (
  requestData: GetMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<GetMethodTestResponse>(
    prepare(getMethodTestRequestConfig, requestData),
    ...args,
  )
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Response_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {\\"template\\":{\\"id\\":1,\\"age\\":\\"@float\\",\\"name\\":\\"@name\\"},\\"type\\":\\"object\\",\\"rule\\":{},\\"path\\":[\\"ROOT\\"],\\"properties\\":{\\"id\\":{\\"name\\":\\"id\\",\\"template\\":1,\\"type\\":\\"number\\",\\"rule\\":{},\\"path\\":[\\"ROOT\\",\\"id\\"]},\\"age\\":{\\"name\\":\\"age\\",\\"template\\":\\"@float\\",\\"type\\":\\"string\\",\\"rule\\":{},\\"path\\":[\\"ROOT\\",\\"age\\"]},\\"name\\":{\\"name\\":\\"name\\",\\"template\\":\\"@name\\",\\"type\\":\\"string\\",\\"rule\\":{},\\"path\\":[\\"ROOT\\",\\"name\\"]}},\\"additionalProperties\\":false},
  requestFunctionName: \\"json5ResponseTest\\",
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (
  requestData?: Json5ResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5ResponseTestResponse>(
    prepare(json5ResponseTestRequestConfig, requestData),
    ...args,
  )
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Request_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5RequestTest\\",
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (
  requestData: Json5RequestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5RequestTestResponse>(
    prepare(json5RequestTestRequestConfig, requestData),
    ...args,
  )
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/postMethod_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"list\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"name\\":{\\"type\\":\\"string\\",\\"description\\":\\"姓名\\"}},\\"required\\":[\\"name\\"],\\"additionalProperties\\":false},\\"description\\":\\"列表\\",\\"minItems\\":0}},\\"required\\":[\\"list\\"],\\"additionalProperties\\":false},
  requestFunctionName: \\"postMethodTest\\",
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (
  requestData: PostMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PostMethodTestResponse>(
    prepare(postMethodTestRequestConfig, requestData),
    ...args,
  )
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/putMethod_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"err\\":{\\"type\\":\\"number\\",\\"description\\":\\"错误\\"},\\"msg\\":{\\"type\\":\\"string\\",\\"description\\":\\"错误详情\\"},\\"data\\":{\\"type\\":\\"object\\",\\"properties\\":{},\\"description\\":\\"数据\\",\\"additionalProperties\\":false}},\\"required\\":[\\"err\\",\\"msg\\"],\\"additionalProperties\\":false},
  requestFunctionName: \\"putMethodTest\\",
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (
  requestData: PutMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PutMethodTestResponse>(
    prepare(putMethodTestRequestConfig, requestData),
    ...args,
  )
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"err\\":{\\"type\\":\\"number\\",\\"description\\":\\"错误\\"},\\"msg\\":{\\"type\\":\\"string\\",\\"description\\":\\"错误详情\\"},\\"data\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"success\\":{\\"type\\":\\"boolean\\",\\"description\\":\\"成功啦\\"}},\\"description\\":\\"数据\\",\\"required\\":[\\"success\\"],\\"additionalProperties\\":false}},\\"required\\":[\\"err\\",\\"msg\\"],\\"additionalProperties\\":false},
  requestFunctionName: \\"dataKeyExampleTest\\",
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (
  requestData: DataKeyExampleTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DataKeyExampleTestResponse>(
    prepare(dataKeyExampleTestRequestConfig, requestData),
    ...args,
  )
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/upload_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{},\\"additionalProperties\\":false},
  requestFunctionName: \\"uploadTest\\",
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (
  requestData: UploadTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<UploadTestResponse>(
    prepare(uploadTestRequestConfig, requestData),
    ...args,
  )
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/noResponseData_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"noResponseDataTest\\",
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (
  requestData?: NoResponseDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<NoResponseDataTestResponse>(
    prepare(noResponseDataTestRequestConfig, requestData),
    ...args,
  )
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/emptyResponse_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{},\\"additionalProperties\\":false},
  requestFunctionName: \\"emptyResponseTest\\",
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (
  requestData?: EmptyResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<EmptyResponseTestResponse>(
    prepare(emptyResponseTestRequestConfig, requestData),
    ...args,
  )
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihiTest\\",
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (
  requestData: HihihiTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HihihiTestResponse>(
    prepare(hihihiTestRequestConfig, requestData),
    ...args,
  )
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihi_1608478638207Test\\",
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(
    prepare(hihihi_1608478638207TestRequestConfig, requestData),
    ...args,
  )
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/rawResponse_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"rawResponseTest\\",
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (
  requestData?: RawResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<RawResponseTestResponse>(
    prepare(rawResponseTestRequestConfig, requestData),
    ...args,
  )
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/headers_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/headers_test\\",
  method: Method.GET,
  requestHeaders: {\\"Authorization\\":\\"dddddd\\",\\"Cookie\\":\\"x=1\\"},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{},\\"additionalProperties\\":false},
  requestFunctionName: \\"headersTest\\",
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (
  requestData?: HeadersTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HeadersTestResponse>(
    prepare(headersTestRequestConfig, requestData),
    ...args,
  )
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number;
  /**
   * 格式
   */
  format: string;
  /**
   * ID
   */
  id: number;
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/user/:id/avatar_test\\",
  undefined,
  'id',
  'size' | 'format',
  false
>>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/user/:id/avatar_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\"],
  queryNames: [\\"size\\",\\"format\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"avatarTest\\",
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (
  requestData: AvatarTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<AvatarTestResponse>(
    prepare(avatarTestRequestConfig, requestData),
    ...args,
  )
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number;
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string;
    };
  };
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKey/deep_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKey/deep_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {\\"$schema\\":\\"http://json-schema.org/draft-04/schema#\\",\\"type\\":\\"object\\",\\"properties\\":{\\"err\\":{\\"type\\":\\"number\\"},\\"container\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"data\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"realData\\":{\\"type\\":\\"string\\",\\"description\\":\\"真数据\\"}},\\"required\\":[\\"realData\\"],\\"additionalProperties\\":false}},\\"required\\":[\\"data\\"],\\"additionalProperties\\":false}},\\"required\\":[\\"err\\",\\"container\\"],\\"additionalProperties\\":false},
  requestFunctionName: \\"deepTest\\",
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (
  requestData?: DeepTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeepTestResponse>(
    prepare(deepTestRequestConfig, requestData),
    ...args,
  )
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string;
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get/only_post_form_data_test\\",
  undefined,
  string,
  'query_id',
  false
>>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/get/only_post_form_data_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"query_id\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"onlyPostFormDataTest\\",
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (
  requestData: OnlyPostFormDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<OnlyPostFormDataTestResponse>(
    prepare(onlyPostFormDataTestRequestConfig, requestData),
    ...args,
  )
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig",
]
`;

exports[`Generator 排除接口: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

type UserRequestRestArgs = RequestFunctionRestArgs<typeof request>

// Request: 目前 React Hooks 功能有用到
export type Request<
  TRequestData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_1 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_1 = '' as any
const prodUrl_0_0_0_1 = 'http://prod.com/' as any
const dataKey_0_0_0_1 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/deleteMethod_test',
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deleteMethodTest',
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (requestData: DeleteMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeleteMethodTestResponse>(prepare(deleteMethodTestRequestConfig, requestData), ...args)
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/* prettier-ignore-end */
"
`;

exports[`Generator 排除接口: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_1 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_1 = \\"\\" as any
const prodUrl_0_0_0_1 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_1 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deleteMethodTest\\",
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (
  requestData: DeleteMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeleteMethodTestResponse>(
    prepare(deleteMethodTestRequestConfig, requestData),
    ...args,
  )
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig",
]
`;

exports[`Generator 支持将 token 设为数组: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

type UserRequestRestArgs = RequestFunctionRestArgs<typeof request>

// Request: 目前 React Hooks 功能有用到
export type Request<
  TRequestData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__projectA__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__projectA__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__projectA__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__projectA__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/deleteMethod_test',
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deleteMethodTest',
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__projectA__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (requestData: DeleteMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeleteMethodTestResponse>(prepare(deleteMethodTestRequestConfig, requestData), ...args)
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/getMethod_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'getMethodTest',
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (requestData: GetMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<GetMethodTestResponse>(prepare(getMethodTestRequestConfig, requestData), ...args)
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/json5Response_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5ResponseTest',
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (requestData?: Json5ResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5ResponseTestResponse>(prepare(json5ResponseTestRequestConfig, requestData), ...args)
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/json5Request_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5RequestTest',
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (requestData: Json5RequestTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5RequestTestResponse>(prepare(json5RequestTestRequestConfig, requestData), ...args)
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/postMethod_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'postMethodTest',
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (requestData: PostMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PostMethodTestResponse>(prepare(postMethodTestRequestConfig, requestData), ...args)
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectA__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectA__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectA__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectA__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/putMethod_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'putMethodTest',
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectA__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (requestData: PutMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PutMethodTestResponse>(prepare(putMethodTestRequestConfig, requestData), ...args)
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectA__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectA__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectA__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectA__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/dataKeyExample_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'dataKeyExampleTest',
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectA__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (requestData: DataKeyExampleTestRequest, ...args: UserRequestRestArgs) => {
  return request<DataKeyExampleTestResponse>(prepare(dataKeyExampleTestRequestConfig, requestData), ...args)
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/upload_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'uploadTest',
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (requestData: UploadTestRequest, ...args: UserRequestRestArgs) => {
  return request<UploadTestResponse>(prepare(uploadTestRequestConfig, requestData), ...args)
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/noResponseData_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'noResponseDataTest',
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (requestData?: NoResponseDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<NoResponseDataTestResponse>(prepare(noResponseDataTestRequestConfig, requestData), ...args)
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/emptyResponse_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'emptyResponseTest',
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (requestData?: EmptyResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<EmptyResponseTestResponse>(prepare(emptyResponseTestRequestConfig, requestData), ...args)
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihiTest',
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (requestData: HihihiTestRequest, ...args: UserRequestRestArgs) => {
  return request<HihihiTestResponse>(prepare(hihihiTestRequestConfig, requestData), ...args)
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihi_1608478638207Test',
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(prepare(hihihi_1608478638207TestRequestConfig, requestData), ...args)
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/rawResponse_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'rawResponseTest',
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (requestData?: RawResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<RawResponseTestResponse>(prepare(rawResponseTestRequestConfig, requestData), ...args)
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/headers_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/headers_test',
  method: Method.GET,
  requestHeaders: {Authorization: 'dddddd', Cookie: 'x=1'},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'headersTest',
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (requestData?: HeadersTestRequest, ...args: UserRequestRestArgs) => {
  return request<HeadersTestResponse>(prepare(headersTestRequestConfig, requestData), ...args)
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number
  /**
   * 格式
   */
  format: string
  /**
   * ID
   */
  id: number
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/user/:id/avatar_test',
    undefined,
    'id',
    'size' | 'format',
    false
  >
>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/user/:id/avatar_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id'],
  queryNames: ['size', 'format'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'avatarTest',
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (requestData: AvatarTestRequest, ...args: UserRequestRestArgs) => {
  return request<AvatarTestResponse>(prepare(avatarTestRequestConfig, requestData), ...args)
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string
    }
  }
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/dataKey/deep_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/dataKey/deep_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deepTest',
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (requestData?: DeepTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeepTestResponse>(prepare(deepTestRequestConfig, requestData), ...args)
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectA__/get/only_post_form_data_test',
    undefined,
    string,
    'query_id',
    false
  >
>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__projectA__/get/only_post_form_data_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['query_id'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'onlyPostFormDataTest',
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (requestData: OnlyPostFormDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<OnlyPostFormDataTestResponse>(prepare(onlyPostFormDataTestRequestConfig, requestData), ...args)
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig

const mockUrl_0_1_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_1_0_0 = '' as any
const prodUrl_0_1_0_0 = 'http://prod.com/' as any
const dataKey_0_1_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__projectB__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__projectB__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__projectB__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__projectB__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/deleteMethod_test',
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deleteMethodTest',
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__projectB__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (requestData: DeleteMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeleteMethodTestResponse>(prepare(deleteMethodTestRequestConfig, requestData), ...args)
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/getMethod_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'getMethodTest',
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (requestData: GetMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<GetMethodTestResponse>(prepare(getMethodTestRequestConfig, requestData), ...args)
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/json5Response_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5ResponseTest',
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (requestData?: Json5ResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5ResponseTestResponse>(prepare(json5ResponseTestRequestConfig, requestData), ...args)
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/json5Request_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5RequestTest',
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (requestData: Json5RequestTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5RequestTestResponse>(prepare(json5RequestTestRequestConfig, requestData), ...args)
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/postMethod_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'postMethodTest',
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (requestData: PostMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PostMethodTestResponse>(prepare(postMethodTestRequestConfig, requestData), ...args)
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectB__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectB__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectB__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectB__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/putMethod_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'putMethodTest',
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectB__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (requestData: PutMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PutMethodTestResponse>(prepare(putMethodTestRequestConfig, requestData), ...args)
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectB__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectB__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectB__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectB__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/dataKeyExample_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'dataKeyExampleTest',
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectB__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (requestData: DataKeyExampleTestRequest, ...args: UserRequestRestArgs) => {
  return request<DataKeyExampleTestResponse>(prepare(dataKeyExampleTestRequestConfig, requestData), ...args)
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/upload_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'uploadTest',
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (requestData: UploadTestRequest, ...args: UserRequestRestArgs) => {
  return request<UploadTestResponse>(prepare(uploadTestRequestConfig, requestData), ...args)
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/noResponseData_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'noResponseDataTest',
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (requestData?: NoResponseDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<NoResponseDataTestResponse>(prepare(noResponseDataTestRequestConfig, requestData), ...args)
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/emptyResponse_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'emptyResponseTest',
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (requestData?: EmptyResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<EmptyResponseTestResponse>(prepare(emptyResponseTestRequestConfig, requestData), ...args)
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihiTest',
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (requestData: HihihiTestRequest, ...args: UserRequestRestArgs) => {
  return request<HihihiTestResponse>(prepare(hihihiTestRequestConfig, requestData), ...args)
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihi_1608478638207Test',
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(prepare(hihihi_1608478638207TestRequestConfig, requestData), ...args)
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/rawResponse_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'rawResponseTest',
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (requestData?: RawResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<RawResponseTestResponse>(prepare(rawResponseTestRequestConfig, requestData), ...args)
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/headers_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/headers_test',
  method: Method.GET,
  requestHeaders: {Authorization: 'dddddd', Cookie: 'x=1'},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'headersTest',
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (requestData?: HeadersTestRequest, ...args: UserRequestRestArgs) => {
  return request<HeadersTestResponse>(prepare(headersTestRequestConfig, requestData), ...args)
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number
  /**
   * 格式
   */
  format: string
  /**
   * ID
   */
  id: number
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/user/:id/avatar_test',
    undefined,
    'id',
    'size' | 'format',
    false
  >
>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/user/:id/avatar_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: ['id'],
  queryNames: ['size', 'format'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'avatarTest',
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (requestData: AvatarTestRequest, ...args: UserRequestRestArgs) => {
  return request<AvatarTestResponse>(prepare(avatarTestRequestConfig, requestData), ...args)
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string
    }
  }
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/dataKey/deep_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/dataKey/deep_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deepTest',
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (requestData?: DeepTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeepTestResponse>(prepare(deepTestRequestConfig, requestData), ...args)
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__projectB__/get/only_post_form_data_test',
    undefined,
    string,
    'query_id',
    false
  >
>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: '/__projectB__/get/only_post_form_data_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: ['query_id'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'onlyPostFormDataTest',
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (requestData: OnlyPostFormDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<OnlyPostFormDataTestResponse>(prepare(onlyPostFormDataTestRequestConfig, requestData), ...args)
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig

/* prettier-ignore-end */
"
`;

exports[`Generator 支持将 token 设为数组: 请求文件 1`] = `
"import { RequestFunctionParams } from 'yapi-to-typescript'

export interface RequestOptions {
  /**
   * 使用的服务器。
   *
   * - \`prod\`: 生产服务器
   * - \`dev\`: 测试服务器
   * - \`mock\`: 模拟服务器
   *
   * @default prod
   */
  server?: 'prod' | 'dev' | 'mock',
}

export default function request<TResponseData>(
  payload: RequestFunctionParams,
  options: RequestOptions = {
    server: 'prod',
  },
): Promise<TResponseData> {
  return new Promise<TResponseData>((resolve, reject) => {
    // 基本地址
    const baseUrl = options.server === 'mock'
      ? payload.mockUrl
      : options.server === 'dev'
        ? payload.devUrl
        : payload.prodUrl

    // 请求地址
    const url = \`\${baseUrl}\${payload.path}\`

    // 具体请求逻辑
  })
}"
`;

exports[`Generator 支持将 token 设为数组: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__projectA__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__projectA__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__projectA__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__projectA__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/deleteMethod_test\\",
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deleteMethodTest\\",
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__projectA__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (
  requestData: DeleteMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeleteMethodTestResponse>(
    prepare(deleteMethodTestRequestConfig, requestData),
    ...args,
  )
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/getMethod_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"getMethodTest\\",
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (
  requestData: GetMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<GetMethodTestResponse>(
    prepare(getMethodTestRequestConfig, requestData),
    ...args,
  )
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/json5Response_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5ResponseTest\\",
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (
  requestData?: Json5ResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5ResponseTestResponse>(
    prepare(json5ResponseTestRequestConfig, requestData),
    ...args,
  )
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/json5Request_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5RequestTest\\",
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (
  requestData: Json5RequestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5RequestTestResponse>(
    prepare(json5RequestTestRequestConfig, requestData),
    ...args,
  )
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/postMethod_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"postMethodTest\\",
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (
  requestData: PostMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PostMethodTestResponse>(
    prepare(postMethodTestRequestConfig, requestData),
    ...args,
  )
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectA__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectA__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectA__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectA__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/putMethod_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"putMethodTest\\",
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectA__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (
  requestData: PutMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PutMethodTestResponse>(
    prepare(putMethodTestRequestConfig, requestData),
    ...args,
  )
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectA__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectA__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectA__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectA__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/dataKeyExample_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"dataKeyExampleTest\\",
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectA__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (
  requestData: DataKeyExampleTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DataKeyExampleTestResponse>(
    prepare(dataKeyExampleTestRequestConfig, requestData),
    ...args,
  )
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/upload_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"uploadTest\\",
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (
  requestData: UploadTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<UploadTestResponse>(
    prepare(uploadTestRequestConfig, requestData),
    ...args,
  )
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/noResponseData_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"noResponseDataTest\\",
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (
  requestData?: NoResponseDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<NoResponseDataTestResponse>(
    prepare(noResponseDataTestRequestConfig, requestData),
    ...args,
  )
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/emptyResponse_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"emptyResponseTest\\",
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (
  requestData?: EmptyResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<EmptyResponseTestResponse>(
    prepare(emptyResponseTestRequestConfig, requestData),
    ...args,
  )
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihiTest\\",
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (
  requestData: HihihiTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HihihiTestResponse>(
    prepare(hihihiTestRequestConfig, requestData),
    ...args,
  )
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihi_1608478638207Test\\",
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectA__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(
    prepare(hihihi_1608478638207TestRequestConfig, requestData),
    ...args,
  )
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/rawResponse_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"rawResponseTest\\",
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (
  requestData?: RawResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<RawResponseTestResponse>(
    prepare(rawResponseTestRequestConfig, requestData),
    ...args,
  )
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/headers_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/headers_test\\",
  method: Method.GET,
  requestHeaders: {\\"Authorization\\":\\"dddddd\\",\\"Cookie\\":\\"x=1\\"},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"headersTest\\",
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (
  requestData?: HeadersTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HeadersTestResponse>(
    prepare(headersTestRequestConfig, requestData),
    ...args,
  )
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number;
  /**
   * 格式
   */
  format: string;
  /**
   * ID
   */
  id: number;
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/user/:id/avatar_test\\",
  undefined,
  'id',
  'size' | 'format',
  false
>>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/user/:id/avatar_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\"],
  queryNames: [\\"size\\",\\"format\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"avatarTest\\",
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (
  requestData: AvatarTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<AvatarTestResponse>(
    prepare(avatarTestRequestConfig, requestData),
    ...args,
  )
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number;
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string;
    };
  };
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/dataKey/deep_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/dataKey/deep_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deepTest\\",
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (
  requestData?: DeepTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeepTestResponse>(
    prepare(deepTestRequestConfig, requestData),
    ...args,
  )
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string;
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectA__/get/only_post_form_data_test\\",
  undefined,
  string,
  'query_id',
  false
>>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__projectA__/get/only_post_form_data_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"query_id\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"onlyPostFormDataTest\\",
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectA__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (
  requestData: OnlyPostFormDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<OnlyPostFormDataTestResponse>(
    prepare(onlyPostFormDataTestRequestConfig, requestData),
    ...args,
  )
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig",
  "const mockUrl_0_1_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_1_0_0 = \\"\\" as any
const prodUrl_0_1_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_1_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__projectB__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__projectB__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__projectB__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__projectB__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/deleteMethod_test\\",
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deleteMethodTest\\",
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__projectB__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (
  requestData: DeleteMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeleteMethodTestResponse>(
    prepare(deleteMethodTestRequestConfig, requestData),
    ...args,
  )
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/getMethod_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"getMethodTest\\",
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (
  requestData: GetMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<GetMethodTestResponse>(
    prepare(getMethodTestRequestConfig, requestData),
    ...args,
  )
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/json5Response_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5ResponseTest\\",
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (
  requestData?: Json5ResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5ResponseTestResponse>(
    prepare(json5ResponseTestRequestConfig, requestData),
    ...args,
  )
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/json5Request_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5RequestTest\\",
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (
  requestData: Json5RequestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5RequestTestResponse>(
    prepare(json5RequestTestRequestConfig, requestData),
    ...args,
  )
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/postMethod_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"postMethodTest\\",
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (
  requestData: PostMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PostMethodTestResponse>(
    prepare(postMethodTestRequestConfig, requestData),
    ...args,
  )
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectB__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectB__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectB__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectB__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/putMethod_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"putMethodTest\\",
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectB__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (
  requestData: PutMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PutMethodTestResponse>(
    prepare(putMethodTestRequestConfig, requestData),
    ...args,
  )
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectB__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectB__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectB__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectB__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/dataKeyExample_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"dataKeyExampleTest\\",
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__projectB__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (
  requestData: DataKeyExampleTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DataKeyExampleTestResponse>(
    prepare(dataKeyExampleTestRequestConfig, requestData),
    ...args,
  )
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/upload_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"uploadTest\\",
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (
  requestData: UploadTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<UploadTestResponse>(
    prepare(uploadTestRequestConfig, requestData),
    ...args,
  )
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/noResponseData_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"noResponseDataTest\\",
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (
  requestData?: NoResponseDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<NoResponseDataTestResponse>(
    prepare(noResponseDataTestRequestConfig, requestData),
    ...args,
  )
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/emptyResponse_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"emptyResponseTest\\",
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (
  requestData?: EmptyResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<EmptyResponseTestResponse>(
    prepare(emptyResponseTestRequestConfig, requestData),
    ...args,
  )
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihiTest\\",
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (
  requestData: HihihiTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HihihiTestResponse>(
    prepare(hihihiTestRequestConfig, requestData),
    ...args,
  )
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihi_1608478638207Test\\",
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__projectB__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(
    prepare(hihihi_1608478638207TestRequestConfig, requestData),
    ...args,
  )
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/rawResponse_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"rawResponseTest\\",
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (
  requestData?: RawResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<RawResponseTestResponse>(
    prepare(rawResponseTestRequestConfig, requestData),
    ...args,
  )
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/headers_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/headers_test\\",
  method: Method.GET,
  requestHeaders: {\\"Authorization\\":\\"dddddd\\",\\"Cookie\\":\\"x=1\\"},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"headersTest\\",
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (
  requestData?: HeadersTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HeadersTestResponse>(
    prepare(headersTestRequestConfig, requestData),
    ...args,
  )
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number;
  /**
   * 格式
   */
  format: string;
  /**
   * ID
   */
  id: number;
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/user/:id/avatar_test\\",
  undefined,
  'id',
  'size' | 'format',
  false
>>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/user/:id/avatar_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [\\"id\\"],
  queryNames: [\\"size\\",\\"format\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"avatarTest\\",
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (
  requestData: AvatarTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<AvatarTestResponse>(
    prepare(avatarTestRequestConfig, requestData),
    ...args,
  )
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number;
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string;
    };
  };
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/dataKey/deep_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/dataKey/deep_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deepTest\\",
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (
  requestData?: DeepTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeepTestResponse>(
    prepare(deepTestRequestConfig, requestData),
    ...args,
  )
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string;
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__projectB__/get/only_post_form_data_test\\",
  undefined,
  string,
  'query_id',
  false
>>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_1_0_0,
  devUrl: devUrl_0_1_0_0,
  prodUrl: prodUrl_0_1_0_0,
  path: \\"/__projectB__/get/only_post_form_data_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_1_0_0,
  paramNames: [],
  queryNames: [\\"query_id\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"onlyPostFormDataTest\\",
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__projectB__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (
  requestData: OnlyPostFormDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<OnlyPostFormDataTestResponse>(
    prepare(onlyPostFormDataTestRequestConfig, requestData),
    ...args,
  )
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig",
]
`;

exports[`Generator 支持项目设置里的接口基本路径: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

type UserRequestRestArgs = RequestFunctionRestArgs<typeof request>

// Request: 目前 React Hooks 功能有用到
export type Request<
  TRequestData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /i-am-basepath/__with-basepath__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /i-am-basepath/__with-basepath__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /i-am-basepath/__with-basepath__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /i-am-basepath/__with-basepath__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/deleteMethod_test',
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deleteMethodTest',
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /i-am-basepath/__with-basepath__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (requestData: DeleteMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeleteMethodTestResponse>(prepare(deleteMethodTestRequestConfig, requestData), ...args)
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/getMethod_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'getMethodTest',
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (requestData: GetMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<GetMethodTestResponse>(prepare(getMethodTestRequestConfig, requestData), ...args)
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/json5Response_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5ResponseTest',
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (requestData?: Json5ResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5ResponseTestResponse>(prepare(json5ResponseTestRequestConfig, requestData), ...args)
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/json5Request_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5RequestTest',
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (requestData: Json5RequestTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5RequestTestResponse>(prepare(json5RequestTestRequestConfig, requestData), ...args)
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/postMethod_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'postMethodTest',
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (requestData: PostMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PostMethodTestResponse>(prepare(postMethodTestRequestConfig, requestData), ...args)
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/putMethod_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'putMethodTest',
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (requestData: PutMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PutMethodTestResponse>(prepare(putMethodTestRequestConfig, requestData), ...args)
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/dataKeyExample_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'dataKeyExampleTest',
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (requestData: DataKeyExampleTestRequest, ...args: UserRequestRestArgs) => {
  return request<DataKeyExampleTestResponse>(prepare(dataKeyExampleTestRequestConfig, requestData), ...args)
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/upload_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'uploadTest',
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (requestData: UploadTestRequest, ...args: UserRequestRestArgs) => {
  return request<UploadTestResponse>(prepare(uploadTestRequestConfig, requestData), ...args)
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/noResponseData_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'noResponseDataTest',
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (requestData?: NoResponseDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<NoResponseDataTestResponse>(prepare(noResponseDataTestRequestConfig, requestData), ...args)
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/emptyResponse_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'emptyResponseTest',
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (requestData?: EmptyResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<EmptyResponseTestResponse>(prepare(emptyResponseTestRequestConfig, requestData), ...args)
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihiTest',
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (requestData: HihihiTestRequest, ...args: UserRequestRestArgs) => {
  return request<HihihiTestResponse>(prepare(hihihiTestRequestConfig, requestData), ...args)
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihi_1608478638207Test',
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(prepare(hihihi_1608478638207TestRequestConfig, requestData), ...args)
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/rawResponse_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'rawResponseTest',
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (requestData?: RawResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<RawResponseTestResponse>(prepare(rawResponseTestRequestConfig, requestData), ...args)
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/headers_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/headers_test',
  method: Method.GET,
  requestHeaders: {Authorization: 'dddddd', Cookie: 'x=1'},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'headersTest',
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (requestData?: HeadersTestRequest, ...args: UserRequestRestArgs) => {
  return request<HeadersTestResponse>(prepare(headersTestRequestConfig, requestData), ...args)
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number
  /**
   * 格式
   */
  format: string
  /**
   * ID
   */
  id: number
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/user/:id/avatar_test',
    undefined,
    'id',
    'size' | 'format',
    false
  >
>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/user/:id/avatar_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id'],
  queryNames: ['size', 'format'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'avatarTest',
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (requestData: AvatarTestRequest, ...args: UserRequestRestArgs) => {
  return request<AvatarTestResponse>(prepare(avatarTestRequestConfig, requestData), ...args)
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string
    }
  }
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/dataKey/deep_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/dataKey/deep_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deepTest',
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (requestData?: DeepTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeepTestResponse>(prepare(deepTestRequestConfig, requestData), ...args)
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/i-am-basepath/__with-basepath__/get/only_post_form_data_test',
    undefined,
    string,
    'query_id',
    false
  >
>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/i-am-basepath/__with-basepath__/get/only_post_form_data_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['query_id'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'onlyPostFormDataTest',
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (requestData: OnlyPostFormDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<OnlyPostFormDataTestResponse>(prepare(onlyPostFormDataTestRequestConfig, requestData), ...args)
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig

/* prettier-ignore-end */
"
`;

exports[`Generator 支持项目设置里的接口基本路径: 请求文件 1`] = `
"import { RequestFunctionParams } from 'yapi-to-typescript'

export interface RequestOptions {
  /**
   * 使用的服务器。
   *
   * - \`prod\`: 生产服务器
   * - \`dev\`: 测试服务器
   * - \`mock\`: 模拟服务器
   *
   * @default prod
   */
  server?: 'prod' | 'dev' | 'mock',
}

export default function request<TResponseData>(
  payload: RequestFunctionParams,
  options: RequestOptions = {
    server: 'prod',
  },
): Promise<TResponseData> {
  return new Promise<TResponseData>((resolve, reject) => {
    // 基本地址
    const baseUrl = options.server === 'mock'
      ? payload.mockUrl
      : options.server === 'dev'
        ? payload.devUrl
        : payload.prodUrl

    // 请求地址
    const url = \`\${baseUrl}\${payload.path}\`

    // 具体请求逻辑
  })
}"
`;

exports[`Generator 支持项目设置里的接口基本路径: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /i-am-basepath/__with-basepath__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /i-am-basepath/__with-basepath__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /i-am-basepath/__with-basepath__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /i-am-basepath/__with-basepath__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/deleteMethod_test\\",
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deleteMethodTest\\",
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /i-am-basepath/__with-basepath__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (
  requestData: DeleteMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeleteMethodTestResponse>(
    prepare(deleteMethodTestRequestConfig, requestData),
    ...args,
  )
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/getMethod_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"getMethodTest\\",
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (
  requestData: GetMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<GetMethodTestResponse>(
    prepare(getMethodTestRequestConfig, requestData),
    ...args,
  )
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/json5Response_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5ResponseTest\\",
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (
  requestData?: Json5ResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5ResponseTestResponse>(
    prepare(json5ResponseTestRequestConfig, requestData),
    ...args,
  )
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/json5Request_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5RequestTest\\",
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (
  requestData: Json5RequestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5RequestTestResponse>(
    prepare(json5RequestTestRequestConfig, requestData),
    ...args,
  )
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/postMethod_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"postMethodTest\\",
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (
  requestData: PostMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PostMethodTestResponse>(
    prepare(postMethodTestRequestConfig, requestData),
    ...args,
  )
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/putMethod_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"putMethodTest\\",
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (
  requestData: PutMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PutMethodTestResponse>(
    prepare(putMethodTestRequestConfig, requestData),
    ...args,
  )
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/dataKeyExample_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"dataKeyExampleTest\\",
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /i-am-basepath/__with-basepath__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (
  requestData: DataKeyExampleTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DataKeyExampleTestResponse>(
    prepare(dataKeyExampleTestRequestConfig, requestData),
    ...args,
  )
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/upload_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"uploadTest\\",
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (
  requestData: UploadTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<UploadTestResponse>(
    prepare(uploadTestRequestConfig, requestData),
    ...args,
  )
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/noResponseData_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"noResponseDataTest\\",
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (
  requestData?: NoResponseDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<NoResponseDataTestResponse>(
    prepare(noResponseDataTestRequestConfig, requestData),
    ...args,
  )
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/emptyResponse_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"emptyResponseTest\\",
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (
  requestData?: EmptyResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<EmptyResponseTestResponse>(
    prepare(emptyResponseTestRequestConfig, requestData),
    ...args,
  )
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihiTest\\",
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (
  requestData: HihihiTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HihihiTestResponse>(
    prepare(hihihiTestRequestConfig, requestData),
    ...args,
  )
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihi_1608478638207Test\\",
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /i-am-basepath/__with-basepath__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(
    prepare(hihihi_1608478638207TestRequestConfig, requestData),
    ...args,
  )
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/rawResponse_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"rawResponseTest\\",
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (
  requestData?: RawResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<RawResponseTestResponse>(
    prepare(rawResponseTestRequestConfig, requestData),
    ...args,
  )
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/headers_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/headers_test\\",
  method: Method.GET,
  requestHeaders: {\\"Authorization\\":\\"dddddd\\",\\"Cookie\\":\\"x=1\\"},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"headersTest\\",
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (
  requestData?: HeadersTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HeadersTestResponse>(
    prepare(headersTestRequestConfig, requestData),
    ...args,
  )
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number;
  /**
   * 格式
   */
  format: string;
  /**
   * ID
   */
  id: number;
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/user/:id/avatar_test\\",
  undefined,
  'id',
  'size' | 'format',
  false
>>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/user/:id/avatar_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\"],
  queryNames: [\\"size\\",\\"format\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"avatarTest\\",
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (
  requestData: AvatarTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<AvatarTestResponse>(
    prepare(avatarTestRequestConfig, requestData),
    ...args,
  )
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number;
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string;
    };
  };
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/dataKey/deep_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/dataKey/deep_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deepTest\\",
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (
  requestData?: DeepTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeepTestResponse>(
    prepare(deepTestRequestConfig, requestData),
    ...args,
  )
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string;
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/i-am-basepath/__with-basepath__/get/only_post_form_data_test\\",
  undefined,
  string,
  'query_id',
  false
>>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/i-am-basepath/__with-basepath__/get/only_post_form_data_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"query_id\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"onlyPostFormDataTest\\",
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /i-am-basepath/__with-basepath__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (
  requestData: OnlyPostFormDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<OnlyPostFormDataTestResponse>(
    prepare(onlyPostFormDataTestRequestConfig, requestData),
    ...args,
  )
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig",
]
`;

exports[`Generator 无分类注释: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

type UserRequestRestArgs = RequestFunctionRestArgs<typeof request>

// Request: 目前 React Hooks 功能有用到
export type Request<
  TRequestData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/deleteMethod_test',
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deleteMethodTest',
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (requestData: DeleteMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeleteMethodTestResponse>(prepare(deleteMethodTestRequestConfig, requestData), ...args)
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/getMethod_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'getMethodTest',
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (requestData: GetMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<GetMethodTestResponse>(prepare(getMethodTestRequestConfig, requestData), ...args)
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Response_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5ResponseTest',
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (requestData?: Json5ResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5ResponseTestResponse>(prepare(json5ResponseTestRequestConfig, requestData), ...args)
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Request_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5RequestTest',
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (requestData: Json5RequestTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5RequestTestResponse>(prepare(json5RequestTestRequestConfig, requestData), ...args)
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/postMethod_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'postMethodTest',
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (requestData: PostMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PostMethodTestResponse>(prepare(postMethodTestRequestConfig, requestData), ...args)
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/putMethod_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'putMethodTest',
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (requestData: PutMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PutMethodTestResponse>(prepare(putMethodTestRequestConfig, requestData), ...args)
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKeyExample_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'dataKeyExampleTest',
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (requestData: DataKeyExampleTestRequest, ...args: UserRequestRestArgs) => {
  return request<DataKeyExampleTestResponse>(prepare(dataKeyExampleTestRequestConfig, requestData), ...args)
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/upload_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'uploadTest',
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (requestData: UploadTestRequest, ...args: UserRequestRestArgs) => {
  return request<UploadTestResponse>(prepare(uploadTestRequestConfig, requestData), ...args)
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/noResponseData_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'noResponseDataTest',
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (requestData?: NoResponseDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<NoResponseDataTestResponse>(prepare(noResponseDataTestRequestConfig, requestData), ...args)
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/emptyResponse_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'emptyResponseTest',
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (requestData?: EmptyResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<EmptyResponseTestResponse>(prepare(emptyResponseTestRequestConfig, requestData), ...args)
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihiTest',
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (requestData: HihihiTestRequest, ...args: UserRequestRestArgs) => {
  return request<HihihiTestResponse>(prepare(hihihiTestRequestConfig, requestData), ...args)
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihi_1608478638207Test',
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(prepare(hihihi_1608478638207TestRequestConfig, requestData), ...args)
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/rawResponse_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'rawResponseTest',
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (requestData?: RawResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<RawResponseTestResponse>(prepare(rawResponseTestRequestConfig, requestData), ...args)
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/headers_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/headers_test',
  method: Method.GET,
  requestHeaders: {Authorization: 'dddddd', Cookie: 'x=1'},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'headersTest',
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (requestData?: HeadersTestRequest, ...args: UserRequestRestArgs) => {
  return request<HeadersTestResponse>(prepare(headersTestRequestConfig, requestData), ...args)
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number
  /**
   * 格式
   */
  format: string
  /**
   * ID
   */
  id: number
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/user/:id/avatar_test',
    undefined,
    'id',
    'size' | 'format',
    false
  >
>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/user/:id/avatar_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id'],
  queryNames: ['size', 'format'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'avatarTest',
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (requestData: AvatarTestRequest, ...args: UserRequestRestArgs) => {
  return request<AvatarTestResponse>(prepare(avatarTestRequestConfig, requestData), ...args)
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string
    }
  }
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKey/deep_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKey/deep_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deepTest',
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (requestData?: DeepTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeepTestResponse>(prepare(deepTestRequestConfig, requestData), ...args)
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/get/only_post_form_data_test',
    undefined,
    string,
    'query_id',
    false
  >
>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/get/only_post_form_data_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['query_id'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'onlyPostFormDataTest',
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (requestData: OnlyPostFormDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<OnlyPostFormDataTestResponse>(prepare(onlyPostFormDataTestRequestConfig, requestData), ...args)
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig

/* prettier-ignore-end */
"
`;

exports[`Generator 无分类注释: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deleteMethodTest\\",
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (
  requestData: DeleteMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeleteMethodTestResponse>(
    prepare(deleteMethodTestRequestConfig, requestData),
    ...args,
  )
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/getMethod_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"getMethodTest\\",
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (
  requestData: GetMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<GetMethodTestResponse>(
    prepare(getMethodTestRequestConfig, requestData),
    ...args,
  )
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Response_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5ResponseTest\\",
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (
  requestData?: Json5ResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5ResponseTestResponse>(
    prepare(json5ResponseTestRequestConfig, requestData),
    ...args,
  )
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Request_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5RequestTest\\",
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (
  requestData: Json5RequestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5RequestTestResponse>(
    prepare(json5RequestTestRequestConfig, requestData),
    ...args,
  )
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/postMethod_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"postMethodTest\\",
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (
  requestData: PostMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PostMethodTestResponse>(
    prepare(postMethodTestRequestConfig, requestData),
    ...args,
  )
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/putMethod_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"putMethodTest\\",
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (
  requestData: PutMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PutMethodTestResponse>(
    prepare(putMethodTestRequestConfig, requestData),
    ...args,
  )
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"dataKeyExampleTest\\",
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (
  requestData: DataKeyExampleTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DataKeyExampleTestResponse>(
    prepare(dataKeyExampleTestRequestConfig, requestData),
    ...args,
  )
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/upload_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"uploadTest\\",
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (
  requestData: UploadTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<UploadTestResponse>(
    prepare(uploadTestRequestConfig, requestData),
    ...args,
  )
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/noResponseData_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"noResponseDataTest\\",
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (
  requestData?: NoResponseDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<NoResponseDataTestResponse>(
    prepare(noResponseDataTestRequestConfig, requestData),
    ...args,
  )
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/emptyResponse_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"emptyResponseTest\\",
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (
  requestData?: EmptyResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<EmptyResponseTestResponse>(
    prepare(emptyResponseTestRequestConfig, requestData),
    ...args,
  )
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihiTest\\",
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (
  requestData: HihihiTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HihihiTestResponse>(
    prepare(hihihiTestRequestConfig, requestData),
    ...args,
  )
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihi_1608478638207Test\\",
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(
    prepare(hihihi_1608478638207TestRequestConfig, requestData),
    ...args,
  )
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/rawResponse_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"rawResponseTest\\",
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (
  requestData?: RawResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<RawResponseTestResponse>(
    prepare(rawResponseTestRequestConfig, requestData),
    ...args,
  )
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/headers_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/headers_test\\",
  method: Method.GET,
  requestHeaders: {\\"Authorization\\":\\"dddddd\\",\\"Cookie\\":\\"x=1\\"},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"headersTest\\",
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (
  requestData?: HeadersTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HeadersTestResponse>(
    prepare(headersTestRequestConfig, requestData),
    ...args,
  )
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number;
  /**
   * 格式
   */
  format: string;
  /**
   * ID
   */
  id: number;
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/user/:id/avatar_test\\",
  undefined,
  'id',
  'size' | 'format',
  false
>>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/user/:id/avatar_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\"],
  queryNames: [\\"size\\",\\"format\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"avatarTest\\",
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (
  requestData: AvatarTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<AvatarTestResponse>(
    prepare(avatarTestRequestConfig, requestData),
    ...args,
  )
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number;
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string;
    };
  };
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKey/deep_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKey/deep_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deepTest\\",
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (
  requestData?: DeepTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeepTestResponse>(
    prepare(deepTestRequestConfig, requestData),
    ...args,
  )
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string;
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get/only_post_form_data_test\\",
  undefined,
  string,
  'query_id',
  false
>>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/get/only_post_form_data_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"query_id\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"onlyPostFormDataTest\\",
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (
  requestData: OnlyPostFormDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<OnlyPostFormDataTestResponse>(
    prepare(onlyPostFormDataTestRequestConfig, requestData),
    ...args,
  )
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig",
]
`;

exports[`Generator 无更新时间注释: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

type UserRequestRestArgs = RequestFunctionRestArgs<typeof request>

// Request: 目前 React Hooks 功能有用到
export type Request<
  TRequestData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/deleteMethod_test',
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deleteMethodTest',
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 */
export const deleteMethodTest = (requestData: DeleteMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeleteMethodTestResponse>(prepare(deleteMethodTestRequestConfig, requestData), ...args)
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/getMethod_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'getMethodTest',
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 */
export const getMethodTest = (requestData: GetMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<GetMethodTestResponse>(prepare(getMethodTestRequestConfig, requestData), ...args)
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Response_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5ResponseTest',
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 */
export const json5ResponseTest = (requestData?: Json5ResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5ResponseTestResponse>(prepare(json5ResponseTestRequestConfig, requestData), ...args)
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Request_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5RequestTest',
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 */
export const json5RequestTest = (requestData: Json5RequestTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5RequestTestResponse>(prepare(json5RequestTestRequestConfig, requestData), ...args)
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/postMethod_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'postMethodTest',
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 */
export const postMethodTest = (requestData: PostMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PostMethodTestResponse>(prepare(postMethodTestRequestConfig, requestData), ...args)
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/putMethod_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'putMethodTest',
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 */
export const putMethodTest = (requestData: PutMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PutMethodTestResponse>(prepare(putMethodTestRequestConfig, requestData), ...args)
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKeyExample_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'dataKeyExampleTest',
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 */
export const dataKeyExampleTest = (requestData: DataKeyExampleTestRequest, ...args: UserRequestRestArgs) => {
  return request<DataKeyExampleTestResponse>(prepare(dataKeyExampleTestRequestConfig, requestData), ...args)
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/upload_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'uploadTest',
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 */
export const uploadTest = (requestData: UploadTestRequest, ...args: UserRequestRestArgs) => {
  return request<UploadTestResponse>(prepare(uploadTestRequestConfig, requestData), ...args)
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/noResponseData_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'noResponseDataTest',
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 */
export const noResponseDataTest = (requestData?: NoResponseDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<NoResponseDataTestResponse>(prepare(noResponseDataTestRequestConfig, requestData), ...args)
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/emptyResponse_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'emptyResponseTest',
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 */
export const emptyResponseTest = (requestData?: EmptyResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<EmptyResponseTestResponse>(prepare(emptyResponseTestRequestConfig, requestData), ...args)
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihiTest',
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 */
export const hihihiTest = (requestData: HihihiTestRequest, ...args: UserRequestRestArgs) => {
  return request<HihihiTestResponse>(prepare(hihihiTestRequestConfig, requestData), ...args)
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihi_1608478638207Test',
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(prepare(hihihi_1608478638207TestRequestConfig, requestData), ...args)
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/rawResponse_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'rawResponseTest',
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 */
export const rawResponseTest = (requestData?: RawResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<RawResponseTestResponse>(prepare(rawResponseTestRequestConfig, requestData), ...args)
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 */
type HeadersTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/headers_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/headers_test',
  method: Method.GET,
  requestHeaders: {Authorization: 'dddddd', Cookie: 'x=1'},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'headersTest',
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 */
export const headersTest = (requestData?: HeadersTestRequest, ...args: UserRequestRestArgs) => {
  return request<HeadersTestResponse>(prepare(headersTestRequestConfig, requestData), ...args)
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number
  /**
   * 格式
   */
  format: string
  /**
   * ID
   */
  id: number
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 */
type AvatarTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/user/:id/avatar_test',
    undefined,
    'id',
    'size' | 'format',
    false
  >
>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/user/:id/avatar_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id'],
  queryNames: ['size', 'format'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'avatarTest',
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 */
export const avatarTest = (requestData: AvatarTestRequest, ...args: UserRequestRestArgs) => {
  return request<AvatarTestResponse>(prepare(avatarTestRequestConfig, requestData), ...args)
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 */
export interface DeepTestResponse {
  err: number
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string
    }
  }
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 */
type DeepTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKey/deep_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKey/deep_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deepTest',
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 */
export const deepTest = (requestData?: DeepTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeepTestResponse>(prepare(deepTestRequestConfig, requestData), ...args)
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 */
type OnlyPostFormDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/get/only_post_form_data_test',
    undefined,
    string,
    'query_id',
    false
  >
>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/get/only_post_form_data_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['query_id'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'onlyPostFormDataTest',
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 */
export const onlyPostFormDataTest = (requestData: OnlyPostFormDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<OnlyPostFormDataTestResponse>(prepare(onlyPostFormDataTestRequestConfig, requestData), ...args)
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig

/* prettier-ignore-end */
"
`;

exports[`Generator 无更新时间注释: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deleteMethodTest\\",
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 */
export const deleteMethodTest = (
  requestData: DeleteMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeleteMethodTestResponse>(
    prepare(deleteMethodTestRequestConfig, requestData),
    ...args,
  )
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/getMethod_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"getMethodTest\\",
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 */
export const getMethodTest = (
  requestData: GetMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<GetMethodTestResponse>(
    prepare(getMethodTestRequestConfig, requestData),
    ...args,
  )
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Response_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5ResponseTest\\",
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 */
export const json5ResponseTest = (
  requestData?: Json5ResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5ResponseTestResponse>(
    prepare(json5ResponseTestRequestConfig, requestData),
    ...args,
  )
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Request_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5RequestTest\\",
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 */
export const json5RequestTest = (
  requestData: Json5RequestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5RequestTestResponse>(
    prepare(json5RequestTestRequestConfig, requestData),
    ...args,
  )
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/postMethod_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"postMethodTest\\",
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 */
export const postMethodTest = (
  requestData: PostMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PostMethodTestResponse>(
    prepare(postMethodTestRequestConfig, requestData),
    ...args,
  )
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/putMethod_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"putMethodTest\\",
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 */
export const putMethodTest = (
  requestData: PutMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PutMethodTestResponse>(
    prepare(putMethodTestRequestConfig, requestData),
    ...args,
  )
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"dataKeyExampleTest\\",
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 */
export const dataKeyExampleTest = (
  requestData: DataKeyExampleTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DataKeyExampleTestResponse>(
    prepare(dataKeyExampleTestRequestConfig, requestData),
    ...args,
  )
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/upload_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"uploadTest\\",
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 */
export const uploadTest = (
  requestData: UploadTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<UploadTestResponse>(
    prepare(uploadTestRequestConfig, requestData),
    ...args,
  )
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/noResponseData_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"noResponseDataTest\\",
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 */
export const noResponseDataTest = (
  requestData?: NoResponseDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<NoResponseDataTestResponse>(
    prepare(noResponseDataTestRequestConfig, requestData),
    ...args,
  )
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/emptyResponse_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"emptyResponseTest\\",
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 */
export const emptyResponseTest = (
  requestData?: EmptyResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<EmptyResponseTestResponse>(
    prepare(emptyResponseTestRequestConfig, requestData),
    ...args,
  )
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihiTest\\",
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 */
export const hihihiTest = (
  requestData: HihihiTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HihihiTestResponse>(
    prepare(hihihiTestRequestConfig, requestData),
    ...args,
  )
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihi_1608478638207Test\\",
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(
    prepare(hihihi_1608478638207TestRequestConfig, requestData),
    ...args,
  )
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/rawResponse_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"rawResponseTest\\",
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 */
export const rawResponseTest = (
  requestData?: RawResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<RawResponseTestResponse>(
    prepare(rawResponseTestRequestConfig, requestData),
    ...args,
  )
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 */
type HeadersTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/headers_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/headers_test\\",
  method: Method.GET,
  requestHeaders: {\\"Authorization\\":\\"dddddd\\",\\"Cookie\\":\\"x=1\\"},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"headersTest\\",
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 */
export const headersTest = (
  requestData?: HeadersTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HeadersTestResponse>(
    prepare(headersTestRequestConfig, requestData),
    ...args,
  )
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number;
  /**
   * 格式
   */
  format: string;
  /**
   * ID
   */
  id: number;
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 */
type AvatarTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/user/:id/avatar_test\\",
  undefined,
  'id',
  'size' | 'format',
  false
>>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/user/:id/avatar_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\"],
  queryNames: [\\"size\\",\\"format\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"avatarTest\\",
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 */
export const avatarTest = (
  requestData: AvatarTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<AvatarTestResponse>(
    prepare(avatarTestRequestConfig, requestData),
    ...args,
  )
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 */
export interface DeepTestResponse {
  err: number;
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string;
    };
  };
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 */
type DeepTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKey/deep_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKey/deep_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deepTest\\",
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 */
export const deepTest = (
  requestData?: DeepTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeepTestResponse>(
    prepare(deepTestRequestConfig, requestData),
    ...args,
  )
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string;
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 */
type OnlyPostFormDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get/only_post_form_data_test\\",
  undefined,
  string,
  'query_id',
  false
>>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/get/only_post_form_data_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"query_id\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"onlyPostFormDataTest\\",
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 */
export const onlyPostFormDataTest = (
  requestData: OnlyPostFormDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<OnlyPostFormDataTestResponse>(
    prepare(onlyPostFormDataTestRequestConfig, requestData),
    ...args,
  )
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig",
]
`;

exports[`Generator 无标签注释: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

type UserRequestRestArgs = RequestFunctionRestArgs<typeof request>

// Request: 目前 React Hooks 功能有用到
export type Request<
  TRequestData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/deleteMethod_test',
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deleteMethodTest',
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (requestData: DeleteMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeleteMethodTestResponse>(prepare(deleteMethodTestRequestConfig, requestData), ...args)
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/getMethod_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'getMethodTest',
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (requestData: GetMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<GetMethodTestResponse>(prepare(getMethodTestRequestConfig, requestData), ...args)
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Response_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5ResponseTest',
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (requestData?: Json5ResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5ResponseTestResponse>(prepare(json5ResponseTestRequestConfig, requestData), ...args)
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Request_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5RequestTest',
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (requestData: Json5RequestTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5RequestTestResponse>(prepare(json5RequestTestRequestConfig, requestData), ...args)
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/postMethod_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'postMethodTest',
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (requestData: PostMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PostMethodTestResponse>(prepare(postMethodTestRequestConfig, requestData), ...args)
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/putMethod_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'putMethodTest',
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (requestData: PutMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PutMethodTestResponse>(prepare(putMethodTestRequestConfig, requestData), ...args)
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKeyExample_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'dataKeyExampleTest',
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (requestData: DataKeyExampleTestRequest, ...args: UserRequestRestArgs) => {
  return request<DataKeyExampleTestResponse>(prepare(dataKeyExampleTestRequestConfig, requestData), ...args)
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/upload_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'uploadTest',
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (requestData: UploadTestRequest, ...args: UserRequestRestArgs) => {
  return request<UploadTestResponse>(prepare(uploadTestRequestConfig, requestData), ...args)
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/noResponseData_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'noResponseDataTest',
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (requestData?: NoResponseDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<NoResponseDataTestResponse>(prepare(noResponseDataTestRequestConfig, requestData), ...args)
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/emptyResponse_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'emptyResponseTest',
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (requestData?: EmptyResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<EmptyResponseTestResponse>(prepare(emptyResponseTestRequestConfig, requestData), ...args)
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihiTest',
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (requestData: HihihiTestRequest, ...args: UserRequestRestArgs) => {
  return request<HihihiTestResponse>(prepare(hihihiTestRequestConfig, requestData), ...args)
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihi_1608478638207Test',
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(prepare(hihihi_1608478638207TestRequestConfig, requestData), ...args)
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/rawResponse_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'rawResponseTest',
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (requestData?: RawResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<RawResponseTestResponse>(prepare(rawResponseTestRequestConfig, requestData), ...args)
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/headers_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/headers_test',
  method: Method.GET,
  requestHeaders: {Authorization: 'dddddd', Cookie: 'x=1'},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'headersTest',
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (requestData?: HeadersTestRequest, ...args: UserRequestRestArgs) => {
  return request<HeadersTestResponse>(prepare(headersTestRequestConfig, requestData), ...args)
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number
  /**
   * 格式
   */
  format: string
  /**
   * ID
   */
  id: number
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/user/:id/avatar_test',
    undefined,
    'id',
    'size' | 'format',
    false
  >
>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/user/:id/avatar_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id'],
  queryNames: ['size', 'format'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'avatarTest',
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (requestData: AvatarTestRequest, ...args: UserRequestRestArgs) => {
  return request<AvatarTestResponse>(prepare(avatarTestRequestConfig, requestData), ...args)
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string
    }
  }
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKey/deep_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKey/deep_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deepTest',
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (requestData?: DeepTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeepTestResponse>(prepare(deepTestRequestConfig, requestData), ...args)
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/get/only_post_form_data_test',
    undefined,
    string,
    'query_id',
    false
  >
>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/get/only_post_form_data_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['query_id'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'onlyPostFormDataTest',
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (requestData: OnlyPostFormDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<OnlyPostFormDataTestResponse>(prepare(onlyPostFormDataTestRequestConfig, requestData), ...args)
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig

/* prettier-ignore-end */
"
`;

exports[`Generator 无标签注释: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deleteMethodTest\\",
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (
  requestData: DeleteMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeleteMethodTestResponse>(
    prepare(deleteMethodTestRequestConfig, requestData),
    ...args,
  )
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/getMethod_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"getMethodTest\\",
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (
  requestData: GetMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<GetMethodTestResponse>(
    prepare(getMethodTestRequestConfig, requestData),
    ...args,
  )
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Response_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5ResponseTest\\",
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (
  requestData?: Json5ResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5ResponseTestResponse>(
    prepare(json5ResponseTestRequestConfig, requestData),
    ...args,
  )
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Request_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5RequestTest\\",
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (
  requestData: Json5RequestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5RequestTestResponse>(
    prepare(json5RequestTestRequestConfig, requestData),
    ...args,
  )
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/postMethod_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"postMethodTest\\",
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (
  requestData: PostMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PostMethodTestResponse>(
    prepare(postMethodTestRequestConfig, requestData),
    ...args,
  )
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/putMethod_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"putMethodTest\\",
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (
  requestData: PutMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PutMethodTestResponse>(
    prepare(putMethodTestRequestConfig, requestData),
    ...args,
  )
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"dataKeyExampleTest\\",
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (
  requestData: DataKeyExampleTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DataKeyExampleTestResponse>(
    prepare(dataKeyExampleTestRequestConfig, requestData),
    ...args,
  )
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/upload_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"uploadTest\\",
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (
  requestData: UploadTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<UploadTestResponse>(
    prepare(uploadTestRequestConfig, requestData),
    ...args,
  )
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/noResponseData_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"noResponseDataTest\\",
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (
  requestData?: NoResponseDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<NoResponseDataTestResponse>(
    prepare(noResponseDataTestRequestConfig, requestData),
    ...args,
  )
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/emptyResponse_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"emptyResponseTest\\",
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (
  requestData?: EmptyResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<EmptyResponseTestResponse>(
    prepare(emptyResponseTestRequestConfig, requestData),
    ...args,
  )
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihiTest\\",
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (
  requestData: HihihiTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HihihiTestResponse>(
    prepare(hihihiTestRequestConfig, requestData),
    ...args,
  )
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihi_1608478638207Test\\",
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(
    prepare(hihihi_1608478638207TestRequestConfig, requestData),
    ...args,
  )
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/rawResponse_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"rawResponseTest\\",
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (
  requestData?: RawResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<RawResponseTestResponse>(
    prepare(rawResponseTestRequestConfig, requestData),
    ...args,
  )
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/headers_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/headers_test\\",
  method: Method.GET,
  requestHeaders: {\\"Authorization\\":\\"dddddd\\",\\"Cookie\\":\\"x=1\\"},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"headersTest\\",
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (
  requestData?: HeadersTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HeadersTestResponse>(
    prepare(headersTestRequestConfig, requestData),
    ...args,
  )
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number;
  /**
   * 格式
   */
  format: string;
  /**
   * ID
   */
  id: number;
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/user/:id/avatar_test\\",
  undefined,
  'id',
  'size' | 'format',
  false
>>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/user/:id/avatar_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\"],
  queryNames: [\\"size\\",\\"format\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"avatarTest\\",
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (
  requestData: AvatarTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<AvatarTestResponse>(
    prepare(avatarTestRequestConfig, requestData),
    ...args,
  )
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number;
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string;
    };
  };
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKey/deep_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKey/deep_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deepTest\\",
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (
  requestData?: DeepTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeepTestResponse>(
    prepare(deepTestRequestConfig, requestData),
    ...args,
  )
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string;
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get/only_post_form_data_test\\",
  undefined,
  string,
  'query_id',
  false
>>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/get/only_post_form_data_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"query_id\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"onlyPostFormDataTest\\",
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (
  requestData: OnlyPostFormDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<OnlyPostFormDataTestResponse>(
    prepare(onlyPostFormDataTestRequestConfig, requestData),
    ...args,
  )
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig",
]
`;

exports[`Generator 无标题注释: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

type UserRequestRestArgs = RequestFunctionRestArgs<typeof request>

// Request: 目前 React Hooks 功能有用到
export type Request<
  TRequestData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/deleteMethod_test',
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deleteMethodTest',
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (requestData: DeleteMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeleteMethodTestResponse>(prepare(deleteMethodTestRequestConfig, requestData), ...args)
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/getMethod_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'getMethodTest',
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (requestData: GetMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<GetMethodTestResponse>(prepare(getMethodTestRequestConfig, requestData), ...args)
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Response_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5ResponseTest',
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (requestData?: Json5ResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5ResponseTestResponse>(prepare(json5ResponseTestRequestConfig, requestData), ...args)
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Request_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5RequestTest',
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (requestData: Json5RequestTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5RequestTestResponse>(prepare(json5RequestTestRequestConfig, requestData), ...args)
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/postMethod_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'postMethodTest',
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (requestData: PostMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PostMethodTestResponse>(prepare(postMethodTestRequestConfig, requestData), ...args)
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/putMethod_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'putMethodTest',
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (requestData: PutMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PutMethodTestResponse>(prepare(putMethodTestRequestConfig, requestData), ...args)
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKeyExample_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'dataKeyExampleTest',
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (requestData: DataKeyExampleTestRequest, ...args: UserRequestRestArgs) => {
  return request<DataKeyExampleTestResponse>(prepare(dataKeyExampleTestRequestConfig, requestData), ...args)
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/upload_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'uploadTest',
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (requestData: UploadTestRequest, ...args: UserRequestRestArgs) => {
  return request<UploadTestResponse>(prepare(uploadTestRequestConfig, requestData), ...args)
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/noResponseData_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'noResponseDataTest',
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (requestData?: NoResponseDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<NoResponseDataTestResponse>(prepare(noResponseDataTestRequestConfig, requestData), ...args)
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/emptyResponse_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'emptyResponseTest',
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (requestData?: EmptyResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<EmptyResponseTestResponse>(prepare(emptyResponseTestRequestConfig, requestData), ...args)
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihiTest',
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (requestData: HihihiTestRequest, ...args: UserRequestRestArgs) => {
  return request<HihihiTestResponse>(prepare(hihihiTestRequestConfig, requestData), ...args)
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihi_1608478638207Test',
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(prepare(hihihi_1608478638207TestRequestConfig, requestData), ...args)
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/rawResponse_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'rawResponseTest',
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (requestData?: RawResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<RawResponseTestResponse>(prepare(rawResponseTestRequestConfig, requestData), ...args)
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/headers_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/headers_test',
  method: Method.GET,
  requestHeaders: {Authorization: 'dddddd', Cookie: 'x=1'},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'headersTest',
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (requestData?: HeadersTestRequest, ...args: UserRequestRestArgs) => {
  return request<HeadersTestResponse>(prepare(headersTestRequestConfig, requestData), ...args)
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number
  /**
   * 格式
   */
  format: string
  /**
   * ID
   */
  id: number
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/user/:id/avatar_test',
    undefined,
    'id',
    'size' | 'format',
    false
  >
>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/user/:id/avatar_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id'],
  queryNames: ['size', 'format'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'avatarTest',
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (requestData: AvatarTestRequest, ...args: UserRequestRestArgs) => {
  return request<AvatarTestResponse>(prepare(avatarTestRequestConfig, requestData), ...args)
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string
    }
  }
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKey/deep_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKey/deep_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deepTest',
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (requestData?: DeepTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeepTestResponse>(prepare(deepTestRequestConfig, requestData), ...args)
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/get/only_post_form_data_test',
    undefined,
    string,
    'query_id',
    false
  >
>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/get/only_post_form_data_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['query_id'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'onlyPostFormDataTest',
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (requestData: OnlyPostFormDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<OnlyPostFormDataTestResponse>(prepare(onlyPostFormDataTestRequestConfig, requestData), ...args)
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig

/* prettier-ignore-end */
"
`;

exports[`Generator 无标题注释: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deleteMethodTest\\",
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (
  requestData: DeleteMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeleteMethodTestResponse>(
    prepare(deleteMethodTestRequestConfig, requestData),
    ...args,
  )
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/getMethod_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"getMethodTest\\",
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (
  requestData: GetMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<GetMethodTestResponse>(
    prepare(getMethodTestRequestConfig, requestData),
    ...args,
  )
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Response_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5ResponseTest\\",
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (
  requestData?: Json5ResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5ResponseTestResponse>(
    prepare(json5ResponseTestRequestConfig, requestData),
    ...args,
  )
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Request_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5RequestTest\\",
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (
  requestData: Json5RequestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5RequestTestResponse>(
    prepare(json5RequestTestRequestConfig, requestData),
    ...args,
  )
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/postMethod_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"postMethodTest\\",
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (
  requestData: PostMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PostMethodTestResponse>(
    prepare(postMethodTestRequestConfig, requestData),
    ...args,
  )
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/putMethod_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"putMethodTest\\",
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (
  requestData: PutMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PutMethodTestResponse>(
    prepare(putMethodTestRequestConfig, requestData),
    ...args,
  )
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"dataKeyExampleTest\\",
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (
  requestData: DataKeyExampleTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DataKeyExampleTestResponse>(
    prepare(dataKeyExampleTestRequestConfig, requestData),
    ...args,
  )
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/upload_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"uploadTest\\",
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (
  requestData: UploadTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<UploadTestResponse>(
    prepare(uploadTestRequestConfig, requestData),
    ...args,
  )
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/noResponseData_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"noResponseDataTest\\",
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (
  requestData?: NoResponseDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<NoResponseDataTestResponse>(
    prepare(noResponseDataTestRequestConfig, requestData),
    ...args,
  )
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/emptyResponse_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"emptyResponseTest\\",
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (
  requestData?: EmptyResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<EmptyResponseTestResponse>(
    prepare(emptyResponseTestRequestConfig, requestData),
    ...args,
  )
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihiTest\\",
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (
  requestData: HihihiTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HihihiTestResponse>(
    prepare(hihihiTestRequestConfig, requestData),
    ...args,
  )
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihi_1608478638207Test\\",
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(
    prepare(hihihi_1608478638207TestRequestConfig, requestData),
    ...args,
  )
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/rawResponse_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"rawResponseTest\\",
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (
  requestData?: RawResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<RawResponseTestResponse>(
    prepare(rawResponseTestRequestConfig, requestData),
    ...args,
  )
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/headers_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/headers_test\\",
  method: Method.GET,
  requestHeaders: {\\"Authorization\\":\\"dddddd\\",\\"Cookie\\":\\"x=1\\"},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"headersTest\\",
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (
  requestData?: HeadersTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HeadersTestResponse>(
    prepare(headersTestRequestConfig, requestData),
    ...args,
  )
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number;
  /**
   * 格式
   */
  format: string;
  /**
   * ID
   */
  id: number;
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/user/:id/avatar_test\\",
  undefined,
  'id',
  'size' | 'format',
  false
>>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/user/:id/avatar_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\"],
  queryNames: [\\"size\\",\\"format\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"avatarTest\\",
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (
  requestData: AvatarTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<AvatarTestResponse>(
    prepare(avatarTestRequestConfig, requestData),
    ...args,
  )
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number;
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string;
    };
  };
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKey/deep_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKey/deep_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deepTest\\",
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (
  requestData?: DeepTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeepTestResponse>(
    prepare(deepTestRequestConfig, requestData),
    ...args,
  )
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string;
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get/only_post_form_data_test\\",
  undefined,
  string,
  'query_id',
  false
>>

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/get/only_post_form_data_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"query_id\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"onlyPostFormDataTest\\",
}

/**
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (
  requestData: OnlyPostFormDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<OnlyPostFormDataTestResponse>(
    prepare(onlyPostFormDataTestRequestConfig, requestData),
    ...args,
  )
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig",
]
`;

exports[`Generator 无注释: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

type UserRequestRestArgs = RequestFunctionRestArgs<typeof request>

// Request: 目前 React Hooks 功能有用到
export type Request<
  TRequestData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

export interface DeleteMethodTestResponse {}

type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/deleteMethod_test',
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deleteMethodTest',
}

export const deleteMethodTest = (requestData: DeleteMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeleteMethodTestResponse>(prepare(deleteMethodTestRequestConfig, requestData), ...args)
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/getMethod_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'getMethodTest',
}

export const getMethodTest = (requestData: GetMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<GetMethodTestResponse>(prepare(getMethodTestRequestConfig, requestData), ...args)
}

getMethodTest.requestConfig = getMethodTestRequestConfig

export interface Json5ResponseTestRequest {}

export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Response_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5ResponseTest',
}

export const json5ResponseTest = (requestData?: Json5ResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5ResponseTestResponse>(prepare(json5ResponseTestRequestConfig, requestData), ...args)
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

export interface Json5RequestTestResponse {}

type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Request_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5RequestTest',
}

export const json5RequestTest = (requestData: Json5RequestTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5RequestTestResponse>(prepare(json5RequestTestRequestConfig, requestData), ...args)
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/postMethod_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'postMethodTest',
}

export const postMethodTest = (requestData: PostMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PostMethodTestResponse>(prepare(postMethodTestRequestConfig, requestData), ...args)
}

postMethodTest.requestConfig = postMethodTestRequestConfig

export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/putMethod_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'putMethodTest',
}

export const putMethodTest = (requestData: PutMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PutMethodTestResponse>(prepare(putMethodTestRequestConfig, requestData), ...args)
}

putMethodTest.requestConfig = putMethodTestRequestConfig

export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKeyExample_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'dataKeyExampleTest',
}

export const dataKeyExampleTest = (requestData: DataKeyExampleTestRequest, ...args: UserRequestRestArgs) => {
  return request<DataKeyExampleTestResponse>(prepare(dataKeyExampleTestRequestConfig, requestData), ...args)
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

export interface UploadTestResponse {}

type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/upload_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'uploadTest',
}

export const uploadTest = (requestData: UploadTestRequest, ...args: UserRequestRestArgs) => {
  return request<UploadTestResponse>(prepare(uploadTestRequestConfig, requestData), ...args)
}

uploadTest.requestConfig = uploadTestRequestConfig

export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

export interface TestTestResponse {}

type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

export interface NoResponseDataTestRequest {}

export interface NoResponseDataTestResponse {}

type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/noResponseData_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'noResponseDataTest',
}

export const noResponseDataTest = (requestData?: NoResponseDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<NoResponseDataTestResponse>(prepare(noResponseDataTestRequestConfig, requestData), ...args)
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

export interface EmptyResponseTestRequest {}

export interface EmptyResponseTestResponse {}

type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/emptyResponse_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'emptyResponseTest',
}

export const emptyResponseTest = (requestData?: EmptyResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<EmptyResponseTestResponse>(prepare(emptyResponseTestRequestConfig, requestData), ...args)
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

export interface TestTestResponse {}

type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

export interface HihihiTestResponse {}

type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihiTest',
}

export const hihihiTest = (requestData: HihihiTestRequest, ...args: UserRequestRestArgs) => {
  return request<HihihiTestResponse>(prepare(hihihiTestRequestConfig, requestData), ...args)
}

hihihiTest.requestConfig = hihihiTestRequestConfig

export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

export interface Hihihi_1608478638207TestResponse {}

type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihi_1608478638207Test',
}

export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(prepare(hihihi_1608478638207TestRequestConfig, requestData), ...args)
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

export interface RawResponseTestRequest {}

export type RawResponseTestResponse = any

type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/rawResponse_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'rawResponseTest',
}

export const rawResponseTest = (requestData?: RawResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<RawResponseTestResponse>(prepare(rawResponseTestRequestConfig, requestData), ...args)
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

export interface HeadersTestRequest {}

export interface HeadersTestResponse {}

type HeadersTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/headers_test',
    undefined,
    string,
    string,
    true
  >
>

const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/headers_test',
  method: Method.GET,
  requestHeaders: {Authorization: 'dddddd', Cookie: 'x=1'},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'headersTest',
}

export const headersTest = (requestData?: HeadersTestRequest, ...args: UserRequestRestArgs) => {
  return request<HeadersTestResponse>(prepare(headersTestRequestConfig, requestData), ...args)
}

headersTest.requestConfig = headersTestRequestConfig

export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number
  /**
   * 格式
   */
  format: string
  /**
   * ID
   */
  id: number
}

export interface AvatarTestResponse {}

type AvatarTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/user/:id/avatar_test',
    undefined,
    'id',
    'size' | 'format',
    false
  >
>

const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/user/:id/avatar_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id'],
  queryNames: ['size', 'format'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'avatarTest',
}

export const avatarTest = (requestData: AvatarTestRequest, ...args: UserRequestRestArgs) => {
  return request<AvatarTestResponse>(prepare(avatarTestRequestConfig, requestData), ...args)
}

avatarTest.requestConfig = avatarTestRequestConfig

export interface DeepTestRequest {}

export interface DeepTestResponse {
  err: number
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string
    }
  }
}

type DeepTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKey/deep_test',
    undefined,
    string,
    string,
    true
  >
>

const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKey/deep_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deepTest',
}

export const deepTest = (requestData?: DeepTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeepTestResponse>(prepare(deepTestRequestConfig, requestData), ...args)
}

deepTest.requestConfig = deepTestRequestConfig

export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string
}

export interface OnlyPostFormDataTestResponse {}

type OnlyPostFormDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/get/only_post_form_data_test',
    undefined,
    string,
    'query_id',
    false
  >
>

const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/get/only_post_form_data_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['query_id'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'onlyPostFormDataTest',
}

export const onlyPostFormDataTest = (requestData: OnlyPostFormDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<OnlyPostFormDataTestResponse>(prepare(onlyPostFormDataTestRequestConfig, requestData), ...args)
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig

/* prettier-ignore-end */
"
`;

exports[`Generator 无注释: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}


export interface DeleteMethodTestResponse {}

type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>


const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deleteMethodTest\\",
}


export const deleteMethodTest = (
  requestData: DeleteMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeleteMethodTestResponse>(
    prepare(deleteMethodTestRequestConfig, requestData),
    ...args,
  )
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}


export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>


const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/getMethod_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"getMethodTest\\",
}


export const getMethodTest = (
  requestData: GetMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<GetMethodTestResponse>(
    prepare(getMethodTestRequestConfig, requestData),
    ...args,
  )
}

getMethodTest.requestConfig = getMethodTestRequestConfig

export interface Json5ResponseTestRequest {}


export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>


const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Response_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5ResponseTest\\",
}


export const json5ResponseTest = (
  requestData?: Json5ResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5ResponseTestResponse>(
    prepare(json5ResponseTestRequestConfig, requestData),
    ...args,
  )
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}


export interface Json5RequestTestResponse {}

type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>


const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Request_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5RequestTest\\",
}


export const json5RequestTest = (
  requestData: Json5RequestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5RequestTestResponse>(
    prepare(json5RequestTestRequestConfig, requestData),
    ...args,
  )
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}


export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>


const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/postMethod_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"postMethodTest\\",
}


export const postMethodTest = (
  requestData: PostMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PostMethodTestResponse>(
    prepare(postMethodTestRequestConfig, requestData),
    ...args,
  )
}

postMethodTest.requestConfig = postMethodTestRequestConfig

export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}


export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>


const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/putMethod_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"putMethodTest\\",
}


export const putMethodTest = (
  requestData: PutMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PutMethodTestResponse>(
    prepare(putMethodTestRequestConfig, requestData),
    ...args,
  )
}

putMethodTest.requestConfig = putMethodTestRequestConfig

export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}


export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>


const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"dataKeyExampleTest\\",
}


export const dataKeyExampleTest = (
  requestData: DataKeyExampleTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DataKeyExampleTestResponse>(
    prepare(dataKeyExampleTestRequestConfig, requestData),
    ...args,
  )
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}


export interface UploadTestResponse {}

type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/upload_test\\",
  undefined,
  string,
  string,
  false
>>


const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/upload_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"uploadTest\\",
}


export const uploadTest = (
  requestData: UploadTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<UploadTestResponse>(
    prepare(uploadTestRequestConfig, requestData),
    ...args,
  )
}

uploadTest.requestConfig = uploadTestRequestConfig

export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}


export interface TestTestResponse {}

type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>


const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}


export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

export interface NoResponseDataTestRequest {}


export interface NoResponseDataTestResponse {}

type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>


const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/noResponseData_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"noResponseDataTest\\",
}


export const noResponseDataTest = (
  requestData?: NoResponseDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<NoResponseDataTestResponse>(
    prepare(noResponseDataTestRequestConfig, requestData),
    ...args,
  )
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

export interface EmptyResponseTestRequest {}


export interface EmptyResponseTestResponse {}

type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>


const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/emptyResponse_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"emptyResponseTest\\",
}


export const emptyResponseTest = (
  requestData?: EmptyResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<EmptyResponseTestResponse>(
    prepare(emptyResponseTestRequestConfig, requestData),
    ...args,
  )
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}


export interface TestTestResponse {}

type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>


const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}


export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}


export interface HihihiTestResponse {}

type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>


const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihiTest\\",
}


export const hihihiTest = (
  requestData: HihihiTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HihihiTestResponse>(
    prepare(hihihiTestRequestConfig, requestData),
    ...args,
  )
}

hihihiTest.requestConfig = hihihiTestRequestConfig

export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}


export interface Hihihi_1608478638207TestResponse {}

type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>


const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihi_1608478638207Test\\",
}


export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(
    prepare(hihihi_1608478638207TestRequestConfig, requestData),
    ...args,
  )
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

export interface RawResponseTestRequest {}


export type RawResponseTestResponse = any

type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>


const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/rawResponse_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"rawResponseTest\\",
}


export const rawResponseTest = (
  requestData?: RawResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<RawResponseTestResponse>(
    prepare(rawResponseTestRequestConfig, requestData),
    ...args,
  )
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

export interface HeadersTestRequest {}


export interface HeadersTestResponse {}

type HeadersTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/headers_test\\",
  undefined,
  string,
  string,
  true
>>


const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/headers_test\\",
  method: Method.GET,
  requestHeaders: {\\"Authorization\\":\\"dddddd\\",\\"Cookie\\":\\"x=1\\"},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"headersTest\\",
}


export const headersTest = (
  requestData?: HeadersTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HeadersTestResponse>(
    prepare(headersTestRequestConfig, requestData),
    ...args,
  )
}

headersTest.requestConfig = headersTestRequestConfig

export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number;
  /**
   * 格式
   */
  format: string;
  /**
   * ID
   */
  id: number;
}


export interface AvatarTestResponse {}

type AvatarTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/user/:id/avatar_test\\",
  undefined,
  'id',
  'size' | 'format',
  false
>>


const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/user/:id/avatar_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\"],
  queryNames: [\\"size\\",\\"format\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"avatarTest\\",
}


export const avatarTest = (
  requestData: AvatarTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<AvatarTestResponse>(
    prepare(avatarTestRequestConfig, requestData),
    ...args,
  )
}

avatarTest.requestConfig = avatarTestRequestConfig

export interface DeepTestRequest {}


export interface DeepTestResponse {
  err: number;
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string;
    };
  };
}

type DeepTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKey/deep_test\\",
  undefined,
  string,
  string,
  true
>>


const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKey/deep_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deepTest\\",
}


export const deepTest = (
  requestData?: DeepTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeepTestResponse>(
    prepare(deepTestRequestConfig, requestData),
    ...args,
  )
}

deepTest.requestConfig = deepTestRequestConfig

export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string;
}


export interface OnlyPostFormDataTestResponse {}

type OnlyPostFormDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get/only_post_form_data_test\\",
  undefined,
  string,
  'query_id',
  false
>>


const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/get/only_post_form_data_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"query_id\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"onlyPostFormDataTest\\",
}


export const onlyPostFormDataTest = (
  requestData: OnlyPostFormDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<OnlyPostFormDataTestResponse>(
    prepare(onlyPostFormDataTestRequestConfig, requestData),
    ...args,
  )
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig",
]
`;

exports[`Generator 无请求头注释: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

type UserRequestRestArgs = RequestFunctionRestArgs<typeof request>

// Request: 目前 React Hooks 功能有用到
export type Request<
  TRequestData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/deleteMethod_test',
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deleteMethodTest',
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export const deleteMethodTest = (requestData: DeleteMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeleteMethodTestResponse>(prepare(deleteMethodTestRequestConfig, requestData), ...args)
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/getMethod_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'getMethodTest',
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export const getMethodTest = (requestData: GetMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<GetMethodTestResponse>(prepare(getMethodTestRequestConfig, requestData), ...args)
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Response_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5ResponseTest',
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export const json5ResponseTest = (requestData?: Json5ResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5ResponseTestResponse>(prepare(json5ResponseTestRequestConfig, requestData), ...args)
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Request_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5RequestTest',
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export const json5RequestTest = (requestData: Json5RequestTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5RequestTestResponse>(prepare(json5RequestTestRequestConfig, requestData), ...args)
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/postMethod_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'postMethodTest',
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export const postMethodTest = (requestData: PostMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PostMethodTestResponse>(prepare(postMethodTestRequestConfig, requestData), ...args)
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/putMethod_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'putMethodTest',
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export const putMethodTest = (requestData: PutMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PutMethodTestResponse>(prepare(putMethodTestRequestConfig, requestData), ...args)
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKeyExample_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'dataKeyExampleTest',
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (requestData: DataKeyExampleTestRequest, ...args: UserRequestRestArgs) => {
  return request<DataKeyExampleTestResponse>(prepare(dataKeyExampleTestRequestConfig, requestData), ...args)
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/upload_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'uploadTest',
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export const uploadTest = (requestData: UploadTestRequest, ...args: UserRequestRestArgs) => {
  return request<UploadTestResponse>(prepare(uploadTestRequestConfig, requestData), ...args)
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/noResponseData_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'noResponseDataTest',
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export const noResponseDataTest = (requestData?: NoResponseDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<NoResponseDataTestResponse>(prepare(noResponseDataTestRequestConfig, requestData), ...args)
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/emptyResponse_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'emptyResponseTest',
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export const emptyResponseTest = (requestData?: EmptyResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<EmptyResponseTestResponse>(prepare(emptyResponseTestRequestConfig, requestData), ...args)
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihiTest',
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export const hihihiTest = (requestData: HihihiTestRequest, ...args: UserRequestRestArgs) => {
  return request<HihihiTestResponse>(prepare(hihihiTestRequestConfig, requestData), ...args)
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihi_1608478638207Test',
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(prepare(hihihi_1608478638207TestRequestConfig, requestData), ...args)
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/rawResponse_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'rawResponseTest',
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export const rawResponseTest = (requestData?: RawResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<RawResponseTestResponse>(prepare(rawResponseTestRequestConfig, requestData), ...args)
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/headers_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/headers_test',
  method: Method.GET,
  requestHeaders: {Authorization: 'dddddd', Cookie: 'x=1'},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'headersTest',
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1619432971
 */
export const headersTest = (requestData?: HeadersTestRequest, ...args: UserRequestRestArgs) => {
  return request<HeadersTestResponse>(prepare(headersTestRequestConfig, requestData), ...args)
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number
  /**
   * 格式
   */
  format: string
  /**
   * ID
   */
  id: number
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/user/:id/avatar_test',
    undefined,
    'id',
    'size' | 'format',
    false
  >
>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/user/:id/avatar_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id'],
  queryNames: ['size', 'format'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'avatarTest',
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1621501310
 */
export const avatarTest = (requestData: AvatarTestRequest, ...args: UserRequestRestArgs) => {
  return request<AvatarTestResponse>(prepare(avatarTestRequestConfig, requestData), ...args)
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string
    }
  }
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKey/deep_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKey/deep_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deepTest',
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1626489548
 */
export const deepTest = (requestData?: DeepTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeepTestResponse>(prepare(deepTestRequestConfig, requestData), ...args)
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/get/only_post_form_data_test',
    undefined,
    string,
    'query_id',
    false
  >
>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/get/only_post_form_data_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['query_id'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'onlyPostFormDataTest',
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (requestData: OnlyPostFormDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<OnlyPostFormDataTestResponse>(prepare(onlyPostFormDataTestRequestConfig, requestData), ...args)
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig

/* prettier-ignore-end */
"
`;

exports[`Generator 无请求头注释: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deleteMethodTest\\",
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export const deleteMethodTest = (
  requestData: DeleteMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeleteMethodTestResponse>(
    prepare(deleteMethodTestRequestConfig, requestData),
    ...args,
  )
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/getMethod_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"getMethodTest\\",
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export const getMethodTest = (
  requestData: GetMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<GetMethodTestResponse>(
    prepare(getMethodTestRequestConfig, requestData),
    ...args,
  )
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Response_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5ResponseTest\\",
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export const json5ResponseTest = (
  requestData?: Json5ResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5ResponseTestResponse>(
    prepare(json5ResponseTestRequestConfig, requestData),
    ...args,
  )
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Request_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5RequestTest\\",
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export const json5RequestTest = (
  requestData: Json5RequestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5RequestTestResponse>(
    prepare(json5RequestTestRequestConfig, requestData),
    ...args,
  )
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/postMethod_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"postMethodTest\\",
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export const postMethodTest = (
  requestData: PostMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PostMethodTestResponse>(
    prepare(postMethodTestRequestConfig, requestData),
    ...args,
  )
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/putMethod_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"putMethodTest\\",
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557429
 */
export const putMethodTest = (
  requestData: PutMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PutMethodTestResponse>(
    prepare(putMethodTestRequestConfig, requestData),
    ...args,
  )
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"dataKeyExampleTest\\",
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (
  requestData: DataKeyExampleTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DataKeyExampleTestResponse>(
    prepare(dataKeyExampleTestRequestConfig, requestData),
    ...args,
  )
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/upload_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"uploadTest\\",
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export const uploadTest = (
  requestData: UploadTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<UploadTestResponse>(
    prepare(uploadTestRequestConfig, requestData),
    ...args,
  )
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/noResponseData_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"noResponseDataTest\\",
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export const noResponseDataTest = (
  requestData?: NoResponseDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<NoResponseDataTestResponse>(
    prepare(noResponseDataTestRequestConfig, requestData),
    ...args,
  )
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/emptyResponse_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"emptyResponseTest\\",
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export const emptyResponseTest = (
  requestData?: EmptyResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<EmptyResponseTestResponse>(
    prepare(emptyResponseTestRequestConfig, requestData),
    ...args,
  )
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihiTest\\",
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export const hihihiTest = (
  requestData: HihihiTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HihihiTestResponse>(
    prepare(hihihiTestRequestConfig, requestData),
    ...args,
  )
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihi_1608478638207Test\\",
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(
    prepare(hihihi_1608478638207TestRequestConfig, requestData),
    ...args,
  )
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/rawResponse_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"rawResponseTest\\",
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1610557430
 */
export const rawResponseTest = (
  requestData?: RawResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<RawResponseTestResponse>(
    prepare(rawResponseTestRequestConfig, requestData),
    ...args,
  )
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/headers_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/headers_test\\",
  method: Method.GET,
  requestHeaders: {\\"Authorization\\":\\"dddddd\\",\\"Cookie\\":\\"x=1\\"},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"headersTest\\",
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1619432971
 */
export const headersTest = (
  requestData?: HeadersTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HeadersTestResponse>(
    prepare(headersTestRequestConfig, requestData),
    ...args,
  )
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number;
  /**
   * 格式
   */
  format: string;
  /**
   * ID
   */
  id: number;
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/user/:id/avatar_test\\",
  undefined,
  'id',
  'size' | 'format',
  false
>>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/user/:id/avatar_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\"],
  queryNames: [\\"size\\",\\"format\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"avatarTest\\",
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1621501310
 */
export const avatarTest = (
  requestData: AvatarTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<AvatarTestResponse>(
    prepare(avatarTestRequestConfig, requestData),
    ...args,
  )
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number;
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string;
    };
  };
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKey/deep_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKey/deep_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deepTest\\",
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1626489548
 */
export const deepTest = (
  requestData?: DeepTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeepTestResponse>(
    prepare(deepTestRequestConfig, requestData),
    ...args,
  )
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string;
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get/only_post_form_data_test\\",
  undefined,
  string,
  'query_id',
  false
>>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/get/only_post_form_data_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"query_id\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"onlyPostFormDataTest\\",
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (
  requestData: OnlyPostFormDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<OnlyPostFormDataTestResponse>(
    prepare(onlyPostFormDataTestRequestConfig, requestData),
    ...args,
  )
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig",
]
`;

exports[`Generator 无链接注释: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

type UserRequestRestArgs = RequestFunctionRestArgs<typeof request>

// Request: 目前 React Hooks 功能有用到
export type Request<
  TRequestData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 DELETE 方法 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 DELETE 方法 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 DELETE 方法 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 DELETE 方法 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/deleteMethod_test',
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deleteMethodTest',
}

/**
 * 接口 DELETE 方法 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (requestData: DeleteMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeleteMethodTestResponse>(prepare(deleteMethodTestRequestConfig, requestData), ...args)
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 GET 方法 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 GET 方法 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 GET 方法 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 GET 方法 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/getMethod_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'getMethodTest',
}

/**
 * 接口 GET 方法 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (requestData: GetMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<GetMethodTestResponse>(prepare(getMethodTestRequestConfig, requestData), ...args)
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 JSON5 响应 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 JSON5 响应 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 JSON5 响应 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 JSON5 响应 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Response_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5ResponseTest',
}

/**
 * 接口 JSON5 响应 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (requestData?: Json5ResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5ResponseTestResponse>(prepare(json5ResponseTestRequestConfig, requestData), ...args)
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 JSON5 请求 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 JSON5 请求 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 JSON5 请求 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 JSON5 请求 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Request_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5RequestTest',
}

/**
 * 接口 JSON5 请求 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (requestData: Json5RequestTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5RequestTestResponse>(prepare(json5RequestTestRequestConfig, requestData), ...args)
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 POST 方法 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 POST 方法 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 POST 方法 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 POST 方法 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/postMethod_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'postMethodTest',
}

/**
 * 接口 POST 方法 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (requestData: PostMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PostMethodTestResponse>(prepare(postMethodTestRequestConfig, requestData), ...args)
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 PUT 方法 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 PUT 方法 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 PUT 方法 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 PUT 方法 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/putMethod_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'putMethodTest',
}

/**
 * 接口 PUT 方法 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (requestData: PutMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PutMethodTestResponse>(prepare(putMethodTestRequestConfig, requestData), ...args)
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 dataKey 例子 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 dataKey 例子 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 dataKey 例子 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 dataKey 例子 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKeyExample_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'dataKeyExampleTest',
}

/**
 * 接口 dataKey 例子 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (requestData: DataKeyExampleTestRequest, ...args: UserRequestRestArgs) => {
  return request<DataKeyExampleTestResponse>(prepare(dataKeyExampleTestRequestConfig, requestData), ...args)
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 文件 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 文件 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 文件 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 文件 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/upload_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'uploadTest',
}

/**
 * 接口 文件 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (requestData: UploadTestRequest, ...args: UserRequestRestArgs) => {
  return request<UploadTestResponse>(prepare(uploadTestRequestConfig, requestData), ...args)
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 查询参数+对象 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 查询参数+对象 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 查询参数+对象 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 查询参数+对象 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 查询参数+对象 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 没返回数据 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 没返回数据 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 没返回数据 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 没返回数据 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/noResponseData_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'noResponseDataTest',
}

/**
 * 接口 没返回数据 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (requestData?: NoResponseDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<NoResponseDataTestResponse>(prepare(noResponseDataTestRequestConfig, requestData), ...args)
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 空返回数据 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 空返回数据 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 空返回数据 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 空返回数据 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/emptyResponse_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'emptyResponseTest',
}

/**
 * 接口 空返回数据 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (requestData?: EmptyResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<EmptyResponseTestResponse>(prepare(emptyResponseTestRequestConfig, requestData), ...args)
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 路径参数 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 路径参数 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 路径参数 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 路径参数 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 路径参数 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 路径参数+对象 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 路径参数+对象 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 路径参数+对象 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 路径参数+对象 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihiTest',
}

/**
 * 接口 路径参数+对象 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (requestData: HihihiTestRequest, ...args: UserRequestRestArgs) => {
  return request<HihihiTestResponse>(prepare(hihihiTestRequestConfig, requestData), ...args)
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 路径参数+查询参数+对象 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 路径参数+查询参数+对象 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 路径参数+查询参数+对象 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 路径参数+查询参数+对象 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihi_1608478638207Test',
}

/**
 * 接口 路径参数+查询参数+对象 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(prepare(hihihi_1608478638207TestRequestConfig, requestData), ...args)
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 返回 raw 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 返回 raw 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 返回 raw 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 返回 raw 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/rawResponse_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'rawResponseTest',
}

/**
 * 接口 返回 raw 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (requestData?: RawResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<RawResponseTestResponse>(prepare(rawResponseTestRequestConfig, requestData), ...args)
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 请求头 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 请求头 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 请求头 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/headers_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 请求头 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/headers_test',
  method: Method.GET,
  requestHeaders: {Authorization: 'dddddd', Cookie: 'x=1'},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'headersTest',
}

/**
 * 接口 请求头 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (requestData?: HeadersTestRequest, ...args: UserRequestRestArgs) => {
  return request<HeadersTestResponse>(prepare(headersTestRequestConfig, requestData), ...args)
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 路径参数、查询参数类型 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number
  /**
   * 格式
   */
  format: string
  /**
   * ID
   */
  id: number
}

/**
 * 接口 路径参数、查询参数类型 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 路径参数、查询参数类型 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/user/:id/avatar_test',
    undefined,
    'id',
    'size' | 'format',
    false
  >
>

/**
 * 接口 路径参数、查询参数类型 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/user/:id/avatar_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id'],
  queryNames: ['size', 'format'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'avatarTest',
}

/**
 * 接口 路径参数、查询参数类型 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (requestData: AvatarTestRequest, ...args: UserRequestRestArgs) => {
  return request<AvatarTestResponse>(prepare(avatarTestRequestConfig, requestData), ...args)
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 dataKey 深度路径 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 dataKey 深度路径 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string
    }
  }
}

/**
 * 接口 dataKey 深度路径 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKey/deep_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 dataKey 深度路径 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKey/deep_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deepTest',
}

/**
 * 接口 dataKey 深度路径 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (requestData?: DeepTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeepTestResponse>(prepare(deepTestRequestConfig, requestData), ...args)
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 fix: 仅 POST 类接口处理表单数据 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string
}

/**
 * 接口 fix: 仅 POST 类接口处理表单数据 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 fix: 仅 POST 类接口处理表单数据 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/get/only_post_form_data_test',
    undefined,
    string,
    'query_id',
    false
  >
>

/**
 * 接口 fix: 仅 POST 类接口处理表单数据 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/get/only_post_form_data_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['query_id'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'onlyPostFormDataTest',
}

/**
 * 接口 fix: 仅 POST 类接口处理表单数据 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (requestData: OnlyPostFormDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<OnlyPostFormDataTestResponse>(prepare(onlyPostFormDataTestRequestConfig, requestData), ...args)
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig

/* prettier-ignore-end */
"
`;

exports[`Generator 无链接注释: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 DELETE 方法 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 DELETE 方法 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 DELETE 方法 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 DELETE 方法 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deleteMethodTest\\",
}

/**
 * 接口 DELETE 方法 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (
  requestData: DeleteMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeleteMethodTestResponse>(
    prepare(deleteMethodTestRequestConfig, requestData),
    ...args,
  )
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 GET 方法 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 GET 方法 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 GET 方法 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 GET 方法 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/getMethod_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"getMethodTest\\",
}

/**
 * 接口 GET 方法 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (
  requestData: GetMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<GetMethodTestResponse>(
    prepare(getMethodTestRequestConfig, requestData),
    ...args,
  )
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 JSON5 响应 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 JSON5 响应 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 JSON5 响应 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 JSON5 响应 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Response_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5ResponseTest\\",
}

/**
 * 接口 JSON5 响应 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (
  requestData?: Json5ResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5ResponseTestResponse>(
    prepare(json5ResponseTestRequestConfig, requestData),
    ...args,
  )
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 JSON5 请求 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 JSON5 请求 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 JSON5 请求 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 JSON5 请求 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Request_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5RequestTest\\",
}

/**
 * 接口 JSON5 请求 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (
  requestData: Json5RequestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5RequestTestResponse>(
    prepare(json5RequestTestRequestConfig, requestData),
    ...args,
  )
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 POST 方法 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 POST 方法 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 POST 方法 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 POST 方法 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/postMethod_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"postMethodTest\\",
}

/**
 * 接口 POST 方法 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (
  requestData: PostMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PostMethodTestResponse>(
    prepare(postMethodTestRequestConfig, requestData),
    ...args,
  )
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 PUT 方法 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 PUT 方法 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 PUT 方法 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 PUT 方法 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/putMethod_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"putMethodTest\\",
}

/**
 * 接口 PUT 方法 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (
  requestData: PutMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PutMethodTestResponse>(
    prepare(putMethodTestRequestConfig, requestData),
    ...args,
  )
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 dataKey 例子 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 dataKey 例子 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 dataKey 例子 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 dataKey 例子 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"dataKeyExampleTest\\",
}

/**
 * 接口 dataKey 例子 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (
  requestData: DataKeyExampleTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DataKeyExampleTestResponse>(
    prepare(dataKeyExampleTestRequestConfig, requestData),
    ...args,
  )
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 文件 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 文件 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 文件 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 文件 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/upload_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"uploadTest\\",
}

/**
 * 接口 文件 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (
  requestData: UploadTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<UploadTestResponse>(
    prepare(uploadTestRequestConfig, requestData),
    ...args,
  )
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 查询参数+对象 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 查询参数+对象 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 查询参数+对象 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 查询参数+对象 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 查询参数+对象 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 没返回数据 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 没返回数据 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 没返回数据 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 没返回数据 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/noResponseData_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"noResponseDataTest\\",
}

/**
 * 接口 没返回数据 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (
  requestData?: NoResponseDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<NoResponseDataTestResponse>(
    prepare(noResponseDataTestRequestConfig, requestData),
    ...args,
  )
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 空返回数据 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 空返回数据 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 空返回数据 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 空返回数据 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/emptyResponse_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"emptyResponseTest\\",
}

/**
 * 接口 空返回数据 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (
  requestData?: EmptyResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<EmptyResponseTestResponse>(
    prepare(emptyResponseTestRequestConfig, requestData),
    ...args,
  )
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 路径参数 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 路径参数 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 路径参数 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 路径参数 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 路径参数 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 路径参数+对象 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 路径参数+对象 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 路径参数+对象 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 路径参数+对象 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihiTest\\",
}

/**
 * 接口 路径参数+对象 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (
  requestData: HihihiTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HihihiTestResponse>(
    prepare(hihihiTestRequestConfig, requestData),
    ...args,
  )
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 路径参数+查询参数+对象 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 路径参数+查询参数+对象 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 路径参数+查询参数+对象 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 路径参数+查询参数+对象 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihi_1608478638207Test\\",
}

/**
 * 接口 路径参数+查询参数+对象 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(
    prepare(hihihi_1608478638207TestRequestConfig, requestData),
    ...args,
  )
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 返回 raw 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 返回 raw 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 返回 raw 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 返回 raw 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/rawResponse_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"rawResponseTest\\",
}

/**
 * 接口 返回 raw 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (
  requestData?: RawResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<RawResponseTestResponse>(
    prepare(rawResponseTestRequestConfig, requestData),
    ...args,
  )
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 请求头 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 请求头 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 请求头 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/headers_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 请求头 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/headers_test\\",
  method: Method.GET,
  requestHeaders: {\\"Authorization\\":\\"dddddd\\",\\"Cookie\\":\\"x=1\\"},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"headersTest\\",
}

/**
 * 接口 请求头 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (
  requestData?: HeadersTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HeadersTestResponse>(
    prepare(headersTestRequestConfig, requestData),
    ...args,
  )
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 路径参数、查询参数类型 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number;
  /**
   * 格式
   */
  format: string;
  /**
   * ID
   */
  id: number;
}

/**
 * 接口 路径参数、查询参数类型 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 路径参数、查询参数类型 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/user/:id/avatar_test\\",
  undefined,
  'id',
  'size' | 'format',
  false
>>

/**
 * 接口 路径参数、查询参数类型 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/user/:id/avatar_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\"],
  queryNames: [\\"size\\",\\"format\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"avatarTest\\",
}

/**
 * 接口 路径参数、查询参数类型 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (
  requestData: AvatarTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<AvatarTestResponse>(
    prepare(avatarTestRequestConfig, requestData),
    ...args,
  )
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 dataKey 深度路径 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 dataKey 深度路径 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number;
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string;
    };
  };
}

/**
 * 接口 dataKey 深度路径 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKey/deep_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 dataKey 深度路径 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKey/deep_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deepTest\\",
}

/**
 * 接口 dataKey 深度路径 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (
  requestData?: DeepTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeepTestResponse>(
    prepare(deepTestRequestConfig, requestData),
    ...args,
  )
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 fix: 仅 POST 类接口处理表单数据 的 **请求类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string;
}

/**
 * 接口 fix: 仅 POST 类接口处理表单数据 的 **返回类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 fix: 仅 POST 类接口处理表单数据 的 **请求配置的类型**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get/only_post_form_data_test\\",
  undefined,
  string,
  'query_id',
  false
>>

/**
 * 接口 fix: 仅 POST 类接口处理表单数据 的 **请求配置**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/get/only_post_form_data_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"query_id\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"onlyPostFormDataTest\\",
}

/**
 * 接口 fix: 仅 POST 类接口处理表单数据 的 **请求函数**
 *
 * @分类 test
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (
  requestData: OnlyPostFormDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<OnlyPostFormDataTestResponse>(
    prepare(onlyPostFormDataTestRequestConfig, requestData),
    ...args,
  )
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig",
]
`;

exports[`Generator 正确生成代码并写入文件 - 全部分类: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

type UserRequestRestArgs = RequestFunctionRestArgs<typeof request>

// Request: 目前 React Hooks 功能有用到
export type Request<
  TRequestData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_1 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_1 = '' as any
const prodUrl_0_0_0_1 = 'http://prod.com/' as any
const dataKey_0_0_0_1 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/deleteMethod_test',
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deleteMethodTest',
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (requestData: DeleteMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeleteMethodTestResponse>(prepare(deleteMethodTestRequestConfig, requestData), ...args)
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/getMethod_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'getMethodTest',
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (requestData: GetMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<GetMethodTestResponse>(prepare(getMethodTestRequestConfig, requestData), ...args)
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/json5Response_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5ResponseTest',
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (requestData?: Json5ResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5ResponseTestResponse>(prepare(json5ResponseTestRequestConfig, requestData), ...args)
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/json5Request_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5RequestTest',
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (requestData: Json5RequestTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5RequestTestResponse>(prepare(json5RequestTestRequestConfig, requestData), ...args)
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/postMethod_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'postMethodTest',
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (requestData: PostMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PostMethodTestResponse>(prepare(postMethodTestRequestConfig, requestData), ...args)
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/putMethod_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'putMethodTest',
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (requestData: PutMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PutMethodTestResponse>(prepare(putMethodTestRequestConfig, requestData), ...args)
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/dataKeyExample_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'dataKeyExampleTest',
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (requestData: DataKeyExampleTestRequest, ...args: UserRequestRestArgs) => {
  return request<DataKeyExampleTestResponse>(prepare(dataKeyExampleTestRequestConfig, requestData), ...args)
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/upload_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'uploadTest',
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (requestData: UploadTestRequest, ...args: UserRequestRestArgs) => {
  return request<UploadTestResponse>(prepare(uploadTestRequestConfig, requestData), ...args)
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/noResponseData_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'noResponseDataTest',
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (requestData?: NoResponseDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<NoResponseDataTestResponse>(prepare(noResponseDataTestRequestConfig, requestData), ...args)
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/emptyResponse_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'emptyResponseTest',
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (requestData?: EmptyResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<EmptyResponseTestResponse>(prepare(emptyResponseTestRequestConfig, requestData), ...args)
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihiTest',
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (requestData: HihihiTestRequest, ...args: UserRequestRestArgs) => {
  return request<HihihiTestResponse>(prepare(hihihiTestRequestConfig, requestData), ...args)
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihi_1608478638207Test',
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(prepare(hihihi_1608478638207TestRequestConfig, requestData), ...args)
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/rawResponse_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'rawResponseTest',
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (requestData?: RawResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<RawResponseTestResponse>(prepare(rawResponseTestRequestConfig, requestData), ...args)
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/headers_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/headers_test',
  method: Method.GET,
  requestHeaders: {Authorization: 'dddddd', Cookie: 'x=1'},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'headersTest',
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (requestData?: HeadersTestRequest, ...args: UserRequestRestArgs) => {
  return request<HeadersTestResponse>(prepare(headersTestRequestConfig, requestData), ...args)
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number
  /**
   * 格式
   */
  format: string
  /**
   * ID
   */
  id: number
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/user/:id/avatar_test',
    undefined,
    'id',
    'size' | 'format',
    false
  >
>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/user/:id/avatar_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: ['id'],
  queryNames: ['size', 'format'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'avatarTest',
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (requestData: AvatarTestRequest, ...args: UserRequestRestArgs) => {
  return request<AvatarTestResponse>(prepare(avatarTestRequestConfig, requestData), ...args)
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string
    }
  }
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKey/deep_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/dataKey/deep_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deepTest',
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (requestData?: DeepTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeepTestResponse>(prepare(deepTestRequestConfig, requestData), ...args)
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/get/only_post_form_data_test',
    undefined,
    string,
    'query_id',
    false
  >
>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/get/only_post_form_data_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: ['query_id'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'onlyPostFormDataTest',
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (requestData: OnlyPostFormDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<OnlyPostFormDataTestResponse>(prepare(onlyPostFormDataTestRequestConfig, requestData), ...args)
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig

const mockUrl_0_0_0_2 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_2 = '' as any
const prodUrl_0_0_0_2 = 'http://prod.com/' as any
const dataKey_0_0_0_2 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export interface Get2TestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export interface Get2TestResponse {
  msg: string
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
type Get2TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/get2_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
const get2TestRequestConfig: Get2TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/get2_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'get2Test',
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export const get2Test = (requestData?: Get2TestRequest, ...args: UserRequestRestArgs) => {
  return request<Get2TestResponse>(prepare(get2TestRequestConfig, requestData), ...args)
}

get2Test.requestConfig = get2TestRequestConfig

const mockUrl_0_0_0_3 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_3 = '' as any
const prodUrl_0_0_0_3 = 'http://prod.com/' as any
const dataKey_0_0_0_3 = undefined as any

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
export interface Picture_3dDetailTestRequest {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
export interface Picture_3dDetailTestResponse {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
type Picture_3dDetailTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/issue-17/picture_3d_detail_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
const picture_3dDetailTestRequestConfig: Picture_3dDetailTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: '/__hello__/issue-17/picture_3d_detail_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'picture_3dDetailTest',
}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
export const picture_3dDetailTest = (requestData?: Picture_3dDetailTestRequest, ...args: UserRequestRestArgs) => {
  return request<Picture_3dDetailTestResponse>(prepare(picture_3dDetailTestRequestConfig, requestData), ...args)
}

picture_3dDetailTest.requestConfig = picture_3dDetailTestRequestConfig

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
export interface GetTestRequest {
  a: string
  b: string
  c: string
  'd    e': string
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
export interface GetTestResponse {}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
type GetTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/28/get_test',
    undefined,
    string,
    '   a' | ' b' | 'c ' | '    d    e   ',
    false
  >
>

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
const getTestRequestConfig: GetTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: '/__hello__/28/get_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  queryNames: ['   a', ' b', 'c ', '    d    e   '],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'getTest',
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
export const getTest = (requestData: GetTestRequest, ...args: UserRequestRestArgs) => {
  return request<GetTestResponse>(prepare(getTestRequestConfig, requestData), ...args)
}

getTest.requestConfig = getTestRequestConfig

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
export interface FormTestRequest {
  a: string
  b: string
  c: string
  'd   e': string
  'd    e': string
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
export interface FormTestResponse {}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
type FormTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/28/post/form_test',
    undefined,
    string,
    '   a' | ' b' | 'c ' | '    d    e   ',
    false
  >
>

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
const formTestRequestConfig: FormTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: '/__hello__/28/post/form_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  queryNames: ['   a', ' b', 'c ', '    d    e   '],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'formTest',
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
export const formTest = (requestData: FormTestRequest, ...args: UserRequestRestArgs) => {
  return request<FormTestResponse>(prepare(formTestRequestConfig, requestData), ...args)
}

formTest.requestConfig = formTestRequestConfig

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
export interface JsonTestRequest {
  a: string
  b: string
  'c   d': string
  e: {
    f: string
  }
  c: string
  'd    e': string
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
export interface JsonTestResponse {
  a?: number
  b?: string
  c?: {
    d?: string
  }
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
type JsonTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/28/post/json_test',
    undefined,
    string,
    '   a' | ' b' | 'c ' | '    d    e   ',
    false
  >
>

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
const jsonTestRequestConfig: JsonTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: '/__hello__/28/post/json_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  queryNames: ['   a', ' b', 'c ', '    d    e   '],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'jsonTest',
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
export const jsonTest = (requestData: JsonTestRequest, ...args: UserRequestRestArgs) => {
  return request<JsonTestResponse>(prepare(jsonTestRequestConfig, requestData), ...args)
}

jsonTest.requestConfig = jsonTestRequestConfig

/* prettier-ignore-end */
"
`;

exports[`Generator 正确生成代码并写入文件 - 全部分类: 请求文件 1`] = `
"import { RequestFunctionParams } from 'yapi-to-typescript'

export interface RequestOptions {
  /**
   * 使用的服务器。
   *
   * - \`prod\`: 生产服务器
   * - \`dev\`: 测试服务器
   * - \`mock\`: 模拟服务器
   *
   * @default prod
   */
  server?: 'prod' | 'dev' | 'mock',
}

export default function request<TResponseData>(
  payload: RequestFunctionParams,
  options: RequestOptions = {
    server: 'prod',
  },
): Promise<TResponseData> {
  return new Promise<TResponseData>((resolve, reject) => {
    // 基本地址
    const baseUrl = options.server === 'mock'
      ? payload.mockUrl
      : options.server === 'dev'
        ? payload.devUrl
        : payload.prodUrl

    // 请求地址
    const url = \`\${baseUrl}\${payload.path}\`

    // 具体请求逻辑
  })
}"
`;

exports[`Generator 正确生成代码并写入文件 - 全部分类: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_1 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_1 = \\"\\" as any
const prodUrl_0_0_0_1 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_1 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deleteMethodTest\\",
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (
  requestData: DeleteMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeleteMethodTestResponse>(
    prepare(deleteMethodTestRequestConfig, requestData),
    ...args,
  )
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/getMethod_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"getMethodTest\\",
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (
  requestData: GetMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<GetMethodTestResponse>(
    prepare(getMethodTestRequestConfig, requestData),
    ...args,
  )
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/json5Response_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5ResponseTest\\",
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (
  requestData?: Json5ResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5ResponseTestResponse>(
    prepare(json5ResponseTestRequestConfig, requestData),
    ...args,
  )
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/json5Request_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5RequestTest\\",
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (
  requestData: Json5RequestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5RequestTestResponse>(
    prepare(json5RequestTestRequestConfig, requestData),
    ...args,
  )
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/postMethod_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"postMethodTest\\",
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (
  requestData: PostMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PostMethodTestResponse>(
    prepare(postMethodTestRequestConfig, requestData),
    ...args,
  )
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/putMethod_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"putMethodTest\\",
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (
  requestData: PutMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PutMethodTestResponse>(
    prepare(putMethodTestRequestConfig, requestData),
    ...args,
  )
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"dataKeyExampleTest\\",
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (
  requestData: DataKeyExampleTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DataKeyExampleTestResponse>(
    prepare(dataKeyExampleTestRequestConfig, requestData),
    ...args,
  )
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/upload_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"uploadTest\\",
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (
  requestData: UploadTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<UploadTestResponse>(
    prepare(uploadTestRequestConfig, requestData),
    ...args,
  )
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/noResponseData_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"noResponseDataTest\\",
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (
  requestData?: NoResponseDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<NoResponseDataTestResponse>(
    prepare(noResponseDataTestRequestConfig, requestData),
    ...args,
  )
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/emptyResponse_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"emptyResponseTest\\",
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (
  requestData?: EmptyResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<EmptyResponseTestResponse>(
    prepare(emptyResponseTestRequestConfig, requestData),
    ...args,
  )
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihiTest\\",
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (
  requestData: HihihiTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HihihiTestResponse>(
    prepare(hihihiTestRequestConfig, requestData),
    ...args,
  )
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihi_1608478638207Test\\",
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(
    prepare(hihihi_1608478638207TestRequestConfig, requestData),
    ...args,
  )
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/rawResponse_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"rawResponseTest\\",
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (
  requestData?: RawResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<RawResponseTestResponse>(
    prepare(rawResponseTestRequestConfig, requestData),
    ...args,
  )
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/headers_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/headers_test\\",
  method: Method.GET,
  requestHeaders: {\\"Authorization\\":\\"dddddd\\",\\"Cookie\\":\\"x=1\\"},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"headersTest\\",
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (
  requestData?: HeadersTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HeadersTestResponse>(
    prepare(headersTestRequestConfig, requestData),
    ...args,
  )
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number;
  /**
   * 格式
   */
  format: string;
  /**
   * ID
   */
  id: number;
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/user/:id/avatar_test\\",
  undefined,
  'id',
  'size' | 'format',
  false
>>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/user/:id/avatar_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [\\"id\\"],
  queryNames: [\\"size\\",\\"format\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"avatarTest\\",
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (
  requestData: AvatarTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<AvatarTestResponse>(
    prepare(avatarTestRequestConfig, requestData),
    ...args,
  )
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number;
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string;
    };
  };
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKey/deep_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/dataKey/deep_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deepTest\\",
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (
  requestData?: DeepTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeepTestResponse>(
    prepare(deepTestRequestConfig, requestData),
    ...args,
  )
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string;
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get/only_post_form_data_test\\",
  undefined,
  string,
  'query_id',
  false
>>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/get/only_post_form_data_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [\\"query_id\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"onlyPostFormDataTest\\",
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (
  requestData: OnlyPostFormDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<OnlyPostFormDataTestResponse>(
    prepare(onlyPostFormDataTestRequestConfig, requestData),
    ...args,
  )
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig",
  "const mockUrl_0_0_0_2 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_2 = \\"\\" as any
const prodUrl_0_0_0_2 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_2 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export interface Get2TestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export interface Get2TestResponse {
  msg: string;
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
type Get2TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get2_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
const get2TestRequestConfig: Get2TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/get2_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"get2Test\\",
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export const get2Test = (
  requestData?: Get2TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Get2TestResponse>(
    prepare(get2TestRequestConfig, requestData),
    ...args,
  )
}

get2Test.requestConfig = get2TestRequestConfig",
  "const mockUrl_0_0_0_3 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_3 = \\"\\" as any
const prodUrl_0_0_0_3 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_3 = undefined as any

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
export interface Picture_3dDetailTestRequest {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
export interface Picture_3dDetailTestResponse {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
type Picture_3dDetailTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/issue-17/picture_3d_detail_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
const picture_3dDetailTestRequestConfig: Picture_3dDetailTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: \\"/__hello__/issue-17/picture_3d_detail_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"picture_3dDetailTest\\",
}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
export const picture_3dDetailTest = (
  requestData?: Picture_3dDetailTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Picture_3dDetailTestResponse>(
    prepare(picture_3dDetailTestRequestConfig, requestData),
    ...args,
  )
}

picture_3dDetailTest.requestConfig = picture_3dDetailTestRequestConfig

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
export interface GetTestRequest {
  a: string;
  b: string;
  c: string;
  'd    e': string;
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
export interface GetTestResponse {}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
type GetTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/28/get_test\\",
  undefined,
  string,
  '   a' | ' b' | 'c ' | '    d    e   ',
  false
>>

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
const getTestRequestConfig: GetTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: \\"/__hello__/28/get_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  queryNames: [\\"   a\\",\\" b\\",\\"c \\",\\"    d    e   \\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"getTest\\",
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
export const getTest = (
  requestData: GetTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<GetTestResponse>(
    prepare(getTestRequestConfig, requestData),
    ...args,
  )
}

getTest.requestConfig = getTestRequestConfig

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
export interface FormTestRequest {
  a: string;
  b: string;
  c: string;
  'd   e': string;
  'd    e': string;
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
export interface FormTestResponse {}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
type FormTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/28/post/form_test\\",
  undefined,
  string,
  '   a' | ' b' | 'c ' | '    d    e   ',
  false
>>

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
const formTestRequestConfig: FormTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: \\"/__hello__/28/post/form_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  queryNames: [\\"   a\\",\\" b\\",\\"c \\",\\"    d    e   \\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"formTest\\",
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
export const formTest = (
  requestData: FormTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<FormTestResponse>(
    prepare(formTestRequestConfig, requestData),
    ...args,
  )
}

formTest.requestConfig = formTestRequestConfig

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
export interface JsonTestRequest {
  a: string;
  b: string;
  'c   d': string;
  e: {
    f: string;
  };
  c: string;
  'd    e': string;
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
export interface JsonTestResponse {
  a?: number;
  b?: string;
  c?: {
    d?: string;
  };
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
type JsonTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/28/post/json_test\\",
  undefined,
  string,
  '   a' | ' b' | 'c ' | '    d    e   ',
  false
>>

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
const jsonTestRequestConfig: JsonTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: \\"/__hello__/28/post/json_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  queryNames: [\\"   a\\",\\" b\\",\\"c \\",\\"    d    e   \\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"jsonTest\\",
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
export const jsonTest = (
  requestData: JsonTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<JsonTestResponse>(
    prepare(jsonTestRequestConfig, requestData),
    ...args,
  )
}

jsonTest.requestConfig = jsonTestRequestConfig",
]
`;

exports[`Generator 正确生成代码并写入文件 - 单分类: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

type UserRequestRestArgs = RequestFunctionRestArgs<typeof request>

// Request: 目前 React Hooks 功能有用到
export type Request<
  TRequestData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/deleteMethod_test',
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deleteMethodTest',
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (requestData: DeleteMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeleteMethodTestResponse>(prepare(deleteMethodTestRequestConfig, requestData), ...args)
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/getMethod_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'getMethodTest',
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (requestData: GetMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<GetMethodTestResponse>(prepare(getMethodTestRequestConfig, requestData), ...args)
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Response_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5ResponseTest',
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (requestData?: Json5ResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5ResponseTestResponse>(prepare(json5ResponseTestRequestConfig, requestData), ...args)
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Request_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5RequestTest',
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (requestData: Json5RequestTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5RequestTestResponse>(prepare(json5RequestTestRequestConfig, requestData), ...args)
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/postMethod_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'postMethodTest',
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (requestData: PostMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PostMethodTestResponse>(prepare(postMethodTestRequestConfig, requestData), ...args)
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/putMethod_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'putMethodTest',
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (requestData: PutMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PutMethodTestResponse>(prepare(putMethodTestRequestConfig, requestData), ...args)
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKeyExample_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'dataKeyExampleTest',
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (requestData: DataKeyExampleTestRequest, ...args: UserRequestRestArgs) => {
  return request<DataKeyExampleTestResponse>(prepare(dataKeyExampleTestRequestConfig, requestData), ...args)
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/upload_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'uploadTest',
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (requestData: UploadTestRequest, ...args: UserRequestRestArgs) => {
  return request<UploadTestResponse>(prepare(uploadTestRequestConfig, requestData), ...args)
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/noResponseData_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'noResponseDataTest',
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (requestData?: NoResponseDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<NoResponseDataTestResponse>(prepare(noResponseDataTestRequestConfig, requestData), ...args)
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/emptyResponse_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'emptyResponseTest',
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (requestData?: EmptyResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<EmptyResponseTestResponse>(prepare(emptyResponseTestRequestConfig, requestData), ...args)
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihiTest',
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (requestData: HihihiTestRequest, ...args: UserRequestRestArgs) => {
  return request<HihihiTestResponse>(prepare(hihihiTestRequestConfig, requestData), ...args)
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihi_1608478638207Test',
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(prepare(hihihi_1608478638207TestRequestConfig, requestData), ...args)
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/rawResponse_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'rawResponseTest',
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (requestData?: RawResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<RawResponseTestResponse>(prepare(rawResponseTestRequestConfig, requestData), ...args)
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/headers_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/headers_test',
  method: Method.GET,
  requestHeaders: {Authorization: 'dddddd', Cookie: 'x=1'},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'headersTest',
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (requestData?: HeadersTestRequest, ...args: UserRequestRestArgs) => {
  return request<HeadersTestResponse>(prepare(headersTestRequestConfig, requestData), ...args)
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number
  /**
   * 格式
   */
  format: string
  /**
   * ID
   */
  id: number
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/user/:id/avatar_test',
    undefined,
    'id',
    'size' | 'format',
    false
  >
>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/user/:id/avatar_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id'],
  queryNames: ['size', 'format'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'avatarTest',
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (requestData: AvatarTestRequest, ...args: UserRequestRestArgs) => {
  return request<AvatarTestResponse>(prepare(avatarTestRequestConfig, requestData), ...args)
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string
    }
  }
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKey/deep_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKey/deep_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deepTest',
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (requestData?: DeepTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeepTestResponse>(prepare(deepTestRequestConfig, requestData), ...args)
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/get/only_post_form_data_test',
    undefined,
    string,
    'query_id',
    false
  >
>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/get/only_post_form_data_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['query_id'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'onlyPostFormDataTest',
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (requestData: OnlyPostFormDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<OnlyPostFormDataTestResponse>(prepare(onlyPostFormDataTestRequestConfig, requestData), ...args)
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig

/* prettier-ignore-end */
"
`;

exports[`Generator 正确生成代码并写入文件 - 单分类: 请求文件 1`] = `
"import { RequestFunctionParams } from 'yapi-to-typescript'

export interface RequestOptions {
  /**
   * 使用的服务器。
   *
   * - \`prod\`: 生产服务器
   * - \`dev\`: 测试服务器
   * - \`mock\`: 模拟服务器
   *
   * @default prod
   */
  server?: 'prod' | 'dev' | 'mock',
}

export default function request<TResponseData>(
  payload: RequestFunctionParams,
  options: RequestOptions = {
    server: 'prod',
  },
): Promise<TResponseData> {
  return new Promise<TResponseData>((resolve, reject) => {
    // 基本地址
    const baseUrl = options.server === 'mock'
      ? payload.mockUrl
      : options.server === 'dev'
        ? payload.devUrl
        : payload.prodUrl

    // 请求地址
    const url = \`\${baseUrl}\${payload.path}\`

    // 具体请求逻辑
  })
}"
`;

exports[`Generator 正确生成代码并写入文件 - 单分类: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deleteMethodTest\\",
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (
  requestData: DeleteMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeleteMethodTestResponse>(
    prepare(deleteMethodTestRequestConfig, requestData),
    ...args,
  )
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/getMethod_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"getMethodTest\\",
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (
  requestData: GetMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<GetMethodTestResponse>(
    prepare(getMethodTestRequestConfig, requestData),
    ...args,
  )
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Response_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5ResponseTest\\",
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (
  requestData?: Json5ResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5ResponseTestResponse>(
    prepare(json5ResponseTestRequestConfig, requestData),
    ...args,
  )
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Request_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5RequestTest\\",
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (
  requestData: Json5RequestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5RequestTestResponse>(
    prepare(json5RequestTestRequestConfig, requestData),
    ...args,
  )
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/postMethod_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"postMethodTest\\",
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (
  requestData: PostMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PostMethodTestResponse>(
    prepare(postMethodTestRequestConfig, requestData),
    ...args,
  )
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/putMethod_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"putMethodTest\\",
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (
  requestData: PutMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PutMethodTestResponse>(
    prepare(putMethodTestRequestConfig, requestData),
    ...args,
  )
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"dataKeyExampleTest\\",
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (
  requestData: DataKeyExampleTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DataKeyExampleTestResponse>(
    prepare(dataKeyExampleTestRequestConfig, requestData),
    ...args,
  )
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/upload_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"uploadTest\\",
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (
  requestData: UploadTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<UploadTestResponse>(
    prepare(uploadTestRequestConfig, requestData),
    ...args,
  )
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/noResponseData_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"noResponseDataTest\\",
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (
  requestData?: NoResponseDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<NoResponseDataTestResponse>(
    prepare(noResponseDataTestRequestConfig, requestData),
    ...args,
  )
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/emptyResponse_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"emptyResponseTest\\",
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (
  requestData?: EmptyResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<EmptyResponseTestResponse>(
    prepare(emptyResponseTestRequestConfig, requestData),
    ...args,
  )
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihiTest\\",
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (
  requestData: HihihiTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HihihiTestResponse>(
    prepare(hihihiTestRequestConfig, requestData),
    ...args,
  )
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihi_1608478638207Test\\",
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(
    prepare(hihihi_1608478638207TestRequestConfig, requestData),
    ...args,
  )
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/rawResponse_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"rawResponseTest\\",
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (
  requestData?: RawResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<RawResponseTestResponse>(
    prepare(rawResponseTestRequestConfig, requestData),
    ...args,
  )
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/headers_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/headers_test\\",
  method: Method.GET,
  requestHeaders: {\\"Authorization\\":\\"dddddd\\",\\"Cookie\\":\\"x=1\\"},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"headersTest\\",
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (
  requestData?: HeadersTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HeadersTestResponse>(
    prepare(headersTestRequestConfig, requestData),
    ...args,
  )
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number;
  /**
   * 格式
   */
  format: string;
  /**
   * ID
   */
  id: number;
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/user/:id/avatar_test\\",
  undefined,
  'id',
  'size' | 'format',
  false
>>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/user/:id/avatar_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\"],
  queryNames: [\\"size\\",\\"format\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"avatarTest\\",
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (
  requestData: AvatarTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<AvatarTestResponse>(
    prepare(avatarTestRequestConfig, requestData),
    ...args,
  )
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number;
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string;
    };
  };
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKey/deep_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKey/deep_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deepTest\\",
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (
  requestData?: DeepTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeepTestResponse>(
    prepare(deepTestRequestConfig, requestData),
    ...args,
  )
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string;
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get/only_post_form_data_test\\",
  undefined,
  string,
  'query_id',
  false
>>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/get/only_post_form_data_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"query_id\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"onlyPostFormDataTest\\",
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (
  requestData: OnlyPostFormDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<OnlyPostFormDataTestResponse>(
    prepare(onlyPostFormDataTestRequestConfig, requestData),
    ...args,
  )
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig",
]
`;

exports[`Generator 正确生成代码并写入文件 - 多分类: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

type UserRequestRestArgs = RequestFunctionRestArgs<typeof request>

// Request: 目前 React Hooks 功能有用到
export type Request<
  TRequestData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/deleteMethod_test',
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deleteMethodTest',
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (requestData: DeleteMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeleteMethodTestResponse>(prepare(deleteMethodTestRequestConfig, requestData), ...args)
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/getMethod_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'getMethodTest',
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (requestData: GetMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<GetMethodTestResponse>(prepare(getMethodTestRequestConfig, requestData), ...args)
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Response_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5ResponseTest',
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (requestData?: Json5ResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5ResponseTestResponse>(prepare(json5ResponseTestRequestConfig, requestData), ...args)
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Request_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5RequestTest',
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (requestData: Json5RequestTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5RequestTestResponse>(prepare(json5RequestTestRequestConfig, requestData), ...args)
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/postMethod_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'postMethodTest',
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (requestData: PostMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PostMethodTestResponse>(prepare(postMethodTestRequestConfig, requestData), ...args)
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/putMethod_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'putMethodTest',
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (requestData: PutMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PutMethodTestResponse>(prepare(putMethodTestRequestConfig, requestData), ...args)
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKeyExample_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'dataKeyExampleTest',
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (requestData: DataKeyExampleTestRequest, ...args: UserRequestRestArgs) => {
  return request<DataKeyExampleTestResponse>(prepare(dataKeyExampleTestRequestConfig, requestData), ...args)
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/upload_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'uploadTest',
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (requestData: UploadTestRequest, ...args: UserRequestRestArgs) => {
  return request<UploadTestResponse>(prepare(uploadTestRequestConfig, requestData), ...args)
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/noResponseData_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'noResponseDataTest',
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (requestData?: NoResponseDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<NoResponseDataTestResponse>(prepare(noResponseDataTestRequestConfig, requestData), ...args)
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/emptyResponse_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'emptyResponseTest',
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (requestData?: EmptyResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<EmptyResponseTestResponse>(prepare(emptyResponseTestRequestConfig, requestData), ...args)
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihiTest',
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (requestData: HihihiTestRequest, ...args: UserRequestRestArgs) => {
  return request<HihihiTestResponse>(prepare(hihihiTestRequestConfig, requestData), ...args)
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihi_1608478638207Test',
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(prepare(hihihi_1608478638207TestRequestConfig, requestData), ...args)
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/rawResponse_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'rawResponseTest',
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (requestData?: RawResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<RawResponseTestResponse>(prepare(rawResponseTestRequestConfig, requestData), ...args)
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/headers_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/headers_test',
  method: Method.GET,
  requestHeaders: {Authorization: 'dddddd', Cookie: 'x=1'},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'headersTest',
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (requestData?: HeadersTestRequest, ...args: UserRequestRestArgs) => {
  return request<HeadersTestResponse>(prepare(headersTestRequestConfig, requestData), ...args)
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number
  /**
   * 格式
   */
  format: string
  /**
   * ID
   */
  id: number
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/user/:id/avatar_test',
    undefined,
    'id',
    'size' | 'format',
    false
  >
>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/user/:id/avatar_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id'],
  queryNames: ['size', 'format'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'avatarTest',
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (requestData: AvatarTestRequest, ...args: UserRequestRestArgs) => {
  return request<AvatarTestResponse>(prepare(avatarTestRequestConfig, requestData), ...args)
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string
    }
  }
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKey/deep_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKey/deep_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deepTest',
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (requestData?: DeepTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeepTestResponse>(prepare(deepTestRequestConfig, requestData), ...args)
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/get/only_post_form_data_test',
    undefined,
    string,
    'query_id',
    false
  >
>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/get/only_post_form_data_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['query_id'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'onlyPostFormDataTest',
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (requestData: OnlyPostFormDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<OnlyPostFormDataTestResponse>(prepare(onlyPostFormDataTestRequestConfig, requestData), ...args)
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig

const mockUrl_0_0_0_1 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_1 = '' as any
const prodUrl_0_0_0_1 = 'http://prod.com/' as any
const dataKey_0_0_0_1 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export interface Get2TestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export interface Get2TestResponse {
  msg: string
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
type Get2TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/get2_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
const get2TestRequestConfig: Get2TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/get2_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'get2Test',
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export const get2Test = (requestData?: Get2TestRequest, ...args: UserRequestRestArgs) => {
  return request<Get2TestResponse>(prepare(get2TestRequestConfig, requestData), ...args)
}

get2Test.requestConfig = get2TestRequestConfig

/* prettier-ignore-end */
"
`;

exports[`Generator 正确生成代码并写入文件 - 多分类: 请求文件 1`] = `
"import { RequestFunctionParams } from 'yapi-to-typescript'

export interface RequestOptions {
  /**
   * 使用的服务器。
   *
   * - \`prod\`: 生产服务器
   * - \`dev\`: 测试服务器
   * - \`mock\`: 模拟服务器
   *
   * @default prod
   */
  server?: 'prod' | 'dev' | 'mock',
}

export default function request<TResponseData>(
  payload: RequestFunctionParams,
  options: RequestOptions = {
    server: 'prod',
  },
): Promise<TResponseData> {
  return new Promise<TResponseData>((resolve, reject) => {
    // 基本地址
    const baseUrl = options.server === 'mock'
      ? payload.mockUrl
      : options.server === 'dev'
        ? payload.devUrl
        : payload.prodUrl

    // 请求地址
    const url = \`\${baseUrl}\${payload.path}\`

    // 具体请求逻辑
  })
}"
`;

exports[`Generator 正确生成代码并写入文件 - 多分类: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deleteMethodTest\\",
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (
  requestData: DeleteMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeleteMethodTestResponse>(
    prepare(deleteMethodTestRequestConfig, requestData),
    ...args,
  )
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/getMethod_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"getMethodTest\\",
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (
  requestData: GetMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<GetMethodTestResponse>(
    prepare(getMethodTestRequestConfig, requestData),
    ...args,
  )
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Response_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5ResponseTest\\",
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (
  requestData?: Json5ResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5ResponseTestResponse>(
    prepare(json5ResponseTestRequestConfig, requestData),
    ...args,
  )
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Request_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5RequestTest\\",
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (
  requestData: Json5RequestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5RequestTestResponse>(
    prepare(json5RequestTestRequestConfig, requestData),
    ...args,
  )
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/postMethod_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"postMethodTest\\",
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (
  requestData: PostMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PostMethodTestResponse>(
    prepare(postMethodTestRequestConfig, requestData),
    ...args,
  )
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/putMethod_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"putMethodTest\\",
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (
  requestData: PutMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PutMethodTestResponse>(
    prepare(putMethodTestRequestConfig, requestData),
    ...args,
  )
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"dataKeyExampleTest\\",
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (
  requestData: DataKeyExampleTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DataKeyExampleTestResponse>(
    prepare(dataKeyExampleTestRequestConfig, requestData),
    ...args,
  )
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/upload_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"uploadTest\\",
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (
  requestData: UploadTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<UploadTestResponse>(
    prepare(uploadTestRequestConfig, requestData),
    ...args,
  )
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/noResponseData_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"noResponseDataTest\\",
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (
  requestData?: NoResponseDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<NoResponseDataTestResponse>(
    prepare(noResponseDataTestRequestConfig, requestData),
    ...args,
  )
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/emptyResponse_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"emptyResponseTest\\",
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (
  requestData?: EmptyResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<EmptyResponseTestResponse>(
    prepare(emptyResponseTestRequestConfig, requestData),
    ...args,
  )
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihiTest\\",
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (
  requestData: HihihiTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HihihiTestResponse>(
    prepare(hihihiTestRequestConfig, requestData),
    ...args,
  )
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihi_1608478638207Test\\",
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(
    prepare(hihihi_1608478638207TestRequestConfig, requestData),
    ...args,
  )
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/rawResponse_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"rawResponseTest\\",
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (
  requestData?: RawResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<RawResponseTestResponse>(
    prepare(rawResponseTestRequestConfig, requestData),
    ...args,
  )
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/headers_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/headers_test\\",
  method: Method.GET,
  requestHeaders: {\\"Authorization\\":\\"dddddd\\",\\"Cookie\\":\\"x=1\\"},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"headersTest\\",
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (
  requestData?: HeadersTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HeadersTestResponse>(
    prepare(headersTestRequestConfig, requestData),
    ...args,
  )
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number;
  /**
   * 格式
   */
  format: string;
  /**
   * ID
   */
  id: number;
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/user/:id/avatar_test\\",
  undefined,
  'id',
  'size' | 'format',
  false
>>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/user/:id/avatar_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\"],
  queryNames: [\\"size\\",\\"format\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"avatarTest\\",
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (
  requestData: AvatarTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<AvatarTestResponse>(
    prepare(avatarTestRequestConfig, requestData),
    ...args,
  )
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number;
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string;
    };
  };
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKey/deep_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKey/deep_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deepTest\\",
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (
  requestData?: DeepTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeepTestResponse>(
    prepare(deepTestRequestConfig, requestData),
    ...args,
  )
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string;
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get/only_post_form_data_test\\",
  undefined,
  string,
  'query_id',
  false
>>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/get/only_post_form_data_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"query_id\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"onlyPostFormDataTest\\",
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (
  requestData: OnlyPostFormDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<OnlyPostFormDataTestResponse>(
    prepare(onlyPostFormDataTestRequestConfig, requestData),
    ...args,
  )
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig",
  "const mockUrl_0_0_0_1 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_1 = \\"\\" as any
const prodUrl_0_0_0_1 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_1 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export interface Get2TestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export interface Get2TestResponse {
  msg: string;
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
type Get2TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get2_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
const get2TestRequestConfig: Get2TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/get2_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"get2Test\\",
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export const get2Test = (
  requestData?: Get2TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Get2TestResponse>(
    prepare(get2TestRequestConfig, requestData),
    ...args,
  )
}

get2Test.requestConfig = get2TestRequestConfig",
]
`;

exports[`Generator 正确生成代码并写入文件 - 排除分类: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

type UserRequestRestArgs = RequestFunctionRestArgs<typeof request>

// Request: 目前 React Hooks 功能有用到
export type Request<
  TRequestData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_1 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_1 = '' as any
const prodUrl_0_0_0_1 = 'http://prod.com/' as any
const dataKey_0_0_0_1 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export interface Get2TestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export interface Get2TestResponse {
  msg: string
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
type Get2TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/get2_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
const get2TestRequestConfig: Get2TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/get2_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'get2Test',
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export const get2Test = (requestData?: Get2TestRequest, ...args: UserRequestRestArgs) => {
  return request<Get2TestResponse>(prepare(get2TestRequestConfig, requestData), ...args)
}

get2Test.requestConfig = get2TestRequestConfig

const mockUrl_0_0_0_2 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_2 = '' as any
const prodUrl_0_0_0_2 = 'http://prod.com/' as any
const dataKey_0_0_0_2 = undefined as any

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
export interface Picture_3dDetailTestRequest {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
export interface Picture_3dDetailTestResponse {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
type Picture_3dDetailTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/issue-17/picture_3d_detail_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
const picture_3dDetailTestRequestConfig: Picture_3dDetailTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/issue-17/picture_3d_detail_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'picture_3dDetailTest',
}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
export const picture_3dDetailTest = (requestData?: Picture_3dDetailTestRequest, ...args: UserRequestRestArgs) => {
  return request<Picture_3dDetailTestResponse>(prepare(picture_3dDetailTestRequestConfig, requestData), ...args)
}

picture_3dDetailTest.requestConfig = picture_3dDetailTestRequestConfig

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
export interface GetTestRequest {
  a: string
  b: string
  c: string
  'd    e': string
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
export interface GetTestResponse {}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
type GetTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/28/get_test',
    undefined,
    string,
    '   a' | ' b' | 'c ' | '    d    e   ',
    false
  >
>

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
const getTestRequestConfig: GetTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/28/get_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: ['   a', ' b', 'c ', '    d    e   '],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'getTest',
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
export const getTest = (requestData: GetTestRequest, ...args: UserRequestRestArgs) => {
  return request<GetTestResponse>(prepare(getTestRequestConfig, requestData), ...args)
}

getTest.requestConfig = getTestRequestConfig

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
export interface FormTestRequest {
  a: string
  b: string
  c: string
  'd   e': string
  'd    e': string
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
export interface FormTestResponse {}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
type FormTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/28/post/form_test',
    undefined,
    string,
    '   a' | ' b' | 'c ' | '    d    e   ',
    false
  >
>

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
const formTestRequestConfig: FormTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/28/post/form_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: ['   a', ' b', 'c ', '    d    e   '],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'formTest',
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
export const formTest = (requestData: FormTestRequest, ...args: UserRequestRestArgs) => {
  return request<FormTestResponse>(prepare(formTestRequestConfig, requestData), ...args)
}

formTest.requestConfig = formTestRequestConfig

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
export interface JsonTestRequest {
  a: string
  b: string
  'c   d': string
  e: {
    f: string
  }
  c: string
  'd    e': string
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
export interface JsonTestResponse {
  a?: number
  b?: string
  c?: {
    d?: string
  }
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
type JsonTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/28/post/json_test',
    undefined,
    string,
    '   a' | ' b' | 'c ' | '    d    e   ',
    false
  >
>

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
const jsonTestRequestConfig: JsonTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/28/post/json_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: ['   a', ' b', 'c ', '    d    e   '],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'jsonTest',
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
export const jsonTest = (requestData: JsonTestRequest, ...args: UserRequestRestArgs) => {
  return request<JsonTestResponse>(prepare(jsonTestRequestConfig, requestData), ...args)
}

jsonTest.requestConfig = jsonTestRequestConfig

/* prettier-ignore-end */
"
`;

exports[`Generator 正确生成代码并写入文件 - 排除分类: 请求文件 1`] = `
"import { RequestFunctionParams } from 'yapi-to-typescript'

export interface RequestOptions {
  /**
   * 使用的服务器。
   *
   * - \`prod\`: 生产服务器
   * - \`dev\`: 测试服务器
   * - \`mock\`: 模拟服务器
   *
   * @default prod
   */
  server?: 'prod' | 'dev' | 'mock',
}

export default function request<TResponseData>(
  payload: RequestFunctionParams,
  options: RequestOptions = {
    server: 'prod',
  },
): Promise<TResponseData> {
  return new Promise<TResponseData>((resolve, reject) => {
    // 基本地址
    const baseUrl = options.server === 'mock'
      ? payload.mockUrl
      : options.server === 'dev'
        ? payload.devUrl
        : payload.prodUrl

    // 请求地址
    const url = \`\${baseUrl}\${payload.path}\`

    // 具体请求逻辑
  })
}"
`;

exports[`Generator 正确生成代码并写入文件 - 排除分类: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_1 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_1 = \\"\\" as any
const prodUrl_0_0_0_1 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_1 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export interface Get2TestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export interface Get2TestResponse {
  msg: string;
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
type Get2TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get2_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
const get2TestRequestConfig: Get2TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/get2_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"get2Test\\",
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export const get2Test = (
  requestData?: Get2TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Get2TestResponse>(
    prepare(get2TestRequestConfig, requestData),
    ...args,
  )
}

get2Test.requestConfig = get2TestRequestConfig",
  "const mockUrl_0_0_0_2 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_2 = \\"\\" as any
const prodUrl_0_0_0_2 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_2 = undefined as any

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
export interface Picture_3dDetailTestRequest {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
export interface Picture_3dDetailTestResponse {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
type Picture_3dDetailTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/issue-17/picture_3d_detail_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
const picture_3dDetailTestRequestConfig: Picture_3dDetailTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/issue-17/picture_3d_detail_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"picture_3dDetailTest\\",
}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
export const picture_3dDetailTest = (
  requestData?: Picture_3dDetailTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Picture_3dDetailTestResponse>(
    prepare(picture_3dDetailTestRequestConfig, requestData),
    ...args,
  )
}

picture_3dDetailTest.requestConfig = picture_3dDetailTestRequestConfig

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
export interface GetTestRequest {
  a: string;
  b: string;
  c: string;
  'd    e': string;
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
export interface GetTestResponse {}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
type GetTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/28/get_test\\",
  undefined,
  string,
  '   a' | ' b' | 'c ' | '    d    e   ',
  false
>>

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
const getTestRequestConfig: GetTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/28/get_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [\\"   a\\",\\" b\\",\\"c \\",\\"    d    e   \\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"getTest\\",
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
export const getTest = (
  requestData: GetTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<GetTestResponse>(
    prepare(getTestRequestConfig, requestData),
    ...args,
  )
}

getTest.requestConfig = getTestRequestConfig

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
export interface FormTestRequest {
  a: string;
  b: string;
  c: string;
  'd   e': string;
  'd    e': string;
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
export interface FormTestResponse {}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
type FormTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/28/post/form_test\\",
  undefined,
  string,
  '   a' | ' b' | 'c ' | '    d    e   ',
  false
>>

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
const formTestRequestConfig: FormTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/28/post/form_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [\\"   a\\",\\" b\\",\\"c \\",\\"    d    e   \\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"formTest\\",
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
export const formTest = (
  requestData: FormTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<FormTestResponse>(
    prepare(formTestRequestConfig, requestData),
    ...args,
  )
}

formTest.requestConfig = formTestRequestConfig

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
export interface JsonTestRequest {
  a: string;
  b: string;
  'c   d': string;
  e: {
    f: string;
  };
  c: string;
  'd    e': string;
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
export interface JsonTestResponse {
  a?: number;
  b?: string;
  c?: {
    d?: string;
  };
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
type JsonTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/28/post/json_test\\",
  undefined,
  string,
  '   a' | ' b' | 'c ' | '    d    e   ',
  false
>>

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
const jsonTestRequestConfig: JsonTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/28/post/json_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [\\"   a\\",\\" b\\",\\"c \\",\\"    d    e   \\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"jsonTest\\",
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
export const jsonTest = (
  requestData: JsonTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<JsonTestResponse>(
    prepare(jsonTestRequestConfig, requestData),
    ...args,
  )
}

jsonTest.requestConfig = jsonTestRequestConfig",
]
`;

exports[`Generator 生成 JavaScript 代码: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */
/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */
// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, prepare } from 'yapi-to-typescript';
// @ts-ignore
import request from './request';
const mockUrl_0_0_0_1 = 'http://foo.bar/mock/32';
const devUrl_0_0_0_1 = '';
const prodUrl_0_0_0_1 = 'http://prod.com/';
const dataKey_0_0_0_1 = undefined;
/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_1,
    devUrl: devUrl_0_0_0_1,
    prodUrl: prodUrl_0_0_0_1,
    path: '/__hello__/deleteMethod_test',
    method: Method.DELETE,
    requestHeaders: {},
    requestBodyType: RequestBodyType.json,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_1,
    paramNames: [],
    queryNames: [],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'deleteMethodTest',
};
/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (requestData, ...args) => {
    return request(prepare(deleteMethodTestRequestConfig, requestData), ...args);
};
deleteMethodTest.requestConfig = deleteMethodTestRequestConfig;
/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_1,
    devUrl: devUrl_0_0_0_1,
    prodUrl: prodUrl_0_0_0_1,
    path: '/__hello__/getMethod_test',
    method: Method.GET,
    requestHeaders: {},
    requestBodyType: RequestBodyType.query,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_1,
    paramNames: [],
    queryNames: ['x', 'y'],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'getMethodTest',
};
/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (requestData, ...args) => {
    return request(prepare(getMethodTestRequestConfig, requestData), ...args);
};
getMethodTest.requestConfig = getMethodTestRequestConfig;
/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_1,
    devUrl: devUrl_0_0_0_1,
    prodUrl: prodUrl_0_0_0_1,
    path: '/__hello__/json5Response_test',
    method: Method.GET,
    requestHeaders: {},
    requestBodyType: RequestBodyType.query,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_1,
    paramNames: [],
    queryNames: [],
    requestDataOptional: true,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'json5ResponseTest',
};
/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (requestData, ...args) => {
    return request(prepare(json5ResponseTestRequestConfig, requestData), ...args);
};
json5ResponseTest.requestConfig = json5ResponseTestRequestConfig;
/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_1,
    devUrl: devUrl_0_0_0_1,
    prodUrl: prodUrl_0_0_0_1,
    path: '/__hello__/json5Request_test',
    method: Method.POST,
    requestHeaders: {},
    requestBodyType: RequestBodyType.json,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_1,
    paramNames: [],
    queryNames: [],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'json5RequestTest',
};
/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (requestData, ...args) => {
    return request(prepare(json5RequestTestRequestConfig, requestData), ...args);
};
json5RequestTest.requestConfig = json5RequestTestRequestConfig;
/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_1,
    devUrl: devUrl_0_0_0_1,
    prodUrl: prodUrl_0_0_0_1,
    path: '/__hello__/postMethod_test',
    method: Method.POST,
    requestHeaders: {},
    requestBodyType: RequestBodyType.json,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_1,
    paramNames: [],
    queryNames: [],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'postMethodTest',
};
/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (requestData, ...args) => {
    return request(prepare(postMethodTestRequestConfig, requestData), ...args);
};
postMethodTest.requestConfig = postMethodTestRequestConfig;
/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_1,
    devUrl: devUrl_0_0_0_1,
    prodUrl: prodUrl_0_0_0_1,
    path: '/__hello__/putMethod_test',
    method: Method.PUT,
    requestHeaders: {},
    requestBodyType: RequestBodyType.form,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_1,
    paramNames: [],
    queryNames: ['id', 'namre'],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'putMethodTest',
};
/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (requestData, ...args) => {
    return request(prepare(putMethodTestRequestConfig, requestData), ...args);
};
putMethodTest.requestConfig = putMethodTestRequestConfig;
/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_1,
    devUrl: devUrl_0_0_0_1,
    prodUrl: prodUrl_0_0_0_1,
    path: '/__hello__/dataKeyExample_test',
    method: Method.PUT,
    requestHeaders: {},
    requestBodyType: RequestBodyType.form,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_1,
    paramNames: [],
    queryNames: ['id', 'namre'],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'dataKeyExampleTest',
};
/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (requestData, ...args) => {
    return request(prepare(dataKeyExampleTestRequestConfig, requestData), ...args);
};
dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig;
/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_1,
    devUrl: devUrl_0_0_0_1,
    prodUrl: prodUrl_0_0_0_1,
    path: '/__hello__/upload_test',
    method: Method.POST,
    requestHeaders: {},
    requestBodyType: RequestBodyType.form,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_1,
    paramNames: [],
    queryNames: [],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'uploadTest',
};
/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (requestData, ...args) => {
    return request(prepare(uploadTestRequestConfig, requestData), ...args);
};
uploadTest.requestConfig = uploadTestRequestConfig;
/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_1,
    devUrl: devUrl_0_0_0_1,
    prodUrl: prodUrl_0_0_0_1,
    path: '/__hello__/test_test',
    method: Method.POST,
    requestHeaders: {},
    requestBodyType: RequestBodyType.json,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_1,
    paramNames: [],
    queryNames: ['cid'],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'testTest',
};
/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData, ...args) => {
    return request(prepare(testTestRequestConfig, requestData), ...args);
};
testTest.requestConfig = testTestRequestConfig;
/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_1,
    devUrl: devUrl_0_0_0_1,
    prodUrl: prodUrl_0_0_0_1,
    path: '/__hello__/noResponseData_test',
    method: Method.GET,
    requestHeaders: {},
    requestBodyType: RequestBodyType.query,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_1,
    paramNames: [],
    queryNames: [],
    requestDataOptional: true,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'noResponseDataTest',
};
/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (requestData, ...args) => {
    return request(prepare(noResponseDataTestRequestConfig, requestData), ...args);
};
noResponseDataTest.requestConfig = noResponseDataTestRequestConfig;
/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_1,
    devUrl: devUrl_0_0_0_1,
    prodUrl: prodUrl_0_0_0_1,
    path: '/__hello__/emptyResponse_test',
    method: Method.POST,
    requestHeaders: {},
    requestBodyType: RequestBodyType.form,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_1,
    paramNames: [],
    queryNames: [],
    requestDataOptional: true,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'emptyResponseTest',
};
/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (requestData, ...args) => {
    return request(prepare(emptyResponseTestRequestConfig, requestData), ...args);
};
emptyResponseTest.requestConfig = emptyResponseTestRequestConfig;
/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_1,
    devUrl: devUrl_0_0_0_1,
    prodUrl: prodUrl_0_0_0_1,
    path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    method: Method.POST,
    requestHeaders: {},
    requestBodyType: RequestBodyType.form,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_1,
    paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
    queryNames: [],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'testTest',
};
/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData, ...args) => {
    return request(prepare(testTestRequestConfig, requestData), ...args);
};
testTest.requestConfig = testTestRequestConfig;
/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_1,
    devUrl: devUrl_0_0_0_1,
    prodUrl: prodUrl_0_0_0_1,
    path: '/__hello__/test/{id}/:hihihi_test',
    method: Method.POST,
    requestHeaders: {},
    requestBodyType: RequestBodyType.json,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_1,
    paramNames: ['hihihi', 'id'],
    queryNames: [],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'hihihiTest',
};
/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (requestData, ...args) => {
    return request(prepare(hihihiTestRequestConfig, requestData), ...args);
};
hihihiTest.requestConfig = hihihiTestRequestConfig;
/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig = {
    mockUrl: mockUrl_0_0_0_1,
    devUrl: devUrl_0_0_0_1,
    prodUrl: prodUrl_0_0_0_1,
    path: '/__hello__/test/{id}/:hihihi_1608478638207_test',
    method: Method.POST,
    requestHeaders: {},
    requestBodyType: RequestBodyType.json,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_1,
    paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
    queryNames: ['query'],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'hihihi_1608478638207Test',
};
/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (requestData, ...args) => {
    return request(prepare(hihihi_1608478638207TestRequestConfig, requestData), ...args);
};
hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig;
/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_1,
    devUrl: devUrl_0_0_0_1,
    prodUrl: prodUrl_0_0_0_1,
    path: '/__hello__/rawResponse_test',
    method: Method.GET,
    requestHeaders: {},
    requestBodyType: RequestBodyType.query,
    responseBodyType: ResponseBodyType.raw,
    dataKey: dataKey_0_0_0_1,
    paramNames: [],
    queryNames: [],
    requestDataOptional: true,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'rawResponseTest',
};
/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (requestData, ...args) => {
    return request(prepare(rawResponseTestRequestConfig, requestData), ...args);
};
rawResponseTest.requestConfig = rawResponseTestRequestConfig;
/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_1,
    devUrl: devUrl_0_0_0_1,
    prodUrl: prodUrl_0_0_0_1,
    path: '/__hello__/headers_test',
    method: Method.GET,
    requestHeaders: { Authorization: 'dddddd', Cookie: 'x=1' },
    requestBodyType: RequestBodyType.query,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_1,
    paramNames: [],
    queryNames: [],
    requestDataOptional: true,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'headersTest',
};
/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (requestData, ...args) => {
    return request(prepare(headersTestRequestConfig, requestData), ...args);
};
headersTest.requestConfig = headersTestRequestConfig;
/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_1,
    devUrl: devUrl_0_0_0_1,
    prodUrl: prodUrl_0_0_0_1,
    path: '/__hello__/user/:id/avatar_test',
    method: Method.GET,
    requestHeaders: {},
    requestBodyType: RequestBodyType.query,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_1,
    paramNames: ['id'],
    queryNames: ['size', 'format'],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'avatarTest',
};
/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (requestData, ...args) => {
    return request(prepare(avatarTestRequestConfig, requestData), ...args);
};
avatarTest.requestConfig = avatarTestRequestConfig;
/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_1,
    devUrl: devUrl_0_0_0_1,
    prodUrl: prodUrl_0_0_0_1,
    path: '/__hello__/dataKey/deep_test',
    method: Method.GET,
    requestHeaders: {},
    requestBodyType: RequestBodyType.query,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_1,
    paramNames: [],
    queryNames: [],
    requestDataOptional: true,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'deepTest',
};
/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (requestData, ...args) => {
    return request(prepare(deepTestRequestConfig, requestData), ...args);
};
deepTest.requestConfig = deepTestRequestConfig;
/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_1,
    devUrl: devUrl_0_0_0_1,
    prodUrl: prodUrl_0_0_0_1,
    path: '/__hello__/get/only_post_form_data_test',
    method: Method.GET,
    requestHeaders: {},
    requestBodyType: RequestBodyType.query,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_1,
    paramNames: [],
    queryNames: ['query_id'],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'onlyPostFormDataTest',
};
/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (requestData, ...args) => {
    return request(prepare(onlyPostFormDataTestRequestConfig, requestData), ...args);
};
onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig;
const mockUrl_0_0_0_2 = 'http://foo.bar/mock/32';
const devUrl_0_0_0_2 = '';
const prodUrl_0_0_0_2 = 'http://prod.com/';
const dataKey_0_0_0_2 = undefined;
/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
const get2TestRequestConfig = {
    mockUrl: mockUrl_0_0_0_2,
    devUrl: devUrl_0_0_0_2,
    prodUrl: prodUrl_0_0_0_2,
    path: '/__hello__/get2_test',
    method: Method.GET,
    requestHeaders: {},
    requestBodyType: RequestBodyType.query,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_2,
    paramNames: [],
    queryNames: [],
    requestDataOptional: true,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'get2Test',
};
/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export const get2Test = (requestData, ...args) => {
    return request(prepare(get2TestRequestConfig, requestData), ...args);
};
get2Test.requestConfig = get2TestRequestConfig;
const mockUrl_0_0_0_3 = 'http://foo.bar/mock/32';
const devUrl_0_0_0_3 = '';
const prodUrl_0_0_0_3 = 'http://prod.com/';
const dataKey_0_0_0_3 = undefined;
/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
const picture_3dDetailTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_3,
    devUrl: devUrl_0_0_0_3,
    prodUrl: prodUrl_0_0_0_3,
    path: '/__hello__/issue-17/picture_3d_detail_test',
    method: Method.GET,
    requestHeaders: {},
    requestBodyType: RequestBodyType.query,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_3,
    paramNames: [],
    queryNames: [],
    requestDataOptional: true,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'picture_3dDetailTest',
};
/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
export const picture_3dDetailTest = (requestData, ...args) => {
    return request(prepare(picture_3dDetailTestRequestConfig, requestData), ...args);
};
picture_3dDetailTest.requestConfig = picture_3dDetailTestRequestConfig;
/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
const getTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_3,
    devUrl: devUrl_0_0_0_3,
    prodUrl: prodUrl_0_0_0_3,
    path: '/__hello__/28/get_test',
    method: Method.GET,
    requestHeaders: {},
    requestBodyType: RequestBodyType.query,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_3,
    paramNames: [],
    queryNames: ['   a', ' b', 'c ', '    d    e   '],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'getTest',
};
/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
export const getTest = (requestData, ...args) => {
    return request(prepare(getTestRequestConfig, requestData), ...args);
};
getTest.requestConfig = getTestRequestConfig;
/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
const formTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_3,
    devUrl: devUrl_0_0_0_3,
    prodUrl: prodUrl_0_0_0_3,
    path: '/__hello__/28/post/form_test',
    method: Method.POST,
    requestHeaders: {},
    requestBodyType: RequestBodyType.form,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_3,
    paramNames: [],
    queryNames: ['   a', ' b', 'c ', '    d    e   '],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'formTest',
};
/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
export const formTest = (requestData, ...args) => {
    return request(prepare(formTestRequestConfig, requestData), ...args);
};
formTest.requestConfig = formTestRequestConfig;
/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
const jsonTestRequestConfig = {
    mockUrl: mockUrl_0_0_0_3,
    devUrl: devUrl_0_0_0_3,
    prodUrl: prodUrl_0_0_0_3,
    path: '/__hello__/28/post/json_test',
    method: Method.POST,
    requestHeaders: {},
    requestBodyType: RequestBodyType.json,
    responseBodyType: ResponseBodyType.json,
    dataKey: dataKey_0_0_0_3,
    paramNames: [],
    queryNames: ['   a', ' b', 'c ', '    d    e   '],
    requestDataOptional: false,
    requestDataJsonSchema: {},
    responseDataJsonSchema: {},
    requestFunctionName: 'jsonTest',
};
/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
export const jsonTest = (requestData, ...args) => {
    return request(prepare(jsonTestRequestConfig, requestData), ...args);
};
jsonTest.requestConfig = jsonTestRequestConfig;
/* prettier-ignore-end */
"
`;

exports[`Generator 生成 JavaScript 代码: 请求文件 1`] = `
"export default function request(payload, options = {
    server: 'prod',
}) {
    return new Promise((resolve, reject) => {
        // 基本地址
        const baseUrl = options.server === 'mock'
            ? payload.mockUrl
            : options.server === 'dev'
                ? payload.devUrl
                : payload.prodUrl;
        // 请求地址
        const url = \`\${baseUrl}\${payload.path}\`;
        // 具体请求逻辑
    });
}
"
`;

exports[`Generator 生成 JavaScript 代码: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_1 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_1 = \\"\\" as any
const prodUrl_0_0_0_1 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_1 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deleteMethodTest\\",
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (
  requestData: DeleteMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeleteMethodTestResponse>(
    prepare(deleteMethodTestRequestConfig, requestData),
    ...args,
  )
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/getMethod_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"getMethodTest\\",
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (
  requestData: GetMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<GetMethodTestResponse>(
    prepare(getMethodTestRequestConfig, requestData),
    ...args,
  )
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/json5Response_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5ResponseTest\\",
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (
  requestData?: Json5ResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5ResponseTestResponse>(
    prepare(json5ResponseTestRequestConfig, requestData),
    ...args,
  )
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/json5Request_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5RequestTest\\",
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (
  requestData: Json5RequestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5RequestTestResponse>(
    prepare(json5RequestTestRequestConfig, requestData),
    ...args,
  )
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/postMethod_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"postMethodTest\\",
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (
  requestData: PostMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PostMethodTestResponse>(
    prepare(postMethodTestRequestConfig, requestData),
    ...args,
  )
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/putMethod_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"putMethodTest\\",
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (
  requestData: PutMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PutMethodTestResponse>(
    prepare(putMethodTestRequestConfig, requestData),
    ...args,
  )
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"dataKeyExampleTest\\",
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (
  requestData: DataKeyExampleTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DataKeyExampleTestResponse>(
    prepare(dataKeyExampleTestRequestConfig, requestData),
    ...args,
  )
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/upload_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"uploadTest\\",
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (
  requestData: UploadTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<UploadTestResponse>(
    prepare(uploadTestRequestConfig, requestData),
    ...args,
  )
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/noResponseData_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"noResponseDataTest\\",
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (
  requestData?: NoResponseDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<NoResponseDataTestResponse>(
    prepare(noResponseDataTestRequestConfig, requestData),
    ...args,
  )
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/emptyResponse_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"emptyResponseTest\\",
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (
  requestData?: EmptyResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<EmptyResponseTestResponse>(
    prepare(emptyResponseTestRequestConfig, requestData),
    ...args,
  )
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihiTest\\",
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (
  requestData: HihihiTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HihihiTestResponse>(
    prepare(hihihiTestRequestConfig, requestData),
    ...args,
  )
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihi_1608478638207Test\\",
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(
    prepare(hihihi_1608478638207TestRequestConfig, requestData),
    ...args,
  )
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/rawResponse_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"rawResponseTest\\",
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (
  requestData?: RawResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<RawResponseTestResponse>(
    prepare(rawResponseTestRequestConfig, requestData),
    ...args,
  )
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/headers_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/headers_test\\",
  method: Method.GET,
  requestHeaders: {\\"Authorization\\":\\"dddddd\\",\\"Cookie\\":\\"x=1\\"},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"headersTest\\",
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (
  requestData?: HeadersTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HeadersTestResponse>(
    prepare(headersTestRequestConfig, requestData),
    ...args,
  )
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number;
  /**
   * 格式
   */
  format: string;
  /**
   * ID
   */
  id: number;
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/user/:id/avatar_test\\",
  undefined,
  'id',
  'size' | 'format',
  false
>>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/user/:id/avatar_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [\\"id\\"],
  queryNames: [\\"size\\",\\"format\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"avatarTest\\",
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (
  requestData: AvatarTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<AvatarTestResponse>(
    prepare(avatarTestRequestConfig, requestData),
    ...args,
  )
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number;
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string;
    };
  };
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKey/deep_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/dataKey/deep_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deepTest\\",
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (
  requestData?: DeepTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeepTestResponse>(
    prepare(deepTestRequestConfig, requestData),
    ...args,
  )
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string;
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get/only_post_form_data_test\\",
  undefined,
  string,
  'query_id',
  false
>>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: \\"/__hello__/get/only_post_form_data_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [\\"query_id\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"onlyPostFormDataTest\\",
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (
  requestData: OnlyPostFormDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<OnlyPostFormDataTestResponse>(
    prepare(onlyPostFormDataTestRequestConfig, requestData),
    ...args,
  )
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig",
  "const mockUrl_0_0_0_2 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_2 = \\"\\" as any
const prodUrl_0_0_0_2 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_2 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export interface Get2TestRequest {}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export interface Get2TestResponse {
  msg: string;
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
type Get2TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get2_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
const get2TestRequestConfig: Get2TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: \\"/__hello__/get2_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"get2Test\\",
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2_test\`
 * @更新时间 1610557430
 */
export const get2Test = (
  requestData?: Get2TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Get2TestResponse>(
    prepare(get2TestRequestConfig, requestData),
    ...args,
  )
}

get2Test.requestConfig = get2TestRequestConfig",
  "const mockUrl_0_0_0_3 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_3 = \\"\\" as any
const prodUrl_0_0_0_3 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_3 = undefined as any

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
export interface Picture_3dDetailTestRequest {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
export interface Picture_3dDetailTestResponse {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
type Picture_3dDetailTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/issue-17/picture_3d_detail_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
const picture_3dDetailTestRequestConfig: Picture_3dDetailTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: \\"/__hello__/issue-17/picture_3d_detail_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"picture_3dDetailTest\\",
}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail_test\`
 * @更新时间 1610557430
 */
export const picture_3dDetailTest = (
  requestData?: Picture_3dDetailTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Picture_3dDetailTestResponse>(
    prepare(picture_3dDetailTestRequestConfig, requestData),
    ...args,
  )
}

picture_3dDetailTest.requestConfig = picture_3dDetailTestRequestConfig

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
export interface GetTestRequest {
  a: string;
  b: string;
  c: string;
  'd    e': string;
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
export interface GetTestResponse {}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
type GetTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/28/get_test\\",
  undefined,
  string,
  '   a' | ' b' | 'c ' | '    d    e   ',
  false
>>

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
const getTestRequestConfig: GetTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: \\"/__hello__/28/get_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  queryNames: [\\"   a\\",\\" b\\",\\"c \\",\\"    d    e   \\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"getTest\\",
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get_test\`
 * @更新时间 1610557430
 */
export const getTest = (
  requestData: GetTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<GetTestResponse>(
    prepare(getTestRequestConfig, requestData),
    ...args,
  )
}

getTest.requestConfig = getTestRequestConfig

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
export interface FormTestRequest {
  a: string;
  b: string;
  c: string;
  'd   e': string;
  'd    e': string;
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
export interface FormTestResponse {}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
type FormTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/28/post/form_test\\",
  undefined,
  string,
  '   a' | ' b' | 'c ' | '    d    e   ',
  false
>>

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
const formTestRequestConfig: FormTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: \\"/__hello__/28/post/form_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  queryNames: [\\"   a\\",\\" b\\",\\"c \\",\\"    d    e   \\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"formTest\\",
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form_test\`
 * @更新时间 1610557431
 */
export const formTest = (
  requestData: FormTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<FormTestResponse>(
    prepare(formTestRequestConfig, requestData),
    ...args,
  )
}

formTest.requestConfig = formTestRequestConfig

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
export interface JsonTestRequest {
  a: string;
  b: string;
  'c   d': string;
  e: {
    f: string;
  };
  c: string;
  'd    e': string;
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
export interface JsonTestResponse {
  a?: number;
  b?: string;
  c?: {
    d?: string;
  };
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
type JsonTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/28/post/json_test\\",
  undefined,
  string,
  '   a' | ' b' | 'c ' | '    d    e   ',
  false
>>

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
const jsonTestRequestConfig: JsonTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: \\"/__hello__/28/post/json_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  queryNames: [\\"   a\\",\\" b\\",\\"c \\",\\"    d    e   \\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"jsonTest\\",
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json_test\`
 * @更新时间 1610557431
 */
export const jsonTest = (
  requestData: JsonTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<JsonTestResponse>(
    prepare(jsonTestRequestConfig, requestData),
    ...args,
  )
}

jsonTest.requestConfig = jsonTestRequestConfig",
]
`;

exports[`Generator 生成 React Hooks 代码: Hook 生成文件 1`] = `
"import { useState, useEffect } from 'react'
import { RequestConfig } from 'yapi-to-typescript'
import { Request } from \\"./index\\"
import baseRequest from \\"./request\\"

export default function makeRequestHook<TRequestData, TRequestConfig extends RequestConfig, TRequestResult extends ReturnType<typeof baseRequest>>(request: Request<TRequestData, TRequestConfig, TRequestResult>) {
  type Data = TRequestResult extends Promise<infer R> ? R : TRequestResult
  return function useRequest(requestData: TRequestData) {
    // 一个简单的 Hook 实现，实际项目可结合其他库使用，比如：
    // @umijs/hooks 的 useRequest (https://github.com/umijs/hooks)
    // swr (https://github.com/zeit/swr)

    const [loading, setLoading] = useState(true)
    const [data, setData] = useState<Data>()

    useEffect(() => {
      request(requestData).then(data => {
        setLoading(false)
        setData(data as any)
      })
    }, [JSON.stringify(requestData)])

    return {
      loading,
      data,
    }
  }
}"
`;

exports[`Generator 生成 React Hooks 代码: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'
// @ts-ignore
import makeRequestHook from './makeRequestHook'

type UserRequestRestArgs = RequestFunctionRestArgs<typeof request>

// Request: 目前 React Hooks 功能有用到
export type Request<
  TRequestData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/deleteMethod_test',
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deleteMethodTest',
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (requestData: DeleteMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeleteMethodTestResponse>(prepare(deleteMethodTestRequestConfig, requestData), ...args)
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const useDeleteMethodTest = makeRequestHook<
  DeleteMethodTestRequest,
  DeleteMethodTestRequestConfig,
  ReturnType<typeof deleteMethodTest>
>(deleteMethodTest)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/getMethod_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'getMethodTest',
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (requestData: GetMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<GetMethodTestResponse>(prepare(getMethodTestRequestConfig, requestData), ...args)
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const useGetMethodTest = makeRequestHook<
  GetMethodTestRequest,
  GetMethodTestRequestConfig,
  ReturnType<typeof getMethodTest>
>(getMethodTest)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Response_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5ResponseTest',
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (requestData?: Json5ResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5ResponseTestResponse>(prepare(json5ResponseTestRequestConfig, requestData), ...args)
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const useJson5ResponseTest = makeRequestHook<
  Json5ResponseTestRequest,
  Json5ResponseTestRequestConfig,
  ReturnType<typeof json5ResponseTest>
>(json5ResponseTest)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Request_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5RequestTest',
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (requestData: Json5RequestTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5RequestTestResponse>(prepare(json5RequestTestRequestConfig, requestData), ...args)
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const useJson5RequestTest = makeRequestHook<
  Json5RequestTestRequest,
  Json5RequestTestRequestConfig,
  ReturnType<typeof json5RequestTest>
>(json5RequestTest)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/postMethod_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'postMethodTest',
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (requestData: PostMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PostMethodTestResponse>(prepare(postMethodTestRequestConfig, requestData), ...args)
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const usePostMethodTest = makeRequestHook<
  PostMethodTestRequest,
  PostMethodTestRequestConfig,
  ReturnType<typeof postMethodTest>
>(postMethodTest)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/putMethod_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'putMethodTest',
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (requestData: PutMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PutMethodTestResponse>(prepare(putMethodTestRequestConfig, requestData), ...args)
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const usePutMethodTest = makeRequestHook<
  PutMethodTestRequest,
  PutMethodTestRequestConfig,
  ReturnType<typeof putMethodTest>
>(putMethodTest)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKeyExample_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'dataKeyExampleTest',
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (requestData: DataKeyExampleTestRequest, ...args: UserRequestRestArgs) => {
  return request<DataKeyExampleTestResponse>(prepare(dataKeyExampleTestRequestConfig, requestData), ...args)
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const useDataKeyExampleTest = makeRequestHook<
  DataKeyExampleTestRequest,
  DataKeyExampleTestRequestConfig,
  ReturnType<typeof dataKeyExampleTest>
>(dataKeyExampleTest)

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/upload_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'uploadTest',
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (requestData: UploadTestRequest, ...args: UserRequestRestArgs) => {
  return request<UploadTestResponse>(prepare(uploadTestRequestConfig, requestData), ...args)
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const useUploadTest = makeRequestHook<UploadTestRequest, UploadTestRequestConfig, ReturnType<typeof uploadTest>>(
  uploadTest,
)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const useTestTest = makeRequestHook<TestTestRequest, TestTestRequestConfig, ReturnType<typeof testTest>>(
  testTest,
)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/noResponseData_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'noResponseDataTest',
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (requestData?: NoResponseDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<NoResponseDataTestResponse>(prepare(noResponseDataTestRequestConfig, requestData), ...args)
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const useNoResponseDataTest = makeRequestHook<
  NoResponseDataTestRequest,
  NoResponseDataTestRequestConfig,
  ReturnType<typeof noResponseDataTest>
>(noResponseDataTest)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/emptyResponse_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'emptyResponseTest',
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (requestData?: EmptyResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<EmptyResponseTestResponse>(prepare(emptyResponseTestRequestConfig, requestData), ...args)
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const useEmptyResponseTest = makeRequestHook<
  EmptyResponseTestRequest,
  EmptyResponseTestRequestConfig,
  ReturnType<typeof emptyResponseTest>
>(emptyResponseTest)

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const useTestTest = makeRequestHook<TestTestRequest, TestTestRequestConfig, ReturnType<typeof testTest>>(
  testTest,
)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihiTest',
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (requestData: HihihiTestRequest, ...args: UserRequestRestArgs) => {
  return request<HihihiTestResponse>(prepare(hihihiTestRequestConfig, requestData), ...args)
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const useHihihiTest = makeRequestHook<HihihiTestRequest, HihihiTestRequestConfig, ReturnType<typeof hihihiTest>>(
  hihihiTest,
)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihi_1608478638207Test',
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(prepare(hihihi_1608478638207TestRequestConfig, requestData), ...args)
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const useHihihi_1608478638207Test = makeRequestHook<
  Hihihi_1608478638207TestRequest,
  Hihihi_1608478638207TestRequestConfig,
  ReturnType<typeof hihihi_1608478638207Test>
>(hihihi_1608478638207Test)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/rawResponse_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'rawResponseTest',
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (requestData?: RawResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<RawResponseTestResponse>(prepare(rawResponseTestRequestConfig, requestData), ...args)
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const useRawResponseTest = makeRequestHook<
  RawResponseTestRequest,
  RawResponseTestRequestConfig,
  ReturnType<typeof rawResponseTest>
>(rawResponseTest)

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/headers_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/headers_test',
  method: Method.GET,
  requestHeaders: {Authorization: 'dddddd', Cookie: 'x=1'},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'headersTest',
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (requestData?: HeadersTestRequest, ...args: UserRequestRestArgs) => {
  return request<HeadersTestResponse>(prepare(headersTestRequestConfig, requestData), ...args)
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const useHeadersTest = makeRequestHook<
  HeadersTestRequest,
  HeadersTestRequestConfig,
  ReturnType<typeof headersTest>
>(headersTest)

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number
  /**
   * 格式
   */
  format: string
  /**
   * ID
   */
  id: number
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/user/:id/avatar_test',
    undefined,
    'id',
    'size' | 'format',
    false
  >
>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/user/:id/avatar_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id'],
  queryNames: ['size', 'format'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'avatarTest',
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (requestData: AvatarTestRequest, ...args: UserRequestRestArgs) => {
  return request<AvatarTestResponse>(prepare(avatarTestRequestConfig, requestData), ...args)
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const useAvatarTest = makeRequestHook<AvatarTestRequest, AvatarTestRequestConfig, ReturnType<typeof avatarTest>>(
  avatarTest,
)

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string
    }
  }
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKey/deep_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKey/deep_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deepTest',
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (requestData?: DeepTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeepTestResponse>(prepare(deepTestRequestConfig, requestData), ...args)
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const useDeepTest = makeRequestHook<DeepTestRequest, DeepTestRequestConfig, ReturnType<typeof deepTest>>(
  deepTest,
)

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/get/only_post_form_data_test',
    undefined,
    string,
    'query_id',
    false
  >
>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/get/only_post_form_data_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['query_id'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'onlyPostFormDataTest',
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (requestData: OnlyPostFormDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<OnlyPostFormDataTestResponse>(prepare(onlyPostFormDataTestRequestConfig, requestData), ...args)
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const useOnlyPostFormDataTest = makeRequestHook<
  OnlyPostFormDataTestRequest,
  OnlyPostFormDataTestRequestConfig,
  ReturnType<typeof onlyPostFormDataTest>
>(onlyPostFormDataTest)

/* prettier-ignore-end */
"
`;

exports[`Generator 生成 React Hooks 代码: 请求文件 1`] = `
"import { RequestFunctionParams } from 'yapi-to-typescript'

export interface RequestOptions {
  /**
   * 使用的服务器。
   *
   * - \`prod\`: 生产服务器
   * - \`dev\`: 测试服务器
   * - \`mock\`: 模拟服务器
   *
   * @default prod
   */
  server?: 'prod' | 'dev' | 'mock',
}

export default function request<TResponseData>(
  payload: RequestFunctionParams,
  options: RequestOptions = {
    server: 'prod',
  },
): Promise<TResponseData> {
  return new Promise<TResponseData>((resolve, reject) => {
    // 基本地址
    const baseUrl = options.server === 'mock'
      ? payload.mockUrl
      : options.server === 'dev'
        ? payload.devUrl
        : payload.prodUrl

    // 请求地址
    const url = \`\${baseUrl}\${payload.path}\`

    // 具体请求逻辑
  })
}"
`;

exports[`Generator 生成 React Hooks 代码: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deleteMethodTest\\",
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (
  requestData: DeleteMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeleteMethodTestResponse>(
    prepare(deleteMethodTestRequestConfig, requestData),
    ...args,
  )
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const useDeleteMethodTest = makeRequestHook<DeleteMethodTestRequest, DeleteMethodTestRequestConfig, ReturnType<typeof deleteMethodTest>>(deleteMethodTest)

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/getMethod_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"getMethodTest\\",
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (
  requestData: GetMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<GetMethodTestResponse>(
    prepare(getMethodTestRequestConfig, requestData),
    ...args,
  )
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const useGetMethodTest = makeRequestHook<GetMethodTestRequest, GetMethodTestRequestConfig, ReturnType<typeof getMethodTest>>(getMethodTest)

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Response_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5ResponseTest\\",
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (
  requestData?: Json5ResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5ResponseTestResponse>(
    prepare(json5ResponseTestRequestConfig, requestData),
    ...args,
  )
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const useJson5ResponseTest = makeRequestHook<Json5ResponseTestRequest, Json5ResponseTestRequestConfig, ReturnType<typeof json5ResponseTest>>(json5ResponseTest)

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Request_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5RequestTest\\",
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (
  requestData: Json5RequestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5RequestTestResponse>(
    prepare(json5RequestTestRequestConfig, requestData),
    ...args,
  )
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const useJson5RequestTest = makeRequestHook<Json5RequestTestRequest, Json5RequestTestRequestConfig, ReturnType<typeof json5RequestTest>>(json5RequestTest)

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/postMethod_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"postMethodTest\\",
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (
  requestData: PostMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PostMethodTestResponse>(
    prepare(postMethodTestRequestConfig, requestData),
    ...args,
  )
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const usePostMethodTest = makeRequestHook<PostMethodTestRequest, PostMethodTestRequestConfig, ReturnType<typeof postMethodTest>>(postMethodTest)

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/putMethod_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"putMethodTest\\",
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (
  requestData: PutMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PutMethodTestResponse>(
    prepare(putMethodTestRequestConfig, requestData),
    ...args,
  )
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const usePutMethodTest = makeRequestHook<PutMethodTestRequest, PutMethodTestRequestConfig, ReturnType<typeof putMethodTest>>(putMethodTest)

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"dataKeyExampleTest\\",
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (
  requestData: DataKeyExampleTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DataKeyExampleTestResponse>(
    prepare(dataKeyExampleTestRequestConfig, requestData),
    ...args,
  )
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const useDataKeyExampleTest = makeRequestHook<DataKeyExampleTestRequest, DataKeyExampleTestRequestConfig, ReturnType<typeof dataKeyExampleTest>>(dataKeyExampleTest)

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/upload_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"uploadTest\\",
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (
  requestData: UploadTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<UploadTestResponse>(
    prepare(uploadTestRequestConfig, requestData),
    ...args,
  )
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const useUploadTest = makeRequestHook<UploadTestRequest, UploadTestRequestConfig, ReturnType<typeof uploadTest>>(uploadTest)

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const useTestTest = makeRequestHook<TestTestRequest, TestTestRequestConfig, ReturnType<typeof testTest>>(testTest)

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/noResponseData_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"noResponseDataTest\\",
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (
  requestData?: NoResponseDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<NoResponseDataTestResponse>(
    prepare(noResponseDataTestRequestConfig, requestData),
    ...args,
  )
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const useNoResponseDataTest = makeRequestHook<NoResponseDataTestRequest, NoResponseDataTestRequestConfig, ReturnType<typeof noResponseDataTest>>(noResponseDataTest)

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/emptyResponse_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"emptyResponseTest\\",
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (
  requestData?: EmptyResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<EmptyResponseTestResponse>(
    prepare(emptyResponseTestRequestConfig, requestData),
    ...args,
  )
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const useEmptyResponseTest = makeRequestHook<EmptyResponseTestRequest, EmptyResponseTestRequestConfig, ReturnType<typeof emptyResponseTest>>(emptyResponseTest)

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const useTestTest = makeRequestHook<TestTestRequest, TestTestRequestConfig, ReturnType<typeof testTest>>(testTest)

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihiTest\\",
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (
  requestData: HihihiTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HihihiTestResponse>(
    prepare(hihihiTestRequestConfig, requestData),
    ...args,
  )
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const useHihihiTest = makeRequestHook<HihihiTestRequest, HihihiTestRequestConfig, ReturnType<typeof hihihiTest>>(hihihiTest)

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihi_1608478638207Test\\",
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(
    prepare(hihihi_1608478638207TestRequestConfig, requestData),
    ...args,
  )
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const useHihihi_1608478638207Test = makeRequestHook<Hihihi_1608478638207TestRequest, Hihihi_1608478638207TestRequestConfig, ReturnType<typeof hihihi_1608478638207Test>>(hihihi_1608478638207Test)

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/rawResponse_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"rawResponseTest\\",
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (
  requestData?: RawResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<RawResponseTestResponse>(
    prepare(rawResponseTestRequestConfig, requestData),
    ...args,
  )
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const useRawResponseTest = makeRequestHook<RawResponseTestRequest, RawResponseTestRequestConfig, ReturnType<typeof rawResponseTest>>(rawResponseTest)

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/headers_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/headers_test\\",
  method: Method.GET,
  requestHeaders: {\\"Authorization\\":\\"dddddd\\",\\"Cookie\\":\\"x=1\\"},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"headersTest\\",
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (
  requestData?: HeadersTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HeadersTestResponse>(
    prepare(headersTestRequestConfig, requestData),
    ...args,
  )
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const useHeadersTest = makeRequestHook<HeadersTestRequest, HeadersTestRequestConfig, ReturnType<typeof headersTest>>(headersTest)

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number;
  /**
   * 格式
   */
  format: string;
  /**
   * ID
   */
  id: number;
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/user/:id/avatar_test\\",
  undefined,
  'id',
  'size' | 'format',
  false
>>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/user/:id/avatar_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\"],
  queryNames: [\\"size\\",\\"format\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"avatarTest\\",
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (
  requestData: AvatarTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<AvatarTestResponse>(
    prepare(avatarTestRequestConfig, requestData),
    ...args,
  )
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const useAvatarTest = makeRequestHook<AvatarTestRequest, AvatarTestRequestConfig, ReturnType<typeof avatarTest>>(avatarTest)

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number;
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string;
    };
  };
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKey/deep_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKey/deep_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"deepTest\\",
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (
  requestData?: DeepTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeepTestResponse>(
    prepare(deepTestRequestConfig, requestData),
    ...args,
  )
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const useDeepTest = makeRequestHook<DeepTestRequest, DeepTestRequestConfig, ReturnType<typeof deepTest>>(deepTest)

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string;
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get/only_post_form_data_test\\",
  undefined,
  string,
  'query_id',
  false
>>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/get/only_post_form_data_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"query_id\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: \\"onlyPostFormDataTest\\",
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (
  requestData: OnlyPostFormDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<OnlyPostFormDataTestResponse>(
    prepare(onlyPostFormDataTestRequestConfig, requestData),
    ...args,
  )
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **React Hook**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const useOnlyPostFormDataTest = makeRequestHook<OnlyPostFormDataTestRequest, OnlyPostFormDataTestRequestConfig, ReturnType<typeof onlyPostFormDataTest>>(onlyPostFormDataTest)",
]
`;

exports[`Generator 生成请求数据和返回数据的 JSON Schema: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

type UserRequestRestArgs = RequestFunctionRestArgs<typeof request>

// Request: 目前 React Hooks 功能有用到
export type Request<
  TRequestData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_0 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_0 = '' as any
const prodUrl_0_0_0_0 = 'http://prod.com/' as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/deleteMethod_test',
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {id: {type: 'string', description: 'ID'}},
    required: ['id'],
    additionalProperties: false,
  },
  responseDataJsonSchema: {type: 'object', properties: {}, additionalProperties: false},
  requestFunctionName: 'deleteMethodTest',
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (requestData: DeleteMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeleteMethodTestResponse>(prepare(deleteMethodTestRequestConfig, requestData), ...args)
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/getMethod_test',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/getMethod_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['x'],
    properties: {x: {type: 'string', description: 'X 值'}, y: {type: 'string', description: 'Y 值'}},
    additionalProperties: false,
  },
  responseDataJsonSchema: {
    type: 'object',
    properties: {result: {type: 'number', description: '结果'}},
    required: ['result'],
    additionalProperties: false,
  },
  requestFunctionName: 'getMethodTest',
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (requestData: GetMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<GetMethodTestResponse>(prepare(getMethodTestRequestConfig, requestData), ...args)
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Response_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Response_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {
    template: {id: 1, age: '@float', name: '@name'},
    type: 'object',
    rule: {},
    path: ['ROOT'],
    properties: {
      id: {name: 'id', template: 1, type: 'number', rule: {}, path: ['ROOT', 'id']},
      age: {name: 'age', template: '@float', type: 'string', rule: {}, path: ['ROOT', 'age']},
      name: {name: 'name', template: '@name', type: 'string', rule: {}, path: ['ROOT', 'name']},
    },
    additionalProperties: false,
  },
  requestFunctionName: 'json5ResponseTest',
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (requestData?: Json5ResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5ResponseTestResponse>(prepare(json5ResponseTestRequestConfig, requestData), ...args)
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Request_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/json5Request_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {
      id: {type: 'integer', description: '1'},
      name: {type: 'string', description: '\\"方剑成\\"'},
      likes: {type: 'array', items: {type: 'string', description: '\\"photo\\"'}, description: '[\\"photo\\",2]', minItems: 0},
      nest: {
        type: 'object',
        properties: {
          x: {type: 'integer', description: '1'},
          y: {type: 'object', properties: {z: {type: 'string', description: '\\"2\\"'}}, additionalProperties: false},
        },
        additionalProperties: false,
      },
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
  requestFunctionName: 'json5RequestTest',
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (requestData: Json5RequestTestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5RequestTestResponse>(prepare(json5RequestTestRequestConfig, requestData), ...args)
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/postMethod_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/postMethod_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {
      page: {type: 'number', description: '页码'},
      limit: {type: 'number', description: '每页数量'},
      keyword: {type: 'string', description: '关键词'},
    },
    required: ['page', 'limit'],
    additionalProperties: false,
  },
  responseDataJsonSchema: {
    type: 'object',
    properties: {
      list: {
        type: 'array',
        items: {
          type: 'object',
          properties: {name: {type: 'string', description: '姓名'}},
          required: ['name'],
          additionalProperties: false,
        },
        description: '列表',
        minItems: 0,
      },
    },
    required: ['list'],
    additionalProperties: false,
  },
  requestFunctionName: 'postMethodTest',
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (requestData: PostMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PostMethodTestResponse>(prepare(postMethodTestRequestConfig, requestData), ...args)
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/putMethod_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/putMethod_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['x', 'id'],
    properties: {
      x: {type: 'string', description: 'X 值'},
      id: {type: 'string', description: ''},
      namre: {type: 'string', description: ''},
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {
    type: 'object',
    properties: {
      err: {type: 'number', description: '错误'},
      msg: {type: 'string', description: '错误详情'},
      data: {type: 'object', properties: {}, description: '数据', additionalProperties: false},
    },
    required: ['err', 'msg'],
    additionalProperties: false,
  },
  requestFunctionName: 'putMethodTest',
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (requestData: PutMethodTestRequest, ...args: UserRequestRestArgs) => {
  return request<PutMethodTestResponse>(prepare(putMethodTestRequestConfig, requestData), ...args)
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKeyExample_test',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKeyExample_test',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['x', 'id'],
    properties: {
      x: {type: 'string', description: 'X 值'},
      id: {type: 'string', description: ''},
      namre: {type: 'string', description: ''},
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {
    type: 'object',
    properties: {
      err: {type: 'number', description: '错误'},
      msg: {type: 'string', description: '错误详情'},
      data: {
        type: 'object',
        properties: {success: {type: 'boolean', description: '成功啦'}},
        description: '数据',
        required: ['success'],
        additionalProperties: false,
      },
    },
    required: ['err', 'msg'],
    additionalProperties: false,
  },
  requestFunctionName: 'dataKeyExampleTest',
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (requestData: DataKeyExampleTestRequest, ...args: UserRequestRestArgs) => {
  return request<DataKeyExampleTestResponse>(prepare(dataKeyExampleTestRequestConfig, requestData), ...args)
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/upload_test',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/upload_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['file', 'name'],
    properties: {
      file: {type: 'file', description: '文件', tsType: 'FileData'},
      name: {type: 'string', description: '名称'},
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {type: 'object', properties: {}, additionalProperties: false},
  requestFunctionName: 'uploadTest',
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (requestData: UploadTestRequest, ...args: UserRequestRestArgs) => {
  return request<UploadTestResponse>(prepare(uploadTestRequestConfig, requestData), ...args)
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test_test',
    undefined,
    string,
    'cid',
    false
  >
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {
      K1: {type: 'string', description: '键1'},
      K2: {type: 'number', description: '键2'},
      cid: {type: 'string', description: 'cid'},
    },
    required: ['K1', 'cid'],
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/noResponseData_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/noResponseData_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
  requestFunctionName: 'noResponseDataTest',
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (requestData?: NoResponseDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<NoResponseDataTestResponse>(prepare(noResponseDataTestRequestConfig, requestData), ...args)
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/emptyResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/emptyResponse_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {type: 'object', required: [], properties: {}, additionalProperties: false},
  responseDataJsonSchema: {type: 'object', properties: {}, additionalProperties: false},
  requestFunctionName: 'emptyResponseTest',
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (requestData?: EmptyResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<EmptyResponseTestResponse>(prepare(emptyResponseTestRequestConfig, requestData), ...args)
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['id', 'name', 'pass', 'test', 'avatar'],
    properties: {
      id: {type: 'string', description: '23'},
      name: {type: 'string', description: ''},
      pass: {type: 'string', description: ''},
      test: {type: 'string', description: ''},
      avatar: {type: 'string', description: ''},
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
  requestFunctionName: 'testTest',
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (requestData: TestTestRequest, ...args: UserRequestRestArgs) => {
  return request<TestTestResponse>(prepare(testTestRequestConfig, requestData), ...args)
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_test',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {
      K1: {type: 'string', description: '键1'},
      K2: {type: 'number', description: '键2'},
      hihihi: {type: 'string', description: '嗨咯'},
      id: {type: 'string', description: 'ID'},
    },
    required: ['K1', 'hihihi', 'id'],
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihiTest',
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (requestData: HihihiTestRequest, ...args: UserRequestRestArgs) => {
  return request<HihihiTestResponse>(prepare(hihihiTestRequestConfig, requestData), ...args)
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_1608478638207_test',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/test/{id}/:hihihi_1608478638207_test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    properties: {
      K1: {type: 'string', description: '键1'},
      K2: {type: 'number', description: '键2'},
      query: {type: 'string', description: '22222'},
      hihihi: {type: 'string', description: '嗨咯'},
      id: {type: 'string', description: 'ID'},
      hihihi_1608478638207: {type: 'string', description: ''},
    },
    required: ['K1', 'hihihi', 'id', 'hihihi_1608478638207'],
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihi_1608478638207Test',
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(prepare(hihihi_1608478638207TestRequestConfig, requestData), ...args)
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/rawResponse_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/rawResponse_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
  requestFunctionName: 'rawResponseTest',
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (requestData?: RawResponseTestRequest, ...args: UserRequestRestArgs) => {
  return request<RawResponseTestResponse>(prepare(rawResponseTestRequestConfig, requestData), ...args)
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/headers_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/headers_test',
  method: Method.GET,
  requestHeaders: {Authorization: 'dddddd', Cookie: 'x=1'},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {type: 'object', properties: {}, additionalProperties: false},
  requestFunctionName: 'headersTest',
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (requestData?: HeadersTestRequest, ...args: UserRequestRestArgs) => {
  return request<HeadersTestResponse>(prepare(headersTestRequestConfig, requestData), ...args)
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number
  /**
   * 格式
   */
  format: string
  /**
   * ID
   */
  id: number
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/user/:id/avatar_test',
    undefined,
    'id',
    'size' | 'format',
    false
  >
>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/user/:id/avatar_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: ['id'],
  queryNames: ['size', 'format'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['size', 'format', 'id'],
    properties: {
      size: {type: 'number', description: '大小'},
      format: {type: 'string', description: '格式'},
      id: {type: 'number', description: 'ID'},
    },
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
  requestFunctionName: 'avatarTest',
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (requestData: AvatarTestRequest, ...args: UserRequestRestArgs) => {
  return request<AvatarTestResponse>(prepare(avatarTestRequestConfig, requestData), ...args)
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string
    }
  }
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKey/deep_test',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/dataKey/deep_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {
    $schema: 'http://json-schema.org/draft-04/schema#',
    type: 'object',
    properties: {
      err: {type: 'number'},
      container: {
        type: 'object',
        properties: {
          data: {
            type: 'object',
            properties: {realData: {type: 'string', description: '真数据'}},
            required: ['realData'],
            additionalProperties: false,
          },
        },
        required: ['data'],
        additionalProperties: false,
      },
    },
    required: ['err', 'container'],
    additionalProperties: false,
  },
  requestFunctionName: 'deepTest',
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (requestData?: DeepTestRequest, ...args: UserRequestRestArgs) => {
  return request<DeepTestResponse>(prepare(deepTestRequestConfig, requestData), ...args)
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/get/only_post_form_data_test',
    undefined,
    string,
    'query_id',
    false
  >
>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: '/__hello__/get/only_post_form_data_test',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: ['query_id'],
  requestDataOptional: false,
  requestDataJsonSchema: {
    type: 'object',
    required: ['query_id'],
    properties: {query_id: {type: 'string', description: 'id'}},
    additionalProperties: false,
  },
  responseDataJsonSchema: {},
  requestFunctionName: 'onlyPostFormDataTest',
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (requestData: OnlyPostFormDataTestRequest, ...args: UserRequestRestArgs) => {
  return request<OnlyPostFormDataTestResponse>(prepare(onlyPostFormDataTestRequestConfig, requestData), ...args)
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig

/* prettier-ignore-end */
"
`;

exports[`Generator 生成请求数据和返回数据的 JSON Schema: 输出内容 1`] = `
Array [
  "const mockUrl_0_0_0_0 = \\"http://foo.bar/mock/32\\" as any
const devUrl_0_0_0_0 = \\"\\" as any
const prodUrl_0_0_0_0 = \\"http://prod.com/\\" as any
const dataKey_0_0_0_0 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestRequest {
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export interface DeleteMethodTestResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
type DeleteMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/deleteMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
const deleteMethodTestRequestConfig: DeleteMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/deleteMethod_test\\",
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"ID\\"}},\\"required\\":[\\"id\\"],\\"additionalProperties\\":false},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{},\\"additionalProperties\\":false},
  requestFunctionName: \\"deleteMethodTest\\",
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod_test\`
 * @更新时间 1610557429
 */
export const deleteMethodTest = (
  requestData: DeleteMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeleteMethodTestResponse>(
    prepare(deleteMethodTestRequestConfig, requestData),
    ...args,
  )
}

deleteMethodTest.requestConfig = deleteMethodTestRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  /**
   * Y 值
   */
  y?: string;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export interface GetMethodTestResponse {
  /**
   * 结果
   */
  result: number;
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
type GetMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/getMethod_test\\",
  undefined,
  string,
  'x' | 'y',
  false
>>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
const getMethodTestRequestConfig: GetMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/getMethod_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"x\\",\\"y\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"x\\"],\\"properties\\":{\\"x\\":{\\"type\\":\\"string\\",\\"description\\":\\"X 值\\"},\\"y\\":{\\"type\\":\\"string\\",\\"description\\":\\"Y 值\\"}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"result\\":{\\"type\\":\\"number\\",\\"description\\":\\"结果\\"}},\\"required\\":[\\"result\\"],\\"additionalProperties\\":false},
  requestFunctionName: \\"getMethodTest\\",
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod_test\`
 * @更新时间 1610557429
 */
export const getMethodTest = (
  requestData: GetMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<GetMethodTestResponse>(
    prepare(getMethodTestRequestConfig, requestData),
    ...args,
  )
}

getMethodTest.requestConfig = getMethodTestRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export interface Json5ResponseTestResponse {
  id?: number;
  age?: string;
  name?: string;
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
type Json5ResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Response_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
const json5ResponseTestRequestConfig: Json5ResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Response_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {\\"template\\":{\\"id\\":1,\\"age\\":\\"@float\\",\\"name\\":\\"@name\\"},\\"type\\":\\"object\\",\\"rule\\":{},\\"path\\":[\\"ROOT\\"],\\"properties\\":{\\"id\\":{\\"name\\":\\"id\\",\\"template\\":1,\\"type\\":\\"number\\",\\"rule\\":{},\\"path\\":[\\"ROOT\\",\\"id\\"]},\\"age\\":{\\"name\\":\\"age\\",\\"template\\":\\"@float\\",\\"type\\":\\"string\\",\\"rule\\":{},\\"path\\":[\\"ROOT\\",\\"age\\"]},\\"name\\":{\\"name\\":\\"name\\",\\"template\\":\\"@name\\",\\"type\\":\\"string\\",\\"rule\\":{},\\"path\\":[\\"ROOT\\",\\"name\\"]}},\\"additionalProperties\\":false},
  requestFunctionName: \\"json5ResponseTest\\",
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response_test\`
 * @更新时间 1610557429
 */
export const json5ResponseTest = (
  requestData?: Json5ResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5ResponseTestResponse>(
    prepare(json5ResponseTestRequestConfig, requestData),
    ...args,
  )
}

json5ResponseTest.requestConfig = json5ResponseTestRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestRequest {
  /**
   * 1
   */
  id?: number;
  /**
   * \\"方剑成\\"
   */
  name?: string;
  /**
   * [\\"photo\\",2]
   */
  likes?: string[];
  nest?: {
    /**
     * 1
     */
    x?: number;
    y?: {
      /**
       * \\"2\\"
       */
      z?: string;
    };
  };
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export interface Json5RequestTestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
type Json5RequestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/json5Request_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
const json5RequestTestRequestConfig: Json5RequestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/json5Request_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"integer\\",\\"description\\":\\"1\\"},\\"name\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\\\\\"方剑成\\\\\\"\\"},\\"likes\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\\\\\"photo\\\\\\"\\"},\\"description\\":\\"[\\\\\\"photo\\\\\\",2]\\",\\"minItems\\":0},\\"nest\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"x\\":{\\"type\\":\\"integer\\",\\"description\\":\\"1\\"},\\"y\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"z\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\\\\\"2\\\\\\"\\"}},\\"additionalProperties\\":false}},\\"additionalProperties\\":false}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
  requestFunctionName: \\"json5RequestTest\\",
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request_test\`
 * @更新时间 1610557429
 */
export const json5RequestTest = (
  requestData: Json5RequestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Json5RequestTestResponse>(
    prepare(json5RequestTestRequestConfig, requestData),
    ...args,
  )
}

json5RequestTest.requestConfig = json5RequestTestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestRequest {
  /**
   * 页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 关键词
   */
  keyword?: string;
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export interface PostMethodTestResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string;
  }[];
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
type PostMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/postMethod_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
const postMethodTestRequestConfig: PostMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/postMethod_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"page\\":{\\"type\\":\\"number\\",\\"description\\":\\"页码\\"},\\"limit\\":{\\"type\\":\\"number\\",\\"description\\":\\"每页数量\\"},\\"keyword\\":{\\"type\\":\\"string\\",\\"description\\":\\"关键词\\"}},\\"required\\":[\\"page\\",\\"limit\\"],\\"additionalProperties\\":false},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"list\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"name\\":{\\"type\\":\\"string\\",\\"description\\":\\"姓名\\"}},\\"required\\":[\\"name\\"],\\"additionalProperties\\":false},\\"description\\":\\"列表\\",\\"minItems\\":0}},\\"required\\":[\\"list\\"],\\"additionalProperties\\":false},
  requestFunctionName: \\"postMethodTest\\",
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod_test\`
 * @更新时间 1610557429
 */
export const postMethodTest = (
  requestData: PostMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PostMethodTestResponse>(
    prepare(postMethodTestRequestConfig, requestData),
    ...args,
  )
}

postMethodTest.requestConfig = postMethodTestRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export interface PutMethodTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {};
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
type PutMethodTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/putMethod_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
const putMethodTestRequestConfig: PutMethodTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/putMethod_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"x\\",\\"id\\"],\\"properties\\":{\\"x\\":{\\"type\\":\\"string\\",\\"description\\":\\"X 值\\"},\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\"},\\"namre\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\"}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"err\\":{\\"type\\":\\"number\\",\\"description\\":\\"错误\\"},\\"msg\\":{\\"type\\":\\"string\\",\\"description\\":\\"错误详情\\"},\\"data\\":{\\"type\\":\\"object\\",\\"properties\\":{},\\"description\\":\\"数据\\",\\"additionalProperties\\":false}},\\"required\\":[\\"err\\",\\"msg\\"],\\"additionalProperties\\":false},
  requestFunctionName: \\"putMethodTest\\",
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod_test\`
 * @更新时间 1610557429
 */
export const putMethodTest = (
  requestData: PutMethodTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<PutMethodTestResponse>(
    prepare(putMethodTestRequestConfig, requestData),
    ...args,
  )
}

putMethodTest.requestConfig = putMethodTestRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestRequest {
  /**
   * X 值
   */
  x: string;
  id: string;
  namre?: string;
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleTestResponse {
  /**
   * 错误
   */
  err: number;
  /**
   * 错误详情
   */
  msg: string;
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean;
  };
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
type DataKeyExampleTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKeyExample_test\\",
  undefined,
  string,
  'id' | 'namre',
  false
>>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
const dataKeyExampleTestRequestConfig: DataKeyExampleTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKeyExample_test\\",
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"id\\",\\"namre\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"x\\",\\"id\\"],\\"properties\\":{\\"x\\":{\\"type\\":\\"string\\",\\"description\\":\\"X 值\\"},\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\"},\\"namre\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\"}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"err\\":{\\"type\\":\\"number\\",\\"description\\":\\"错误\\"},\\"msg\\":{\\"type\\":\\"string\\",\\"description\\":\\"错误详情\\"},\\"data\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"success\\":{\\"type\\":\\"boolean\\",\\"description\\":\\"成功啦\\"}},\\"description\\":\\"数据\\",\\"required\\":[\\"success\\"],\\"additionalProperties\\":false}},\\"required\\":[\\"err\\",\\"msg\\"],\\"additionalProperties\\":false},
  requestFunctionName: \\"dataKeyExampleTest\\",
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample_test\`
 * @更新时间 1610557430
 */
export const dataKeyExampleTest = (
  requestData: DataKeyExampleTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DataKeyExampleTestResponse>(
    prepare(dataKeyExampleTestRequestConfig, requestData),
    ...args,
  )
}

dataKeyExampleTest.requestConfig = dataKeyExampleTestRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestRequest {
  /**
   * 文件
   */
  file: FileData;
  /**
   * 名称
   */
  name: string;
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export interface UploadTestResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
type UploadTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/upload_test\\",
  undefined,
  string,
  string,
  false
>>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
const uploadTestRequestConfig: UploadTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/upload_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"file\\",\\"name\\"],\\"properties\\":{\\"file\\":{\\"type\\":\\"file\\",\\"description\\":\\"文件\\",\\"tsType\\":\\"FileData\\"},\\"name\\":{\\"type\\":\\"string\\",\\"description\\":\\"名称\\"}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{},\\"additionalProperties\\":false},
  requestFunctionName: \\"uploadTest\\",
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload_test\`
 * @更新时间 1610557430
 */
export const uploadTest = (
  requestData: UploadTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<UploadTestResponse>(
    prepare(uploadTestRequestConfig, requestData),
    ...args,
  )
}

uploadTest.requestConfig = uploadTestRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * cid
   */
  cid: string;
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test_test\\",
  undefined,
  string,
  'cid',
  false
>>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"cid\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"K1\\":{\\"type\\":\\"string\\",\\"description\\":\\"键1\\"},\\"K2\\":{\\"type\\":\\"number\\",\\"description\\":\\"键2\\"},\\"cid\\":{\\"type\\":\\"string\\",\\"description\\":\\"cid\\"}},\\"required\\":[\\"K1\\",\\"cid\\"],\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export interface NoResponseDataTestResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
type NoResponseDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/noResponseData_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
const noResponseDataTestRequestConfig: NoResponseDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/noResponseData_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
  requestFunctionName: \\"noResponseDataTest\\",
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData_test\`
 * @更新时间 1610557430
 */
export const noResponseDataTest = (
  requestData?: NoResponseDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<NoResponseDataTestResponse>(
    prepare(noResponseDataTestRequestConfig, requestData),
    ...args,
  )
}

noResponseDataTest.requestConfig = noResponseDataTestRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export interface EmptyResponseTestResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
type EmptyResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/emptyResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
const emptyResponseTestRequestConfig: EmptyResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/emptyResponse_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[],\\"properties\\":{},\\"additionalProperties\\":false},
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{},\\"additionalProperties\\":false},
  requestFunctionName: \\"emptyResponseTest\\",
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse_test\`
 * @更新时间 1610557430
 */
export const emptyResponseTest = (
  requestData?: EmptyResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<EmptyResponseTestResponse>(
    prepare(emptyResponseTestRequestConfig, requestData),
    ...args,
  )
}

emptyResponseTest.requestConfig = emptyResponseTestRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestRequest {
  /**
   * 23
   */
  id: string;
  name: string;
  pass: string;
  test: string;
  avatar: string;
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export interface TestTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
type TestTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  undefined,
  'id' | 'name' | 'pass' | 'test' | 'avatar',
  string,
  false
>>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
const testTestRequestConfig: TestTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"id\\",\\"name\\",\\"pass\\",\\"test\\",\\"avatar\\"],\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"23\\"},\\"name\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\"},\\"pass\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\"},\\"test\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\"},\\"avatar\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\"}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
  requestFunctionName: \\"testTest\\",
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test_test\`
 * @更新时间 1610557430
 */
export const testTest = (
  requestData: TestTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<TestTestResponse>(
    prepare(testTestRequestConfig, requestData),
    ...args,
  )
}

testTest.requestConfig = testTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export interface HihihiTestResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
type HihihiTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_test\\",
  undefined,
  'hihihi' | 'id',
  string,
  false
>>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
const hihihiTestRequestConfig: HihihiTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\"],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"K1\\":{\\"type\\":\\"string\\",\\"description\\":\\"键1\\"},\\"K2\\":{\\"type\\":\\"number\\",\\"description\\":\\"键2\\"},\\"hihihi\\":{\\"type\\":\\"string\\",\\"description\\":\\"嗨咯\\"},\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"ID\\"}},\\"required\\":[\\"K1\\",\\"hihihi\\",\\"id\\"],\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihiTest\\",
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_test\`
 * @更新时间 1610557430
 */
export const hihihiTest = (
  requestData: HihihiTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HihihiTestResponse>(
    prepare(hihihiTestRequestConfig, requestData),
    ...args,
  )
}

hihihiTest.requestConfig = hihihiTestRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestRequest {
  /**
   * 键1
   */
  K1: string;
  /**
   * 键2
   */
  K2?: number;
  /**
   * 22222
   */
  query?: string;
  /**
   * 嗨咯
   */
  hihihi: string;
  /**
   * ID
   */
  id: string;
  hihihi_1608478638207: string;
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207TestResponse {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207TestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  undefined,
  'hihihi' | 'id' | 'hihihi_1608478638207',
  'query',
  false
>>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207TestRequestConfig: Hihihi_1608478638207TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/test/{id}/:hihihi_1608478638207_test\\",
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],
  queryNames: [\\"query\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{\\"K1\\":{\\"type\\":\\"string\\",\\"description\\":\\"键1\\"},\\"K2\\":{\\"type\\":\\"number\\",\\"description\\":\\"键2\\"},\\"query\\":{\\"type\\":\\"string\\",\\"description\\":\\"22222\\"},\\"hihihi\\":{\\"type\\":\\"string\\",\\"description\\":\\"嗨咯\\"},\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"ID\\"},\\"hihihi_1608478638207\\":{\\"type\\":\\"string\\",\\"description\\":\\"\\"}},\\"required\\":[\\"K1\\",\\"hihihi\\",\\"id\\",\\"hihihi_1608478638207\\"],\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
  requestFunctionName: \\"hihihi_1608478638207Test\\",
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207_test\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207Test = (
  requestData: Hihihi_1608478638207TestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<Hihihi_1608478638207TestResponse>(
    prepare(hihihi_1608478638207TestRequestConfig, requestData),
    ...args,
  )
}

hihihi_1608478638207Test.requestConfig = hihihi_1608478638207TestRequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export interface RawResponseTestRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export type RawResponseTestResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
type RawResponseTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/rawResponse_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
const rawResponseTestRequestConfig: RawResponseTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/rawResponse_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {},
  requestFunctionName: \\"rawResponseTest\\",
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse_test\`
 * @更新时间 1610557430
 */
export const rawResponseTest = (
  requestData?: RawResponseTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<RawResponseTestResponse>(
    prepare(rawResponseTestRequestConfig, requestData),
    ...args,
  )
}

rawResponseTest.requestConfig = rawResponseTestRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export interface HeadersTestResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
type HeadersTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/headers_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
const headersTestRequestConfig: HeadersTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/headers_test\\",
  method: Method.GET,
  requestHeaders: {\\"Authorization\\":\\"dddddd\\",\\"Cookie\\":\\"x=1\\"},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {\\"type\\":\\"object\\",\\"properties\\":{},\\"additionalProperties\\":false},
  requestFunctionName: \\"headersTest\\",
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers_test\`
 * @更新时间 1619432971
 */
export const headersTest = (
  requestData?: HeadersTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HeadersTestResponse>(
    prepare(headersTestRequestConfig, requestData),
    ...args,
  )
}

headersTest.requestConfig = headersTestRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestRequest {
  /**
   * 大小
   */
  size: number;
  /**
   * 格式
   */
  format: string;
  /**
   * ID
   */
  id: number;
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export interface AvatarTestResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
type AvatarTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/user/:id/avatar_test\\",
  undefined,
  'id',
  'size' | 'format',
  false
>>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
const avatarTestRequestConfig: AvatarTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/user/:id/avatar_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [\\"id\\"],
  queryNames: [\\"size\\",\\"format\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"size\\",\\"format\\",\\"id\\"],\\"properties\\":{\\"size\\":{\\"type\\":\\"number\\",\\"description\\":\\"大小\\"},\\"format\\":{\\"type\\":\\"string\\",\\"description\\":\\"格式\\"},\\"id\\":{\\"type\\":\\"number\\",\\"description\\":\\"ID\\"}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
  requestFunctionName: \\"avatarTest\\",
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar_test\`
 * @更新时间 1621501310
 */
export const avatarTest = (
  requestData: AvatarTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<AvatarTestResponse>(
    prepare(avatarTestRequestConfig, requestData),
    ...args,
  )
}

avatarTest.requestConfig = avatarTestRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export interface DeepTestResponse {
  err: number;
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string;
    };
  };
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
type DeepTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/dataKey/deep_test\\",
  undefined,
  string,
  string,
  true
>>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
const deepTestRequestConfig: DeepTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/dataKey/deep_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: undefined,
  responseDataJsonSchema: {\\"$schema\\":\\"http://json-schema.org/draft-04/schema#\\",\\"type\\":\\"object\\",\\"properties\\":{\\"err\\":{\\"type\\":\\"number\\"},\\"container\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"data\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"realData\\":{\\"type\\":\\"string\\",\\"description\\":\\"真数据\\"}},\\"required\\":[\\"realData\\"],\\"additionalProperties\\":false}},\\"required\\":[\\"data\\"],\\"additionalProperties\\":false}},\\"required\\":[\\"err\\",\\"container\\"],\\"additionalProperties\\":false},
  requestFunctionName: \\"deepTest\\",
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep_test\`
 * @更新时间 1626489548
 */
export const deepTest = (
  requestData?: DeepTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<DeepTestResponse>(
    prepare(deepTestRequestConfig, requestData),
    ...args,
  )
}

deepTest.requestConfig = deepTestRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestRequest {
  /**
   * id
   */
  query_id: string;
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export interface OnlyPostFormDataTestResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
type OnlyPostFormDataTestRequestConfig = Readonly<RequestConfig<
  \\"http://foo.bar/mock/32\\",
  \\"\\",
  \\"http://prod.com/\\",
  \\"/__hello__/get/only_post_form_data_test\\",
  undefined,
  string,
  'query_id',
  false
>>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
const onlyPostFormDataTestRequestConfig: OnlyPostFormDataTestRequestConfig = {
  mockUrl: mockUrl_0_0_0_0,
  devUrl: devUrl_0_0_0_0,
  prodUrl: prodUrl_0_0_0_0,
  path: \\"/__hello__/get/only_post_form_data_test\\",
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_0,
  paramNames: [],
  queryNames: [\\"query_id\\"],
  requestDataOptional: false,
  requestDataJsonSchema: {\\"type\\":\\"object\\",\\"required\\":[\\"query_id\\"],\\"properties\\":{\\"query_id\\":{\\"type\\":\\"string\\",\\"description\\":\\"id\\"}},\\"additionalProperties\\":false},
  responseDataJsonSchema: {},
  requestFunctionName: \\"onlyPostFormDataTest\\",
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data_test\`
 * @更新时间 1632493928
 */
export const onlyPostFormDataTest = (
  requestData: OnlyPostFormDataTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<OnlyPostFormDataTestResponse>(
    prepare(onlyPostFormDataTestRequestConfig, requestData),
    ...args,
  )
}

onlyPostFormDataTest.requestConfig = onlyPostFormDataTestRequestConfig",
]
`;
