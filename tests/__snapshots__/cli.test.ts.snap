// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cli help: help 1`] = `
"
# 用法
  初始化配置文件: ytt init
  生成代码: ytt
  查看帮助: ytt help

# GitHub
  https://github.com/fjc0k/yapi-to-typescript
"
`;

exports[`cli 检查到已有配置，可以选择不覆盖: 不覆盖后的配置文件 1`] = `"hello"`;

exports[`cli 检查到已有配置，可以选择不覆盖: 修改过的配置文件 1`] = `"hello"`;

exports[`cli 检查到已有配置，可以选择不覆盖: 配置文件 1`] = `
"import { defineConfig } from 'yapi-to-typescript'

export default defineConfig([
  {
    serverUrl: 'http://foo.bar',
    typesOnly: false,
    target: 'typescript',
    reactHooks: {
      enabled: false,
    },
    prodEnvName: 'production',
    outputFilePath: 'src/api/index.ts',
    requestFunctionFilePath: 'src/api/request.ts',
    dataKey: 'data',
    projects: [
      {
        token: 'hello',
        categories: [
          {
            id: 0,
            getRequestFunctionName(interfaceInfo, changeCase) {
              // 以接口全路径生成请求函数名
              return changeCase.camelCase(interfaceInfo.path)

              // 若生成的请求函数名存在语法关键词报错、或想通过某个关键词触发 IDE 自动引入提示，可考虑加前缀，如:
              // return changeCase.camelCase(\`api_\${interfaceInfo.path}\`)

              // 若生成的请求函数名有重复报错，可考虑将接口请求方式纳入生成条件，如:
              // return changeCase.camelCase(\`\${interfaceInfo.method}_\${interfaceInfo.path}\`)
            },
          },
        ],
      },
    ],
  },
])"
`;

exports[`cli 检查到已有配置，可以选择覆盖: 修改过的配置文件 1`] = `"hello"`;

exports[`cli 检查到已有配置，可以选择覆盖: 覆盖后的配置文件 1`] = `
"import { defineConfig } from 'yapi-to-typescript'

export default defineConfig([
  {
    serverUrl: 'http://foo.bar',
    typesOnly: false,
    target: 'typescript',
    reactHooks: {
      enabled: false,
    },
    prodEnvName: 'production',
    outputFilePath: 'src/api/index.ts',
    requestFunctionFilePath: 'src/api/request.ts',
    dataKey: 'data',
    projects: [
      {
        token: 'hello',
        categories: [
          {
            id: 0,
            getRequestFunctionName(interfaceInfo, changeCase) {
              // 以接口全路径生成请求函数名
              return changeCase.camelCase(interfaceInfo.path)

              // 若生成的请求函数名存在语法关键词报错、或想通过某个关键词触发 IDE 自动引入提示，可考虑加前缀，如:
              // return changeCase.camelCase(\`api_\${interfaceInfo.path}\`)

              // 若生成的请求函数名有重复报错，可考虑将接口请求方式纳入生成条件，如:
              // return changeCase.camelCase(\`\${interfaceInfo.method}_\${interfaceInfo.path}\`)
            },
          },
        ],
      },
    ],
  },
])"
`;

exports[`cli 检查到已有配置，可以选择覆盖: 配置文件 1`] = `
"import { defineConfig } from 'yapi-to-typescript'

export default defineConfig([
  {
    serverUrl: 'http://foo.bar',
    typesOnly: false,
    target: 'typescript',
    reactHooks: {
      enabled: false,
    },
    prodEnvName: 'production',
    outputFilePath: 'src/api/index.ts',
    requestFunctionFilePath: 'src/api/request.ts',
    dataKey: 'data',
    projects: [
      {
        token: 'hello',
        categories: [
          {
            id: 0,
            getRequestFunctionName(interfaceInfo, changeCase) {
              // 以接口全路径生成请求函数名
              return changeCase.camelCase(interfaceInfo.path)

              // 若生成的请求函数名存在语法关键词报错、或想通过某个关键词触发 IDE 自动引入提示，可考虑加前缀，如:
              // return changeCase.camelCase(\`api_\${interfaceInfo.path}\`)

              // 若生成的请求函数名有重复报错，可考虑将接口请求方式纳入生成条件，如:
              // return changeCase.camelCase(\`\${interfaceInfo.method}_\${interfaceInfo.path}\`)
            },
          },
        ],
      },
    ],
  },
])"
`;

exports[`cli 正确初始化配置文件 & 生成结果: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

type UserRequestRestArgs = RequestFunctionRestArgs<typeof request>

// Request: 目前 React Hooks 功能有用到
export type Request<
  TRequestData,
  TRequestConfig extends RequestConfig,
  TRequestResult,
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_1 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_1 = '' as any
const prodUrl_0_0_0_1 = 'http://prod.com/' as any
const dataKey_0_0_0_1 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod\`
 * @更新时间 1610557429
 */
export interface HelloDeleteMethodRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod\`
 * @更新时间 1610557429
 */
export interface HelloDeleteMethodResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod\`
 * @更新时间 1610557429
 */
type HelloDeleteMethodRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod\`
 * @更新时间 1610557429
 */
const helloDeleteMethodRequestConfig: HelloDeleteMethodRequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/deleteMethod',
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'helloDeleteMethod',
  extraInfo: {},
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod\`
 * @更新时间 1610557429
 */
export const helloDeleteMethod = /*#__PURE__*/ (
  requestData: HelloDeleteMethodRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HelloDeleteMethodResponse>(prepare(helloDeleteMethodRequestConfig, requestData), ...args)
}

helloDeleteMethod.requestConfig = helloDeleteMethodRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod\`
 * @更新时间 1610557429
 */
export interface HelloGetMethodRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod\`
 * @更新时间 1610557429
 */
export interface HelloGetMethodResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod\`
 * @更新时间 1610557429
 */
type HelloGetMethodRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/getMethod',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod\`
 * @更新时间 1610557429
 */
const helloGetMethodRequestConfig: HelloGetMethodRequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/getMethod',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'helloGetMethod',
  extraInfo: {},
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod\`
 * @更新时间 1610557429
 */
export const helloGetMethod = /*#__PURE__*/ (requestData: HelloGetMethodRequest, ...args: UserRequestRestArgs) => {
  return request<HelloGetMethodResponse>(prepare(helloGetMethodRequestConfig, requestData), ...args)
}

helloGetMethod.requestConfig = helloGetMethodRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response\`
 * @更新时间 1610557429
 */
export interface HelloJson5ResponseRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response\`
 * @更新时间 1610557429
 */
export interface HelloJson5ResponseResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response\`
 * @更新时间 1610557429
 */
type HelloJson5ResponseRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Response',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response\`
 * @更新时间 1610557429
 */
const helloJson5ResponseRequestConfig: HelloJson5ResponseRequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/json5Response',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'helloJson5Response',
  extraInfo: {},
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response\`
 * @更新时间 1610557429
 */
export const helloJson5Response = /*#__PURE__*/ (
  requestData?: HelloJson5ResponseRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HelloJson5ResponseResponse>(prepare(helloJson5ResponseRequestConfig, requestData), ...args)
}

helloJson5Response.requestConfig = helloJson5ResponseRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request\`
 * @更新时间 1610557429
 */
export interface HelloJson5RequestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request\`
 * @更新时间 1610557429
 */
export interface HelloJson5RequestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request\`
 * @更新时间 1610557429
 */
type HelloJson5RequestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Request',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request\`
 * @更新时间 1610557429
 */
const helloJson5RequestRequestConfig: HelloJson5RequestRequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/json5Request',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'helloJson5Request',
  extraInfo: {},
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request\`
 * @更新时间 1610557429
 */
export const helloJson5Request = /*#__PURE__*/ (
  requestData: HelloJson5RequestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HelloJson5RequestResponse>(prepare(helloJson5RequestRequestConfig, requestData), ...args)
}

helloJson5Request.requestConfig = helloJson5RequestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod\`
 * @更新时间 1610557429
 */
export interface HelloPostMethodRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod\`
 * @更新时间 1610557429
 */
export interface HelloPostMethodResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod\`
 * @更新时间 1610557429
 */
type HelloPostMethodRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/postMethod',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod\`
 * @更新时间 1610557429
 */
const helloPostMethodRequestConfig: HelloPostMethodRequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/postMethod',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'helloPostMethod',
  extraInfo: {},
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod\`
 * @更新时间 1610557429
 */
export const helloPostMethod = /*#__PURE__*/ (requestData: HelloPostMethodRequest, ...args: UserRequestRestArgs) => {
  return request<HelloPostMethodResponse>(prepare(helloPostMethodRequestConfig, requestData), ...args)
}

helloPostMethod.requestConfig = helloPostMethodRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod\`
 * @更新时间 1610557429
 */
export interface HelloPutMethodRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod\`
 * @更新时间 1610557429
 */
export interface HelloPutMethodResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod\`
 * @更新时间 1610557429
 */
type HelloPutMethodRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/putMethod',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod\`
 * @更新时间 1610557429
 */
const helloPutMethodRequestConfig: HelloPutMethodRequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/putMethod',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'helloPutMethod',
  extraInfo: {},
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod\`
 * @更新时间 1610557429
 */
export const helloPutMethod = /*#__PURE__*/ (requestData: HelloPutMethodRequest, ...args: UserRequestRestArgs) => {
  return request<HelloPutMethodResponse>(prepare(helloPutMethodRequestConfig, requestData), ...args)
}

helloPutMethod.requestConfig = helloPutMethodRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample\`
 * @更新时间 1610557430
 */
export interface HelloDataKeyExampleRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample\`
 * @更新时间 1610557430
 */
export interface HelloDataKeyExampleResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample\`
 * @更新时间 1610557430
 */
type HelloDataKeyExampleRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKeyExample',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample\`
 * @更新时间 1610557430
 */
const helloDataKeyExampleRequestConfig: HelloDataKeyExampleRequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/dataKeyExample',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'helloDataKeyExample',
  extraInfo: {},
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample\`
 * @更新时间 1610557430
 */
export const helloDataKeyExample = /*#__PURE__*/ (
  requestData: HelloDataKeyExampleRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HelloDataKeyExampleResponse>(prepare(helloDataKeyExampleRequestConfig, requestData), ...args)
}

helloDataKeyExample.requestConfig = helloDataKeyExampleRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload\`
 * @更新时间 1610557430
 */
export interface HelloUploadRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload\`
 * @更新时间 1610557430
 */
export interface HelloUploadResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload\`
 * @更新时间 1610557430
 */
type HelloUploadRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/__hello__/upload', undefined, string, string, false>
>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload\`
 * @更新时间 1610557430
 */
const helloUploadRequestConfig: HelloUploadRequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/upload',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'helloUpload',
  extraInfo: {},
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload\`
 * @更新时间 1610557430
 */
export const helloUpload = /*#__PURE__*/ (requestData: HelloUploadRequest, ...args: UserRequestRestArgs) => {
  return request<HelloUploadResponse>(prepare(helloUploadRequestConfig, requestData), ...args)
}

helloUpload.requestConfig = helloUploadRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test\`
 * @更新时间 1610557430
 */
export interface HelloTestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test\`
 * @更新时间 1610557430
 */
export interface HelloTestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test\`
 * @更新时间 1610557430
 */
type HelloTestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/__hello__/test', undefined, string, 'cid', false>
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test\`
 * @更新时间 1610557430
 */
const helloTestRequestConfig: HelloTestRequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'helloTest',
  extraInfo: {},
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test\`
 * @更新时间 1610557430
 */
export const helloTest = /*#__PURE__*/ (requestData: HelloTestRequest, ...args: UserRequestRestArgs) => {
  return request<HelloTestResponse>(prepare(helloTestRequestConfig, requestData), ...args)
}

helloTest.requestConfig = helloTestRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData\`
 * @更新时间 1610557430
 */
export interface HelloNoResponseDataRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData\`
 * @更新时间 1610557430
 */
export interface HelloNoResponseDataResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData\`
 * @更新时间 1610557430
 */
type HelloNoResponseDataRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/noResponseData',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData\`
 * @更新时间 1610557430
 */
const helloNoResponseDataRequestConfig: HelloNoResponseDataRequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/noResponseData',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'helloNoResponseData',
  extraInfo: {},
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData\`
 * @更新时间 1610557430
 */
export const helloNoResponseData = /*#__PURE__*/ (
  requestData?: HelloNoResponseDataRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HelloNoResponseDataResponse>(prepare(helloNoResponseDataRequestConfig, requestData), ...args)
}

helloNoResponseData.requestConfig = helloNoResponseDataRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse\`
 * @更新时间 1610557430
 */
export interface HelloEmptyResponseRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse\`
 * @更新时间 1610557430
 */
export interface HelloEmptyResponseResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse\`
 * @更新时间 1610557430
 */
type HelloEmptyResponseRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/emptyResponse',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse\`
 * @更新时间 1610557430
 */
const helloEmptyResponseRequestConfig: HelloEmptyResponseRequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/emptyResponse',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'helloEmptyResponse',
  extraInfo: {},
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse\`
 * @更新时间 1610557430
 */
export const helloEmptyResponse = /*#__PURE__*/ (
  requestData?: HelloEmptyResponseRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HelloEmptyResponseResponse>(prepare(helloEmptyResponseRequestConfig, requestData), ...args)
}

helloEmptyResponse.requestConfig = helloEmptyResponseRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test\`
 * @更新时间 1610557430
 */
export interface HelloPathIdHelloNamePassAvatarTestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test\`
 * @更新时间 1610557430
 */
export interface HelloPathIdHelloNamePassAvatarTestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test\`
 * @更新时间 1610557430
 */
type HelloPathIdHelloNamePassAvatarTestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test\`
 * @更新时间 1610557430
 */
const helloPathIdHelloNamePassAvatarTestRequestConfig: HelloPathIdHelloNamePassAvatarTestRequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'helloPathIdHelloNamePassAvatarTest',
  extraInfo: {},
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test\`
 * @更新时间 1610557430
 */
export const helloPathIdHelloNamePassAvatarTest = /*#__PURE__*/ (
  requestData: HelloPathIdHelloNamePassAvatarTestRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HelloPathIdHelloNamePassAvatarTestResponse>(
    prepare(helloPathIdHelloNamePassAvatarTestRequestConfig, requestData),
    ...args,
  )
}

helloPathIdHelloNamePassAvatarTest.requestConfig = helloPathIdHelloNamePassAvatarTestRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi\`
 * @更新时间 1610557430
 */
export interface HelloTestIdHihihiRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi\`
 * @更新时间 1610557430
 */
export interface HelloTestIdHihihiResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi\`
 * @更新时间 1610557430
 */
type HelloTestIdHihihiRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi\`
 * @更新时间 1610557430
 */
const helloTestIdHihihiRequestConfig: HelloTestIdHihihiRequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/test/{id}/:hihihi',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'helloTestIdHihihi',
  extraInfo: {},
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi\`
 * @更新时间 1610557430
 */
export const helloTestIdHihihi = /*#__PURE__*/ (
  requestData: HelloTestIdHihihiRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HelloTestIdHihihiResponse>(prepare(helloTestIdHihihiRequestConfig, requestData), ...args)
}

helloTestIdHihihi.requestConfig = helloTestIdHihihiRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207\`
 * @更新时间 1610557430
 */
export interface HelloTestIdHihihi_1608478638207Request {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207\`
 * @更新时间 1610557430
 */
export interface HelloTestIdHihihi_1608478638207Response {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207\`
 * @更新时间 1610557430
 */
type HelloTestIdHihihi_1608478638207RequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_1608478638207',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207\`
 * @更新时间 1610557430
 */
const helloTestIdHihihi_1608478638207RequestConfig: HelloTestIdHihihi_1608478638207RequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/test/{id}/:hihihi_1608478638207',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'helloTestIdHihihi_1608478638207',
  extraInfo: {},
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207\`
 * @更新时间 1610557430
 */
export const helloTestIdHihihi_1608478638207 = /*#__PURE__*/ (
  requestData: HelloTestIdHihihi_1608478638207Request,
  ...args: UserRequestRestArgs
) => {
  return request<HelloTestIdHihihi_1608478638207Response>(
    prepare(helloTestIdHihihi_1608478638207RequestConfig, requestData),
    ...args,
  )
}

helloTestIdHihihi_1608478638207.requestConfig = helloTestIdHihihi_1608478638207RequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse\`
 * @更新时间 1610557430
 */
export interface HelloRawResponseRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse\`
 * @更新时间 1610557430
 */
export type HelloRawResponseResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse\`
 * @更新时间 1610557430
 */
type HelloRawResponseRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/rawResponse',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse\`
 * @更新时间 1610557430
 */
const helloRawResponseRequestConfig: HelloRawResponseRequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/rawResponse',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'helloRawResponse',
  extraInfo: {},
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse\`
 * @更新时间 1610557430
 */
export const helloRawResponse = /*#__PURE__*/ (requestData?: HelloRawResponseRequest, ...args: UserRequestRestArgs) => {
  return request<HelloRawResponseResponse>(prepare(helloRawResponseRequestConfig, requestData), ...args)
}

helloRawResponse.requestConfig = helloRawResponseRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers\`
 * @更新时间 1619432971
 */
export interface HelloHeadersRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers\`
 * @更新时间 1619432971
 */
export interface HelloHeadersResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers\`
 * @更新时间 1619432971
 */
type HelloHeadersRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/__hello__/headers', undefined, string, string, true>
>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers\`
 * @更新时间 1619432971
 */
const helloHeadersRequestConfig: HelloHeadersRequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/headers',
  method: Method.GET,
  requestHeaders: {Authorization: 'dddddd', Cookie: 'x=1'},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'helloHeaders',
  extraInfo: {},
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers\`
 * @更新时间 1619432971
 */
export const helloHeaders = /*#__PURE__*/ (requestData?: HelloHeadersRequest, ...args: UserRequestRestArgs) => {
  return request<HelloHeadersResponse>(prepare(helloHeadersRequestConfig, requestData), ...args)
}

helloHeaders.requestConfig = helloHeadersRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar\`
 * @更新时间 1621501310
 */
export interface HelloUserIdAvatarRequest {
  /**
   * 大小
   */
  size: number
  /**
   * 格式
   */
  format: string
  /**
   * ID
   */
  id: number
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar\`
 * @更新时间 1621501310
 */
export interface HelloUserIdAvatarResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar\`
 * @更新时间 1621501310
 */
type HelloUserIdAvatarRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/user/:id/avatar',
    undefined,
    'id',
    'size' | 'format',
    false
  >
>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar\`
 * @更新时间 1621501310
 */
const helloUserIdAvatarRequestConfig: HelloUserIdAvatarRequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/user/:id/avatar',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: ['id'],
  queryNames: ['size', 'format'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'helloUserIdAvatar',
  extraInfo: {},
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar\`
 * @更新时间 1621501310
 */
export const helloUserIdAvatar = /*#__PURE__*/ (
  requestData: HelloUserIdAvatarRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HelloUserIdAvatarResponse>(prepare(helloUserIdAvatarRequestConfig, requestData), ...args)
}

helloUserIdAvatar.requestConfig = helloUserIdAvatarRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep\`
 * @更新时间 1626489548
 */
export interface HelloDataKeyDeepRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep\`
 * @更新时间 1626489548
 */
export interface HelloDataKeyDeepResponse {
  err: number
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string
    }
  }
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep\`
 * @更新时间 1626489548
 */
type HelloDataKeyDeepRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKey/deep',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep\`
 * @更新时间 1626489548
 */
const helloDataKeyDeepRequestConfig: HelloDataKeyDeepRequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/dataKey/deep',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'helloDataKeyDeep',
  extraInfo: {},
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep\`
 * @更新时间 1626489548
 */
export const helloDataKeyDeep = /*#__PURE__*/ (requestData?: HelloDataKeyDeepRequest, ...args: UserRequestRestArgs) => {
  return request<HelloDataKeyDeepResponse>(prepare(helloDataKeyDeepRequestConfig, requestData), ...args)
}

helloDataKeyDeep.requestConfig = helloDataKeyDeepRequestConfig

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data\`
 * @更新时间 1632493928
 */
export interface HelloGetOnlyPostFormDataRequest {
  /**
   * id
   */
  query_id: string
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data\`
 * @更新时间 1632493928
 */
export interface HelloGetOnlyPostFormDataResponse {}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data\`
 * @更新时间 1632493928
 */
type HelloGetOnlyPostFormDataRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/get/only_post_form_data',
    undefined,
    string,
    'query_id',
    false
  >
>

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data\`
 * @更新时间 1632493928
 */
const helloGetOnlyPostFormDataRequestConfig: HelloGetOnlyPostFormDataRequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/get/only_post_form_data',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: ['query_id'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'helloGetOnlyPostFormData',
  extraInfo: {},
}

/**
 * 接口 [fix: 仅 POST 类接口处理表单数据↗](http://foo.bar/project/11/interface/api/1345) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/get/only_post_form_data\`
 * @更新时间 1632493928
 */
export const helloGetOnlyPostFormData = /*#__PURE__*/ (
  requestData: HelloGetOnlyPostFormDataRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HelloGetOnlyPostFormDataResponse>(prepare(helloGetOnlyPostFormDataRequestConfig, requestData), ...args)
}

helloGetOnlyPostFormData.requestConfig = helloGetOnlyPostFormDataRequestConfig

const mockUrl_0_0_0_2 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_2 = '' as any
const prodUrl_0_0_0_2 = 'http://prod.com/' as any
const dataKey_0_0_0_2 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2\`
 * @更新时间 1610557430
 */
export interface HelloGet2Request {}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2\`
 * @更新时间 1610557430
 */
export interface HelloGet2Response {
  msg: string
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2\`
 * @更新时间 1610557430
 */
type HelloGet2RequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/__hello__/get2', undefined, string, string, true>
>

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2\`
 * @更新时间 1610557430
 */
const helloGet2RequestConfig: HelloGet2RequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/get2',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'helloGet2',
  extraInfo: {},
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2\`
 * @更新时间 1610557430
 */
export const helloGet2 = /*#__PURE__*/ (requestData?: HelloGet2Request, ...args: UserRequestRestArgs) => {
  return request<HelloGet2Response>(prepare(helloGet2RequestConfig, requestData), ...args)
}

helloGet2.requestConfig = helloGet2RequestConfig

/**
 * 接口 [默认值↗](http://foo.bar/project/11/interface/api/1829) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @请求头 \`GET /__hello__/default_value\`
 * @更新时间 1642140816
 */
export interface HelloDefaultValueRequest {}

/**
 * 接口 [默认值↗](http://foo.bar/project/11/interface/api/1829) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @请求头 \`GET /__hello__/default_value\`
 * @更新时间 1642140816
 */
export interface HelloDefaultValueResponse {
  id: number
}

/**
 * 接口 [默认值↗](http://foo.bar/project/11/interface/api/1829) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @请求头 \`GET /__hello__/default_value\`
 * @更新时间 1642140816
 */
type HelloDefaultValueRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/default_value',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [默认值↗](http://foo.bar/project/11/interface/api/1829) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @请求头 \`GET /__hello__/default_value\`
 * @更新时间 1642140816
 */
const helloDefaultValueRequestConfig: HelloDefaultValueRequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/default_value',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'helloDefaultValue',
  extraInfo: {},
}

/**
 * 接口 [默认值↗](http://foo.bar/project/11/interface/api/1829) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @请求头 \`GET /__hello__/default_value\`
 * @更新时间 1642140816
 */
export const helloDefaultValue = /*#__PURE__*/ (
  requestData?: HelloDefaultValueRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HelloDefaultValueResponse>(prepare(helloDefaultValueRequestConfig, requestData), ...args)
}

helloDefaultValue.requestConfig = helloDefaultValueRequestConfig

const mockUrl_0_0_0_3 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_3 = '' as any
const prodUrl_0_0_0_3 = 'http://prod.com/' as any
const dataKey_0_0_0_3 = undefined as any

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail\`
 * @更新时间 1610557430
 */
export interface HelloIssue_17Picture_3dDetailRequest {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail\`
 * @更新时间 1610557430
 */
export interface HelloIssue_17Picture_3dDetailResponse {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail\`
 * @更新时间 1610557430
 */
type HelloIssue_17Picture_3dDetailRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/issue-17/picture_3d_detail',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail\`
 * @更新时间 1610557430
 */
const helloIssue_17Picture_3dDetailRequestConfig: HelloIssue_17Picture_3dDetailRequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: '/__hello__/issue-17/picture_3d_detail',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'helloIssue_17Picture_3dDetail',
  extraInfo: {},
}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail\`
 * @更新时间 1610557430
 */
export const helloIssue_17Picture_3dDetail = /*#__PURE__*/ (
  requestData?: HelloIssue_17Picture_3dDetailRequest,
  ...args: UserRequestRestArgs
) => {
  return request<HelloIssue_17Picture_3dDetailResponse>(
    prepare(helloIssue_17Picture_3dDetailRequestConfig, requestData),
    ...args,
  )
}

helloIssue_17Picture_3dDetail.requestConfig = helloIssue_17Picture_3dDetailRequestConfig

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get\`
 * @更新时间 1610557430
 */
export interface Hello_28GetRequest {
  a: string
  b: string
  c: string
  'd    e': string
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get\`
 * @更新时间 1610557430
 */
export interface Hello_28GetResponse {}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get\`
 * @更新时间 1610557430
 */
type Hello_28GetRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/28/get',
    undefined,
    string,
    '   a' | ' b' | 'c ' | '    d    e   ',
    false
  >
>

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get\`
 * @更新时间 1610557430
 */
const hello_28GetRequestConfig: Hello_28GetRequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: '/__hello__/28/get',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  queryNames: ['   a', ' b', 'c ', '    d    e   '],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hello_28Get',
  extraInfo: {},
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get\`
 * @更新时间 1610557430
 */
export const hello_28Get = /*#__PURE__*/ (requestData: Hello_28GetRequest, ...args: UserRequestRestArgs) => {
  return request<Hello_28GetResponse>(prepare(hello_28GetRequestConfig, requestData), ...args)
}

hello_28Get.requestConfig = hello_28GetRequestConfig

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form\`
 * @更新时间 1610557431
 */
export interface Hello_28PostFormRequest {
  a: string
  b: string
  c: string
  'd   e': string
  'd    e': string
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form\`
 * @更新时间 1610557431
 */
export interface Hello_28PostFormResponse {}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form\`
 * @更新时间 1610557431
 */
type Hello_28PostFormRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/28/post/form',
    undefined,
    string,
    '   a' | ' b' | 'c ' | '    d    e   ',
    false
  >
>

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form\`
 * @更新时间 1610557431
 */
const hello_28PostFormRequestConfig: Hello_28PostFormRequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: '/__hello__/28/post/form',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  queryNames: ['   a', ' b', 'c ', '    d    e   '],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hello_28PostForm',
  extraInfo: {},
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form\`
 * @更新时间 1610557431
 */
export const hello_28PostForm = /*#__PURE__*/ (requestData: Hello_28PostFormRequest, ...args: UserRequestRestArgs) => {
  return request<Hello_28PostFormResponse>(prepare(hello_28PostFormRequestConfig, requestData), ...args)
}

hello_28PostForm.requestConfig = hello_28PostFormRequestConfig

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json\`
 * @更新时间 1610557431
 */
export interface Hello_28PostJsonRequest {
  a: string
  b: string
  'c   d': string
  e: {
    f: string
  }
  c: string
  'd    e': string
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json\`
 * @更新时间 1610557431
 */
export interface Hello_28PostJsonResponse {
  a?: number
  b?: string
  c?: {
    d?: string
  }
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json\`
 * @更新时间 1610557431
 */
type Hello_28PostJsonRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/28/post/json',
    undefined,
    string,
    '   a' | ' b' | 'c ' | '    d    e   ',
    false
  >
>

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json\`
 * @更新时间 1610557431
 */
const hello_28PostJsonRequestConfig: Hello_28PostJsonRequestConfig = /*#__PURE__*/ {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: '/__hello__/28/post/json',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  queryNames: ['   a', ' b', 'c ', '    d    e   '],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hello_28PostJson',
  extraInfo: {},
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json\`
 * @更新时间 1610557431
 */
export const hello_28PostJson = /*#__PURE__*/ (requestData: Hello_28PostJsonRequest, ...args: UserRequestRestArgs) => {
  return request<Hello_28PostJsonResponse>(prepare(hello_28PostJsonRequestConfig, requestData), ...args)
}

hello_28PostJson.requestConfig = hello_28PostJsonRequestConfig

/* prettier-ignore-end */
"
`;

exports[`cli 正确初始化配置文件 & 生成结果: 请求文件 1`] = `
"import { RequestFunctionParams } from 'yapi-to-typescript'

export interface RequestOptions {
  /**
   * 使用的服务器。
   *
   * - \`prod\`: 生产服务器
   * - \`dev\`: 测试服务器
   * - \`mock\`: 模拟服务器
   *
   * @default prod
   */
  server?: 'prod' | 'dev' | 'mock',
}

export default function request<TResponseData>(
  payload: RequestFunctionParams,
  options: RequestOptions = {
    server: 'prod',
  },
): Promise<TResponseData> {
  return new Promise<TResponseData>((resolve, reject) => {
    // 基本地址
    const baseUrl = options.server === 'mock'
      ? payload.mockUrl
      : options.server === 'dev'
        ? payload.devUrl
        : payload.prodUrl

    // 请求地址
    const url = \`\${baseUrl}\${payload.path}\`

    // 具体请求逻辑
  })
}"
`;

exports[`cli 正确初始化配置文件 & 生成结果: 配置文件 1`] = `
"import { defineConfig } from 'yapi-to-typescript'

export default defineConfig([
  {
    serverUrl: 'http://foo.bar',
    typesOnly: false,
    target: 'typescript',
    reactHooks: {
      enabled: false,
    },
    prodEnvName: 'production',
    outputFilePath: 'src/api/index.ts',
    requestFunctionFilePath: 'src/api/request.ts',
    dataKey: 'data',
    projects: [
      {
        token: 'hello',
        categories: [
          {
            id: 0,
            getRequestFunctionName(interfaceInfo, changeCase) {
              // 以接口全路径生成请求函数名
              return changeCase.camelCase(interfaceInfo.path)

              // 若生成的请求函数名存在语法关键词报错、或想通过某个关键词触发 IDE 自动引入提示，可考虑加前缀，如:
              // return changeCase.camelCase(\`api_\${interfaceInfo.path}\`)

              // 若生成的请求函数名有重复报错，可考虑将接口请求方式纳入生成条件，如:
              // return changeCase.camelCase(\`\${interfaceInfo.method}_\${interfaceInfo.path}\`)
            },
          },
        ],
      },
    ],
  },
])"
`;
