// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cli help: help 1`] = `
"
# 用法
  初始化配置文件: ytt init
  生成代码: ytt
  查看帮助: ytt help

# GitHub
  https://github.com/fjc0k/yapi-to-typescript
"
`;

exports[`cli 检查到已有配置，可以选择不覆盖: 不覆盖后的配置文件 1`] = `"hello"`;

exports[`cli 检查到已有配置，可以选择不覆盖: 修改过的配置文件 1`] = `"hello"`;

exports[`cli 检查到已有配置，可以选择不覆盖: 配置文件 1`] = `
"import { defineConfig } from 'yapi-to-typescript'

export default defineConfig([
  {
    serverUrl: 'http://foo.bar',
    typesOnly: false,
    target: 'typescript',
    reactHooks: {
      enabled: false,
    },
    prodEnvName: 'production',
    outputFilePath: 'src/api/index.ts',
    requestFunctionFilePath: 'src/api/request.ts',
    dataKey: 'data',
    projects: [
      {
        token: 'hello',
        categories: [
          {
            id: 0,
            getRequestFunctionName(interfaceInfo, changeCase) {
              return changeCase.camelCase(
                interfaceInfo.parsedPath.name,
              )
            },
          },
        ],
      },
    ],
  },
])"
`;

exports[`cli 检查到已有配置，可以选择覆盖: 修改过的配置文件 1`] = `"hello"`;

exports[`cli 检查到已有配置，可以选择覆盖: 覆盖后的配置文件 1`] = `
"import { defineConfig } from 'yapi-to-typescript'

export default defineConfig([
  {
    serverUrl: 'http://foo.bar',
    typesOnly: false,
    target: 'typescript',
    reactHooks: {
      enabled: false,
    },
    prodEnvName: 'production',
    outputFilePath: 'src/api/index.ts',
    requestFunctionFilePath: 'src/api/request.ts',
    dataKey: 'data',
    projects: [
      {
        token: 'hello',
        categories: [
          {
            id: 0,
            getRequestFunctionName(interfaceInfo, changeCase) {
              return changeCase.camelCase(
                interfaceInfo.parsedPath.name,
              )
            },
          },
        ],
      },
    ],
  },
])"
`;

exports[`cli 检查到已有配置，可以选择覆盖: 配置文件 1`] = `
"import { defineConfig } from 'yapi-to-typescript'

export default defineConfig([
  {
    serverUrl: 'http://foo.bar',
    typesOnly: false,
    target: 'typescript',
    reactHooks: {
      enabled: false,
    },
    prodEnvName: 'production',
    outputFilePath: 'src/api/index.ts',
    requestFunctionFilePath: 'src/api/request.ts',
    dataKey: 'data',
    projects: [
      {
        token: 'hello',
        categories: [
          {
            id: 0,
            getRequestFunctionName(interfaceInfo, changeCase) {
              return changeCase.camelCase(
                interfaceInfo.parsedPath.name,
              )
            },
          },
        ],
      },
    ],
  },
])"
`;

exports[`cli 正确初始化配置文件 & 生成结果: 接口文件 1`] = `
"/* prettier-ignore-start */
/* tslint:disable */
/* eslint-disable */

/* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

// @ts-ignore
// prettier-ignore
import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
// @ts-ignore
import request from './request'

type UserRequestRestArgs = RequestFunctionRestArgs<typeof request>

// Request: 目前 React Hooks 功能有用到
export type Request<
  TRequestData,
  TRequestConfig extends RequestConfig,
  TRequestResult
> = (TRequestConfig['requestDataOptional'] extends true
  ? (requestData?: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
  : (requestData: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult) & {
  requestConfig: TRequestConfig
}

const mockUrl_0_0_0_1 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_1 = '' as any
const prodUrl_0_0_0_1 = 'http://prod.com/' as any
const dataKey_0_0_0_1 = undefined as any

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod\`
 * @更新时间 1610557429
 */
export interface DeleteMethodRequest {
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod\`
 * @更新时间 1610557429
 */
export interface DeleteMethodResponse {}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod\`
 * @更新时间 1610557429
 */
type DeleteMethodRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/deleteMethod',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod\`
 * @更新时间 1610557429
 */
const deleteMethodRequestConfig: DeleteMethodRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/deleteMethod',
  method: Method.DELETE,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deleteMethod',
}

/**
 * 接口 [DELETE 方法↗](http://foo.bar/project/11/interface/api/45) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`DELETE /__hello__/deleteMethod\`
 * @更新时间 1610557429
 */
export const deleteMethod = (requestData: DeleteMethodRequest, ...args: UserRequestRestArgs) => {
  return request<DeleteMethodResponse>(prepare(deleteMethodRequestConfig, requestData), ...args)
}

deleteMethod.requestConfig = deleteMethodRequestConfig

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod\`
 * @更新时间 1610557429
 */
export interface GetMethodRequest {
  /**
   * X 值
   */
  x: string
  /**
   * Y 值
   */
  y?: string
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod\`
 * @更新时间 1610557429
 */
export interface GetMethodResponse {
  /**
   * 结果
   */
  result: number
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod\`
 * @更新时间 1610557429
 */
type GetMethodRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/getMethod',
    undefined,
    string,
    'x' | 'y',
    false
  >
>

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod\`
 * @更新时间 1610557429
 */
const getMethodRequestConfig: GetMethodRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/getMethod',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: ['x', 'y'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'getMethod',
}

/**
 * 接口 [GET 方法↗](http://foo.bar/project/11/interface/api/51) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/getMethod\`
 * @更新时间 1610557429
 */
export const getMethod = (requestData: GetMethodRequest, ...args: UserRequestRestArgs) => {
  return request<GetMethodResponse>(prepare(getMethodRequestConfig, requestData), ...args)
}

getMethod.requestConfig = getMethodRequestConfig

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response\`
 * @更新时间 1610557429
 */
export interface Json5ResponseRequest {}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response\`
 * @更新时间 1610557429
 */
export interface Json5ResponseResponse {
  id?: number
  age?: string
  name?: string
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response\`
 * @更新时间 1610557429
 */
type Json5ResponseRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Response',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response\`
 * @更新时间 1610557429
 */
const json5ResponseRequestConfig: Json5ResponseRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/json5Response',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5Response',
}

/**
 * 接口 [JSON5 响应↗](http://foo.bar/project/11/interface/api/57) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/json5Response\`
 * @更新时间 1610557429
 */
export const json5Response = (requestData?: Json5ResponseRequest, ...args: UserRequestRestArgs) => {
  return request<Json5ResponseResponse>(prepare(json5ResponseRequestConfig, requestData), ...args)
}

json5Response.requestConfig = json5ResponseRequestConfig

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request\`
 * @更新时间 1610557429
 */
export interface Json5RequestRequest {
  /**
   * 1
   */
  id?: number
  /**
   * \\"方剑成\\"
   */
  name?: string
  /**
   * [\\"photo\\",2]
   */
  likes?: string[]
  nest?: {
    /**
     * 1
     */
    x?: number
    y?: {
      /**
       * \\"2\\"
       */
      z?: string
    }
  }
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request\`
 * @更新时间 1610557429
 */
export interface Json5RequestResponse {}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request\`
 * @更新时间 1610557429
 */
type Json5RequestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/json5Request',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request\`
 * @更新时间 1610557429
 */
const json5RequestRequestConfig: Json5RequestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/json5Request',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json5Request',
}

/**
 * 接口 [JSON5 请求↗](http://foo.bar/project/11/interface/api/63) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/json5Request\`
 * @更新时间 1610557429
 */
export const json5Request = (requestData: Json5RequestRequest, ...args: UserRequestRestArgs) => {
  return request<Json5RequestResponse>(prepare(json5RequestRequestConfig, requestData), ...args)
}

json5Request.requestConfig = json5RequestRequestConfig

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod\`
 * @更新时间 1610557429
 */
export interface PostMethodRequest {
  /**
   * 页码
   */
  page: number
  /**
   * 每页数量
   */
  limit: number
  /**
   * 关键词
   */
  keyword?: string
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod\`
 * @更新时间 1610557429
 */
export interface PostMethodResponse {
  /**
   * 列表
   */
  list: {
    /**
     * 姓名
     */
    name: string
  }[]
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod\`
 * @更新时间 1610557429
 */
type PostMethodRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/postMethod',
    undefined,
    string,
    string,
    false
  >
>

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod\`
 * @更新时间 1610557429
 */
const postMethodRequestConfig: PostMethodRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/postMethod',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'postMethod',
}

/**
 * 接口 [POST 方法↗](http://foo.bar/project/11/interface/api/69) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/postMethod\`
 * @更新时间 1610557429
 */
export const postMethod = (requestData: PostMethodRequest, ...args: UserRequestRestArgs) => {
  return request<PostMethodResponse>(prepare(postMethodRequestConfig, requestData), ...args)
}

postMethod.requestConfig = postMethodRequestConfig

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod\`
 * @更新时间 1610557429
 */
export interface PutMethodRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod\`
 * @更新时间 1610557429
 */
export interface PutMethodResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {}
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod\`
 * @更新时间 1610557429
 */
type PutMethodRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/putMethod',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod\`
 * @更新时间 1610557429
 */
const putMethodRequestConfig: PutMethodRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/putMethod',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'putMethod',
}

/**
 * 接口 [PUT 方法↗](http://foo.bar/project/11/interface/api/75) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/putMethod\`
 * @更新时间 1610557429
 */
export const putMethod = (requestData: PutMethodRequest, ...args: UserRequestRestArgs) => {
  return request<PutMethodResponse>(prepare(putMethodRequestConfig, requestData), ...args)
}

putMethod.requestConfig = putMethodRequestConfig

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleRequest {
  /**
   * X 值
   */
  x: string
  id: string
  namre?: string
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample\`
 * @更新时间 1610557430
 */
export interface DataKeyExampleResponse {
  /**
   * 错误
   */
  err: number
  /**
   * 错误详情
   */
  msg: string
  /**
   * 数据
   */
  data?: {
    /**
     * 成功啦
     */
    success: boolean
  }
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample\`
 * @更新时间 1610557430
 */
type DataKeyExampleRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKeyExample',
    undefined,
    string,
    'id' | 'namre',
    false
  >
>

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample\`
 * @更新时间 1610557430
 */
const dataKeyExampleRequestConfig: DataKeyExampleRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/dataKeyExample',
  method: Method.PUT,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: ['id', 'namre'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'dataKeyExample',
}

/**
 * 接口 [dataKey 例子↗](http://foo.bar/project/11/interface/api/81) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`PUT /__hello__/dataKeyExample\`
 * @更新时间 1610557430
 */
export const dataKeyExample = (requestData: DataKeyExampleRequest, ...args: UserRequestRestArgs) => {
  return request<DataKeyExampleResponse>(prepare(dataKeyExampleRequestConfig, requestData), ...args)
}

dataKeyExample.requestConfig = dataKeyExampleRequestConfig

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload\`
 * @更新时间 1610557430
 */
export interface UploadRequest {
  /**
   * 文件
   */
  file: FileData
  /**
   * 名称
   */
  name: string
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload\`
 * @更新时间 1610557430
 */
export interface UploadResponse {}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload\`
 * @更新时间 1610557430
 */
type UploadRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/__hello__/upload', undefined, string, string, false>
>

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload\`
 * @更新时间 1610557430
 */
const uploadRequestConfig: UploadRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/upload',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'upload',
}

/**
 * 接口 [文件↗](http://foo.bar/project/11/interface/api/87) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/upload\`
 * @更新时间 1610557430
 */
export const upload = (requestData: UploadRequest, ...args: UserRequestRestArgs) => {
  return request<UploadResponse>(prepare(uploadRequestConfig, requestData), ...args)
}

upload.requestConfig = uploadRequestConfig

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test\`
 * @更新时间 1610557430
 */
export interface TestRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * cid
   */
  cid: string
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test\`
 * @更新时间 1610557430
 */
export interface TestResponse {}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test\`
 * @更新时间 1610557430
 */
type TestRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/__hello__/test', undefined, string, 'cid', false>
>

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test\`
 * @更新时间 1610557430
 */
const testRequestConfig: TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: ['cid'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'test',
}

/**
 * 接口 [查询参数+对象↗](http://foo.bar/project/11/interface/api/93) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test\`
 * @更新时间 1610557430
 */
export const test = (requestData: TestRequest, ...args: UserRequestRestArgs) => {
  return request<TestResponse>(prepare(testRequestConfig, requestData), ...args)
}

test.requestConfig = testRequestConfig

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData\`
 * @更新时间 1610557430
 */
export interface NoResponseDataRequest {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData\`
 * @更新时间 1610557430
 */
export interface NoResponseDataResponse {}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData\`
 * @更新时间 1610557430
 */
type NoResponseDataRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/noResponseData',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData\`
 * @更新时间 1610557430
 */
const noResponseDataRequestConfig: NoResponseDataRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/noResponseData',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'noResponseData',
}

/**
 * 接口 [没返回数据↗](http://foo.bar/project/11/interface/api/99) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/noResponseData\`
 * @更新时间 1610557430
 */
export const noResponseData = (requestData?: NoResponseDataRequest, ...args: UserRequestRestArgs) => {
  return request<NoResponseDataResponse>(prepare(noResponseDataRequestConfig, requestData), ...args)
}

noResponseData.requestConfig = noResponseDataRequestConfig

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse\`
 * @更新时间 1610557430
 */
export interface EmptyResponseRequest {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse\`
 * @更新时间 1610557430
 */
export interface EmptyResponseResponse {}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse\`
 * @更新时间 1610557430
 */
type EmptyResponseRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/emptyResponse',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse\`
 * @更新时间 1610557430
 */
const emptyResponseRequestConfig: EmptyResponseRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/emptyResponse',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'emptyResponse',
}

/**
 * 接口 [空返回数据↗](http://foo.bar/project/11/interface/api/105) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/emptyResponse\`
 * @更新时间 1610557430
 */
export const emptyResponse = (requestData?: EmptyResponseRequest, ...args: UserRequestRestArgs) => {
  return request<EmptyResponseResponse>(prepare(emptyResponseRequestConfig, requestData), ...args)
}

emptyResponse.requestConfig = emptyResponseRequestConfig

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test\`
 * @更新时间 1610557430
 */
export interface TestRequest {
  /**
   * 23
   */
  id: string
  name: string
  pass: string
  test: string
  avatar: string
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test\`
 * @更新时间 1610557430
 */
export interface TestResponse {}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test\`
 * @更新时间 1610557430
 */
type TestRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test',
    undefined,
    'id' | 'name' | 'pass' | 'test' | 'avatar',
    string,
    false
  >
>

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test\`
 * @更新时间 1610557430
 */
const testRequestConfig: TestRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/path/:id/hello/:name/:pass/{avatar}/:test',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: ['id', 'name', 'pass', 'test', 'avatar'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'test',
}

/**
 * 接口 [路径参数↗](http://foo.bar/project/11/interface/api/111) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/path/:id/hello/:name/:pass/{avatar}/:test\`
 * @更新时间 1610557430
 */
export const test = (requestData: TestRequest, ...args: UserRequestRestArgs) => {
  return request<TestResponse>(prepare(testRequestConfig, requestData), ...args)
}

test.requestConfig = testRequestConfig

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi\`
 * @更新时间 1610557430
 */
export interface HihihiRequest {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi\`
 * @更新时间 1610557430
 */
export interface HihihiResponse {}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi\`
 * @更新时间 1610557430
 */
type HihihiRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi',
    undefined,
    'hihihi' | 'id',
    string,
    false
  >
>

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi\`
 * @更新时间 1610557430
 */
const hihihiRequestConfig: HihihiRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/test/{id}/:hihihi',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: ['hihihi', 'id'],
  queryNames: [],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihi',
}

/**
 * 接口 [路径参数+对象↗](http://foo.bar/project/11/interface/api/117) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi\`
 * @更新时间 1610557430
 */
export const hihihi = (requestData: HihihiRequest, ...args: UserRequestRestArgs) => {
  return request<HihihiResponse>(prepare(hihihiRequestConfig, requestData), ...args)
}

hihihi.requestConfig = hihihiRequestConfig

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207Request {
  /**
   * 键1
   */
  K1: string
  /**
   * 键2
   */
  K2?: number
  /**
   * 22222
   */
  query?: string
  /**
   * 嗨咯
   */
  hihihi: string
  /**
   * ID
   */
  id: string
  hihihi_1608478638207: string
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207\`
 * @更新时间 1610557430
 */
export interface Hihihi_1608478638207Response {}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207\`
 * @更新时间 1610557430
 */
type Hihihi_1608478638207RequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/test/{id}/:hihihi_1608478638207',
    undefined,
    'hihihi' | 'id' | 'hihihi_1608478638207',
    'query',
    false
  >
>

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207\`
 * @更新时间 1610557430
 */
const hihihi_1608478638207RequestConfig: Hihihi_1608478638207RequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/test/{id}/:hihihi_1608478638207',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: ['hihihi', 'id', 'hihihi_1608478638207'],
  queryNames: ['query'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'hihihi_1608478638207',
}

/**
 * 接口 [路径参数+查询参数+对象↗](http://foo.bar/project/11/interface/api/123) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`POST /__hello__/test/{id}/:hihihi_1608478638207\`
 * @更新时间 1610557430
 */
export const hihihi_1608478638207 = (requestData: Hihihi_1608478638207Request, ...args: UserRequestRestArgs) => {
  return request<Hihihi_1608478638207Response>(prepare(hihihi_1608478638207RequestConfig, requestData), ...args)
}

hihihi_1608478638207.requestConfig = hihihi_1608478638207RequestConfig

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse\`
 * @更新时间 1610557430
 */
export interface RawResponseRequest {}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse\`
 * @更新时间 1610557430
 */
export type RawResponseResponse = any

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse\`
 * @更新时间 1610557430
 */
type RawResponseRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/rawResponse',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse\`
 * @更新时间 1610557430
 */
const rawResponseRequestConfig: RawResponseRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/rawResponse',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.raw,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'rawResponse',
}

/**
 * 接口 [返回 raw↗](http://foo.bar/project/11/interface/api/129) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/rawResponse\`
 * @更新时间 1610557430
 */
export const rawResponse = (requestData?: RawResponseRequest, ...args: UserRequestRestArgs) => {
  return request<RawResponseResponse>(prepare(rawResponseRequestConfig, requestData), ...args)
}

rawResponse.requestConfig = rawResponseRequestConfig

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers\`
 * @更新时间 1619432971
 */
export interface HeadersRequest {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers\`
 * @更新时间 1619432971
 */
export interface HeadersResponse {}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers\`
 * @更新时间 1619432971
 */
type HeadersRequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/__hello__/headers', undefined, string, string, true>
>

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers\`
 * @更新时间 1619432971
 */
const headersRequestConfig: HeadersRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/headers',
  method: Method.GET,
  requestHeaders: {Authorization: 'dddddd', Cookie: 'x=1'},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'headers',
}

/**
 * 接口 [请求头↗](http://foo.bar/project/11/interface/api/1087) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/headers\`
 * @更新时间 1619432971
 */
export const headers = (requestData?: HeadersRequest, ...args: UserRequestRestArgs) => {
  return request<HeadersResponse>(prepare(headersRequestConfig, requestData), ...args)
}

headers.requestConfig = headersRequestConfig

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar\`
 * @更新时间 1621501310
 */
export interface AvatarRequest {
  /**
   * 大小
   */
  size: number
  /**
   * 格式
   */
  format: string
  /**
   * ID
   */
  id: number
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar\`
 * @更新时间 1621501310
 */
export interface AvatarResponse {}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar\`
 * @更新时间 1621501310
 */
type AvatarRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/user/:id/avatar',
    undefined,
    'id',
    'size' | 'format',
    false
  >
>

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar\`
 * @更新时间 1621501310
 */
const avatarRequestConfig: AvatarRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/user/:id/avatar',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: ['id'],
  queryNames: ['size', 'format'],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'avatar',
}

/**
 * 接口 [路径参数、查询参数类型↗](http://foo.bar/project/11/interface/api/1137) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/user/:id/avatar\`
 * @更新时间 1621501310
 */
export const avatar = (requestData: AvatarRequest, ...args: UserRequestRestArgs) => {
  return request<AvatarResponse>(prepare(avatarRequestConfig, requestData), ...args)
}

avatar.requestConfig = avatarRequestConfig

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep\`
 * @更新时间 1626489548
 */
export interface DeepRequest {}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **返回类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep\`
 * @更新时间 1626489548
 */
export interface DeepResponse {
  err: number
  container: {
    data: {
      /**
       * 真数据
       */
      realData: string
    }
  }
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置的类型**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep\`
 * @更新时间 1626489548
 */
type DeepRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/dataKey/deep',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求配置**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep\`
 * @更新时间 1626489548
 */
const deepRequestConfig: DeepRequestConfig = {
  mockUrl: mockUrl_0_0_0_1,
  devUrl: devUrl_0_0_0_1,
  prodUrl: prodUrl_0_0_0_1,
  path: '/__hello__/dataKey/deep',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_1,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'deep',
}

/**
 * 接口 [dataKey 深度路径↗](http://foo.bar/project/11/interface/api/1167) 的 **请求函数**
 *
 * @分类 [test↗](http://foo.bar/project/11/interface/api/cat_18)
 * @请求头 \`GET /__hello__/dataKey/deep\`
 * @更新时间 1626489548
 */
export const deep = (requestData?: DeepRequest, ...args: UserRequestRestArgs) => {
  return request<DeepResponse>(prepare(deepRequestConfig, requestData), ...args)
}

deep.requestConfig = deepRequestConfig

const mockUrl_0_0_0_2 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_2 = '' as any
const prodUrl_0_0_0_2 = 'http://prod.com/' as any
const dataKey_0_0_0_2 = undefined as any

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2\`
 * @更新时间 1610557430
 */
export interface Get2Request {}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **返回类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2\`
 * @更新时间 1610557430
 */
export interface Get2Response {
  msg: string
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置的类型**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2\`
 * @更新时间 1610557430
 */
type Get2RequestConfig = Readonly<
  RequestConfig<'http://foo.bar/mock/32', '', 'http://prod.com/', '/__hello__/get2', undefined, string, string, true>
>

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求配置**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2\`
 * @更新时间 1610557430
 */
const get2RequestConfig: Get2RequestConfig = {
  mockUrl: mockUrl_0_0_0_2,
  devUrl: devUrl_0_0_0_2,
  prodUrl: prodUrl_0_0_0_2,
  path: '/__hello__/get2',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_2,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'get2',
}

/**
 * 接口 [hello↗](http://foo.bar/project/11/interface/api/135) 的 **请求函数**
 *
 * @分类 [test2↗](http://foo.bar/project/11/interface/api/cat_20)
 * @标签 \`2期\`, \`梦想城\`
 * @请求头 \`GET /__hello__/get2\`
 * @更新时间 1610557430
 */
export const get2 = (requestData?: Get2Request, ...args: UserRequestRestArgs) => {
  return request<Get2Response>(prepare(get2RequestConfig, requestData), ...args)
}

get2.requestConfig = get2RequestConfig

const mockUrl_0_0_0_3 = 'http://foo.bar/mock/32' as any
const devUrl_0_0_0_3 = '' as any
const prodUrl_0_0_0_3 = 'http://prod.com/' as any
const dataKey_0_0_0_3 = undefined as any

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail\`
 * @更新时间 1610557430
 */
export interface Picture_3dDetailRequest {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail\`
 * @更新时间 1610557430
 */
export interface Picture_3dDetailResponse {}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail\`
 * @更新时间 1610557430
 */
type Picture_3dDetailRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/issue-17/picture_3d_detail',
    undefined,
    string,
    string,
    true
  >
>

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail\`
 * @更新时间 1610557430
 */
const picture_3dDetailRequestConfig: Picture_3dDetailRequestConfig = {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: '/__hello__/issue-17/picture_3d_detail',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  queryNames: [],
  requestDataOptional: true,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'picture_3dDetail',
}

/**
 * 接口 [17: path 含有数字时，大小写出现错误↗](http://foo.bar/project/11/interface/api/141) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/issue-17/picture_3d_detail\`
 * @更新时间 1610557430
 */
export const picture_3dDetail = (requestData?: Picture_3dDetailRequest, ...args: UserRequestRestArgs) => {
  return request<Picture_3dDetailResponse>(prepare(picture_3dDetailRequestConfig, requestData), ...args)
}

picture_3dDetail.requestConfig = picture_3dDetailRequestConfig

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get\`
 * @更新时间 1610557430
 */
export interface GetRequest {
  a: string
  b: string
  c: string
  'd    e': string
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get\`
 * @更新时间 1610557430
 */
export interface GetResponse {}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get\`
 * @更新时间 1610557430
 */
type GetRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/28/get',
    undefined,
    string,
    '   a' | ' b' | 'c ' | '    d    e   ',
    false
  >
>

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get\`
 * @更新时间 1610557430
 */
const getRequestConfig: GetRequestConfig = {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: '/__hello__/28/get',
  method: Method.GET,
  requestHeaders: {},
  requestBodyType: RequestBodyType.query,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  queryNames: ['   a', ' b', 'c ', '    d    e   '],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'get',
}

/**
 * 接口 [28: 字段名称含空格 GET↗](http://foo.bar/project/11/interface/api/147) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`GET /__hello__/28/get\`
 * @更新时间 1610557430
 */
export const get = (requestData: GetRequest, ...args: UserRequestRestArgs) => {
  return request<GetResponse>(prepare(getRequestConfig, requestData), ...args)
}

get.requestConfig = getRequestConfig

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form\`
 * @更新时间 1610557431
 */
export interface FormRequest {
  a: string
  b: string
  c: string
  'd   e': string
  'd    e': string
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form\`
 * @更新时间 1610557431
 */
export interface FormResponse {}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form\`
 * @更新时间 1610557431
 */
type FormRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/28/post/form',
    undefined,
    string,
    '   a' | ' b' | 'c ' | '    d    e   ',
    false
  >
>

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form\`
 * @更新时间 1610557431
 */
const formRequestConfig: FormRequestConfig = {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: '/__hello__/28/post/form',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.form,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  queryNames: ['   a', ' b', 'c ', '    d    e   '],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'form',
}

/**
 * 接口 [28: 字段名称含空格 POST form↗](http://foo.bar/project/11/interface/api/153) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/form\`
 * @更新时间 1610557431
 */
export const form = (requestData: FormRequest, ...args: UserRequestRestArgs) => {
  return request<FormResponse>(prepare(formRequestConfig, requestData), ...args)
}

form.requestConfig = formRequestConfig

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json\`
 * @更新时间 1610557431
 */
export interface JsonRequest {
  a: string
  b: string
  'c   d': string
  e: {
    f: string
  }
  c: string
  'd    e': string
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **返回类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json\`
 * @更新时间 1610557431
 */
export interface JsonResponse {
  a?: number
  b?: string
  c?: {
    d?: string
  }
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求配置的类型**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json\`
 * @更新时间 1610557431
 */
type JsonRequestConfig = Readonly<
  RequestConfig<
    'http://foo.bar/mock/32',
    '',
    'http://prod.com/',
    '/__hello__/28/post/json',
    undefined,
    string,
    '   a' | ' b' | 'c ' | '    d    e   ',
    false
  >
>

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求配置**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json\`
 * @更新时间 1610557431
 */
const jsonRequestConfig: JsonRequestConfig = {
  mockUrl: mockUrl_0_0_0_3,
  devUrl: devUrl_0_0_0_3,
  prodUrl: prodUrl_0_0_0_3,
  path: '/__hello__/28/post/json',
  method: Method.POST,
  requestHeaders: {},
  requestBodyType: RequestBodyType.json,
  responseBodyType: ResponseBodyType.json,
  dataKey: dataKey_0_0_0_3,
  paramNames: [],
  queryNames: ['   a', ' b', 'c ', '    d    e   '],
  requestDataOptional: false,
  requestDataJsonSchema: {},
  responseDataJsonSchema: {},
  requestFunctionName: 'json',
}

/**
 * 接口 [28: 字段名称含空格 POST json↗](http://foo.bar/project/11/interface/api/159) 的 **请求函数**
 *
 * @分类 [issues↗](http://foo.bar/project/11/interface/api/cat_22)
 * @请求头 \`POST /__hello__/28/post/json\`
 * @更新时间 1610557431
 */
export const json = (requestData: JsonRequest, ...args: UserRequestRestArgs) => {
  return request<JsonResponse>(prepare(jsonRequestConfig, requestData), ...args)
}

json.requestConfig = jsonRequestConfig

/* prettier-ignore-end */
"
`;

exports[`cli 正确初始化配置文件 & 生成结果: 请求文件 1`] = `
"import { RequestFunctionParams } from 'yapi-to-typescript'

export interface RequestOptions {
  /**
   * 使用的服务器。
   *
   * - \`prod\`: 生产服务器
   * - \`dev\`: 测试服务器
   * - \`mock\`: 模拟服务器
   *
   * @default prod
   */
  server?: 'prod' | 'dev' | 'mock',
}

export default function request<TResponseData>(
  payload: RequestFunctionParams,
  options: RequestOptions = {
    server: 'prod',
  },
): Promise<TResponseData> {
  return new Promise<TResponseData>((resolve, reject) => {
    // 基本地址
    const baseUrl = options.server === 'mock'
      ? payload.mockUrl
      : options.server === 'dev'
        ? payload.devUrl
        : payload.prodUrl

    // 请求地址
    const url = \`\${baseUrl}\${payload.path}\`

    // 具体请求逻辑
  })
}"
`;

exports[`cli 正确初始化配置文件 & 生成结果: 配置文件 1`] = `
"import { defineConfig } from 'yapi-to-typescript'

export default defineConfig([
  {
    serverUrl: 'http://foo.bar',
    typesOnly: false,
    target: 'typescript',
    reactHooks: {
      enabled: false,
    },
    prodEnvName: 'production',
    outputFilePath: 'src/api/index.ts',
    requestFunctionFilePath: 'src/api/request.ts',
    dataKey: 'data',
    projects: [
      {
        token: 'hello',
        categories: [
          {
            id: 0,
            getRequestFunctionName(interfaceInfo, changeCase) {
              return changeCase.camelCase(
                interfaceInfo.parsedPath.name,
              )
            },
          },
        ],
      },
    ],
  },
])"
`;
